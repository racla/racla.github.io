{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":0},{"_id":"source/images/avatar1.jpg","path":"images/avatar1.jpg","modified":1,"renderable":0},{"_id":"source/images/MySQL_ACID.png","path":"images/MySQL_ACID.png","modified":1,"renderable":0},{"_id":"source/images/reentrantlock1.png","path":"images/reentrantlock1.png","modified":1,"renderable":0},{"_id":"source/files/building-data-driven-internet-of-things-iot-applications.pdf","path":"files/building-data-driven-internet-of-things-iot-applications.pdf","modified":1,"renderable":0},{"_id":"source/files/docker-mta/ROI_Infographic_9-13-17.pdf","path":"files/docker-mta/ROI_Infographic_9-13-17.pdf","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"source/files/docker-mta/Docker-for-Virtualization-Admin-eBook.pdf","path":"files/docker-mta/Docker-for-Virtualization-Admin-eBook.pdf","modified":1,"renderable":0},{"_id":"source/files/docker-mta/WP_Docker and the 3 ways devops.pdf","path":"files/docker-mta/WP_Docker and the 3 ways devops.pdf","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"source/files/docker-mta/SB_MTA_04.14.2017.pdf","path":"files/docker-mta/SB_MTA_04.14.2017.pdf","modified":1,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"source/files/applying-chatbots-into-iot.pdf","path":"files/applying-chatbots-into-iot.pdf","modified":1,"renderable":0},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"source/files/IoT-Suite.pdf","path":"files/IoT-Suite.pdf","modified":1,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"source/files/Java_1512024443940-Reviewed20180115.pdf","path":"files/Java_1512024443940-Reviewed20180115.pdf","modified":1,"renderable":0}],"Cache":[{"_id":"source/googlecc99871950e7b1b0.html","hash":"8b2d076a7f089744b23c4e5abecb0bd75ab7b856","modified":1569068700691},{"_id":"source/robots.txt","hash":"f0b903945c8a9605403b6ed5a044efb67e54258c","modified":1569068334047},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1522918618000},{"_id":"source/404/index.html","hash":"a5991bb3598c5d934bd97e3bc4ed14b71ebf1e62","modified":1522918618000},{"_id":"source/_posts/121-Best-Time-to-Buy-and-Sell-Stock.md","hash":"b751ab897e754de9ed04afc630403fb746ca440d","modified":1574516106480},{"_id":"source/_posts/143-Reorder-List.md","hash":"7e9878fc3421c8eb4abc765c9f7680175acf2d0f","modified":1573144653984},{"_id":"source/_posts/100-Same-Tree.md","hash":"e7e2f756ec97aa4cd87dbd978d944024898cb086","modified":1573228209012},{"_id":"source/_posts/147-Insertion-Sort-List.md","hash":"0ed65aff1263d68571e1685c1af491d46d42683c","modified":1573571572014},{"_id":"source/_posts/19-Remove-Nth-Node-From-End-of-List.md","hash":"784b0a882576cf3e58f9856b5977af9f57cfd7e1","modified":1574836644936},{"_id":"source/_posts/148-Sort-List.md","hash":"a75d2bdf017b5c2e92e1899b19b3de71f2ca411e","modified":1573571843350},{"_id":"source/_posts/23-Merge-k-Sorted-Lists.md","hash":"7a6b282c13cc7b4e0fd5020302ead2612b95c355","modified":1574836713604},{"_id":"source/_posts/120-Triangle.md","hash":"07843dfe8d47df2d0b53a5543fc43e33dbac0c9a","modified":1573230326012},{"_id":"source/_posts/216-Combination-Sum-III.md","hash":"fe93a49ea4c33391015bc2a0e416250cb6e86e9f","modified":1574228691441},{"_id":"source/_posts/39-Combination-Sum.md","hash":"45b837d4e29b4fd4b0376c9afd92aa62b0e5765a","modified":1574093745678},{"_id":"source/_posts/377-Combination-Sum-IV.md","hash":"c12dbad39893a7c02b78ae09b8c066fcd1e7e554","modified":1574228687905},{"_id":"source/_posts/47-Permutations-II.md","hash":"119acadb149333dd5b6f0fe3f89ba451d9bb52f3","modified":1573835995226},{"_id":"source/_posts/46-Permutations.md","hash":"772ae466998aee51e70ae805bcb541425b683288","modified":1573835912726},{"_id":"source/_posts/49-Group-Anagrams.md","hash":"4883e5e22641289be7007b403a40276c65719f9c","modified":1573835866230},{"_id":"source/_posts/55-Jump-Game.md","hash":"72f4fb29ca51bf1378dcf11468965e96e33b9c4e","modified":1574516545436},{"_id":"source/_posts/61-Rotate-List.md","hash":"8c7fcf8f35bd7ae3ff03efcb409e56bf82ca27d4","modified":1574515631184},{"_id":"source/_posts/86-Partition-List.md","hash":"4ca578357e4b4ca836d044f4eb2c40f84be004bb","modified":1574836722972},{"_id":"source/_posts/24-Swap-Nodes-in-Pairs.md","hash":"c1038b1497287f5762fee041cc1468b49b24b82e","modified":1574515597500},{"_id":"source/_posts/82-Remove-Duplicates-from-Sorted-List-II.md","hash":"b59bdc756de512940e41ec961bd9077beccce73d","modified":1574836704020},{"_id":"source/_posts/87-Scramble-String.md","hash":"422f05f82c695ec33a9401482c074fd8a9ea37d3","modified":1573102365102},{"_id":"source/_posts/99-Recover-Binary-Search-Tree.md","hash":"e108f30ec466307f52817d8b5081c2ac5f75144b","modified":1573036526387},{"_id":"source/_posts/25-Reverse-Nodes-in-k-Group.md","hash":"da63ced1095356f710e167a7c4ed2cc74e096456","modified":1574515645224},{"_id":"source/_posts/Https.md","hash":"553b8d75662bac45eb4b237d81b6438a0d32112d","modified":1569044760563},{"_id":"source/_posts/MySQL-ACID.md","hash":"a8467ebaa32d292bb6714762a80d4d901097c9e8","modified":1570194895378},{"_id":"source/_posts/Java.md","hash":"29222292c88aa3052e1185d25d5af2a66ea047a7","modified":1570194892738},{"_id":"source/_posts/ReentrantLock.md","hash":"cedadf46e43b8c8a692266b434af1e5dc6b5fe34","modified":1569049091711},{"_id":"source/_posts/40-Combination-Sum-II.md","hash":"621db013f851334290749087aa10608ff155ca2d","modified":1574228624541},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1522918618000},{"_id":"themes/next/README.cn.md","hash":"5d8af3d8de8d3926126a738519e97c8442b0effe","modified":1522918618000},{"_id":"themes/next/README.md","hash":"44b28d995681a7c48bfe3d0577d6203812d07e59","modified":1522918618000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1522918618000},{"_id":"themes/next/_config.yml","hash":"2c083919d1060e137c4ce8171e2651ceaa5ab811","modified":1573230075620},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1522918618000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1522918618000},{"_id":"source/about/index.md","hash":"cdb447c81e529f08fd7c0b04a1087e6c65298843","modified":1567653307208},{"_id":"source/images/avatar.jpg","hash":"d9f6adea889194eca7f2f9a638860655f82ba0e7","modified":1570438566031},{"_id":"source/images/avatar1.jpg","hash":"964e4f70e2c7d276c7ac00efe61b183c48a8fe77","modified":1567655583321},{"_id":"source/images/MySQL_ACID.png","hash":"94178d660552484982d5efa1d8aa7396ed58ceb5","modified":1570182378438},{"_id":"source/tags/index.md","hash":"ec13ad4f972e0e9bc811b0a15d0384911c264644","modified":1522918618000},{"_id":"source/samplecodes/.DS_Store","hash":"f289bd0c554f09dd7ea7e1d804f2997973f512ee","modified":1522918618000},{"_id":"source/images/reentrantlock1.png","hash":"b105a8c573fa112fb530c8326b23486a78a031de","modified":1569044025455},{"_id":"source/categories/index.md","hash":"e80c28979398a0be7415c6607a424b7417e734c3","modified":1522918618000},{"_id":"source/artifacts/hono-docker-compose.yml","hash":"dfb6d4aebe5f670d2e560cb6a57fbf9f6d1e2d57","modified":1522918618000},{"_id":"source/_posts/92-Reverse-Linked-List-II.md","hash":"fd67a4ca0fc53cadfc25b4d2bf5210b0801558db","modified":1574836614252},{"_id":"source/files/building-data-driven-internet-of-things-iot-applications.pdf","hash":"14adbe6c0509072022fae1bcc9781f11f963abe8","modified":1522918618000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1522918618000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1522918618000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1522918618000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1522918618000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1522918618000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1522918618000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1522918618000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1522918618000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1522918618000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1522918618000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1522918618000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1522918618000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1522918618000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1522918618000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1522918618000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1522918618000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1522918618000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1522918618000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1522918618000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1522918618000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1522918618000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1522918618000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1522918618000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1522918618000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1522918618000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1522918618000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1522918618000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1522918618000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1522918618000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522918618000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1522918618000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1522918618000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1522918618000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1522918618000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1522918618000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1522918618000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1522918618000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1522918618000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5578dcc354d2a226e7a48232a524e6c19b3fcf17","modified":1568272971103},{"_id":"themes/next/layout/_partials/footer.swig","hash":"05035d121a94daa04cca9b1644a89048dbb5f3a7","modified":1569067718087},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1522918618000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1522918618000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1522918618000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1522918618000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1522918618000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1522918618000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1522918618000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1522918618000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1522918618000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1522918618000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1522918618000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1522918618000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1522918618000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1522918618000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1522918618000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1522918618000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1522918618000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1522918618000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1522918618000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1522918618000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1522918618000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1522918618000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1522918618000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1522918618000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1522918618000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1522918618000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1522918618000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1522918618000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1522918618000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1522918618000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1522918618000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1522918618000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1522918618000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1522918618000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1522918618000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1522918618000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1522918618000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1522918618000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1522918618000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1522918618000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1522918618000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1522918618000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1522918618000},{"_id":"source/files/docker-mta/ROI_Infographic_9-13-17.pdf","hash":"ef51c7ffdb652b465e71aad40b06adcd602a8240","modified":1522918618000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522918618000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522918618000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522918618000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522918618000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522918618000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522918618000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522918618000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1522918618000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1522918618000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1522918618000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1522918618000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1522918618000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1522918618000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1522918618000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1522918618000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1522918618000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1522918618000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1522918618000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1522918618000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1522918618000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1522918618000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1522918618000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1522918618000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1522918618000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1522918618000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1522918618000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1522918618000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1522918618000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1522918618000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1522918618000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1522918618000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1522918618000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1522918618000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1522918618000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1522918618000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"acb39cc3da6bc55371b207f66ad4460a85e51cac","modified":1568273998443},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4f88d9a158037e566c609ac3529cb81c73454e23","modified":1568272152951},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1522918618000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"08338cba394ebef11bd9473675237fbb8ba06f04","modified":1568273685055},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1522918618000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1522918618000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1522918618000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1522918618000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1522918618000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1522918618000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1522918618000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1522918618000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1522918618000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1522918618000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1522918618000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1522918618000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1522918618000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1522918618000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1522918618000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1522918618000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1522918618000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1522918618000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1522918618000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1522918618000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1522918618000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1522918618000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1522918618000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1522918618000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1522918618000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1522918618000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1522918618000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1522918618000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1522918618000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1522918618000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1522918618000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1522918618000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1522918618000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1522918618000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1522918618000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1522918618000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1522918618000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1522918618000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1522918618000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1522918618000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1522918618000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1522918618000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1522918618000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1522918618000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1522918618000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1522918618000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1522918618000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1522918618000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1522918618000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1522918618000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1522918618000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1522918618000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1522918618000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1522918618000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1522918618000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1522918618000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1522918618000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1522918618000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1522918618000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1522918618000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1522918618000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1522918618000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1522918618000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1522918618000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1522918618000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1522918618000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1522918618000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1522918618000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1522918618000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1522918618000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1522918618000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1522918618000},{"_id":"source/files/docker-mta/Docker-for-Virtualization-Admin-eBook.pdf","hash":"94b26aad4e5d6bff6382d888efa0cee9ae543174","modified":1522918618000},{"_id":"source/files/docker-mta/WP_Docker and the 3 ways devops.pdf","hash":"c15b2da8f92cb6afec7b5aea406b4f98f88bb73f","modified":1522918618000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1522918618000},{"_id":"source/files/docker-mta/SB_MTA_04.14.2017.pdf","hash":"711f8e42781692cd080f48edd964a201b9f424cb","modified":1522918618000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1522918618000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1522918618000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1522918618000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1522918618000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1522918618000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1522918618000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1522918618000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1522918618000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1522918618000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1522918618000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1522918618000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1522918618000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1522918618000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1522918618000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1522918618000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1522918618000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1522918618000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1522918618000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1522918618000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1522918618000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1522918618000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1522918618000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1522918618000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2c73c557505e97cff0371839a646da7b36c02aee","modified":1522918618000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1522918618000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1522918618000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1522918618000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1522918618000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1522918618000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1522918618000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1522918618000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1522918618000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1522918618000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1522918618000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1522918618000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1522918618000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1522918618000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1522918618000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1522918618000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1522918618000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1522918618000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1522918618000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1522918618000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1522918618000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1522918618000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1522918618000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1522918618000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1522918618000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1522918618000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1522918618000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1522918618000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1522918618000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1522918618000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1522918618000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1522918618000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1522918618000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1522918618000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1522918618000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1522918618000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1522918618000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1522918618000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1522918618000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1522918618000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1522918618000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1522918618000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1522918618000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1522918618000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1522918618000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1522918618000},{"_id":"source/files/applying-chatbots-into-iot.pdf","hash":"ee9fd07a9e0a478b3f5f96ac2b76033234010a8e","modified":1522918618000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1522918618000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1522918618000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1522918618000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1522918618000},{"_id":"source/files/IoT-Suite.pdf","hash":"599a21375fc47fb9c55f2ebdfd5ca7c44541caad","modified":1522918618000},{"_id":"source/files/Java_1512024443940-Reviewed20180115.pdf","hash":"822b09e628f1023431d20c0dd49bba64e1d22e6b","modified":1522918618000},{"_id":"public/googlecc99871950e7b1b0.html","hash":"2a33d36c54048a62add75878040e322cc08d5913","modified":1574836737574},{"_id":"public/artifacts/hono-docker-compose.json","hash":"8fde6a4e9a16459a8e5e90c3bc64d61f69688525","modified":1574836737574},{"_id":"public/baidusitemap.xml","hash":"a80fbc4e066621ac9f3d58e27de86c55e3c0e413","modified":1574836737575},{"_id":"public/sitemap.xml","hash":"e18845b0a88d15267ed5edaee797b9b2645fd8a2","modified":1574836737575},{"_id":"public/404/index.html","hash":"87cb02a34eed618de0aefe0db6ae063353b40c07","modified":1574836737658},{"_id":"public/about/index.html","hash":"f7b285f35be3d8133b338f028cb88d711e6741d8","modified":1574836737659},{"_id":"public/tags/index.html","hash":"7b7b2ae09fee372297117485aa34bf7fa3a000a2","modified":1574836737659},{"_id":"public/categories/index.html","hash":"34a22931971829bdc045917bcd4756bd136e12ad","modified":1574836737659},{"_id":"public/archives/2019/08/index.html","hash":"e753fb6ea31190cf296fc0e556172b62d8178aca","modified":1574836737659},{"_id":"public/archives/2019/09/index.html","hash":"b642c149a6ff9fbd009fe24020efdfd89a67b77b","modified":1574836737659},{"_id":"public/categories/Computer-Network/index.html","hash":"c657ed3f3b097442b6116e40882d2e2f8f71098c","modified":1574836737659},{"_id":"public/categories/中文/index.html","hash":"f1c93ee79fda2ff6456c1170c15998630302c94e","modified":1574836737659},{"_id":"public/categories/Concurrency/index.html","hash":"5496b29ebb87e18834f5a7b6d0ce4e9470a4a7fc","modified":1574836737659},{"_id":"public/categories/中文/Database/index.html","hash":"1e446ba0a1a741773ee738836e86bbc7d4dea466","modified":1574836737659},{"_id":"public/categories/中文/Java/index.html","hash":"e7336a9cb260b8e0057fc13d6437888eea007258","modified":1574836737659},{"_id":"public/tags/Kanade-s-Algorithm/index.html","hash":"a01f1a978b0a02abc2037253a92ad0c17f7c006a","modified":1574836737660},{"_id":"public/tags/Subarray/index.html","hash":"8336d8eeb90110fadf54b6021f10b7ea4de1b1b3","modified":1574836737660},{"_id":"public/tags/recursion/index.html","hash":"09c8478435b54684213c657cc4894fe550eddf46","modified":1574836737660},{"_id":"public/tags/pointer/index.html","hash":"5dff18748043f3c6eef9ef027093c244515939fc","modified":1574836737660},{"_id":"public/tags/binary-tree/index.html","hash":"272bbdea3d6c58d67b7081bde25882d52ea18445","modified":1574836737660},{"_id":"public/tags/dfs/index.html","hash":"598288f93c1d05b3eeca45ac2028e46a92780791","modified":1574836737660},{"_id":"public/tags/backtracking/index.html","hash":"8e7b5cefd920d3b84fcd3e8fe69887e4425bbb79","modified":1574836737660},{"_id":"public/tags/review/index.html","hash":"eecc45d5eb67c2c8eb60bf57908bcc646224061e","modified":1574836737660},{"_id":"public/tags/HashMap/index.html","hash":"f82023d6b6ba5fbedd8e824d09511d98ec73b8c8","modified":1574836737660},{"_id":"public/tags/https/index.html","hash":"8b5a3ec2f5ba1bacd0890b31f3f16c8e0ddb4951","modified":1574836737660},{"_id":"public/tags/MySQL/index.html","hash":"76a8cd102157e8d0c0137068f19c6a8367c8ac0b","modified":1574836737661},{"_id":"public/tags/ACID/index.html","hash":"0d25fcace931abe03bd76035b9b7edbaf3b4242d","modified":1574836737661},{"_id":"public/tags/Java/index.html","hash":"595f57dd0cc70cb9c6b232834541da918232df55","modified":1574836737661},{"_id":"public/tags/Java基础/index.html","hash":"6e900d948582f3676b563fc84a0bfcd71ff83577","modified":1574836737661},{"_id":"public/tags/ReentrantLock/index.html","hash":"db496f5502f10c3ee88d2a6ed5c7181289ed5496","modified":1574836737662},{"_id":"public/tags/J-U-C/index.html","hash":"f109e59714a6bd0dcb96071c0d29a47d8b125112","modified":1574836737662},{"_id":"public/tags/Concurrency/index.html","hash":"5e677364bf767f7ecdb91a6db63bbc5842dc9271","modified":1574836737662},{"_id":"public/61-Rotate-List/index.html","hash":"5d1282f5f4846c9f9104f8d9e4ea44baf062fd34","modified":1574836737662},{"_id":"public/25-Reverse-Nodes-in-k-Group/index.html","hash":"0a52440cea6d12cbd4985f840e33d29afa79c47f","modified":1574836737663},{"_id":"public/24-Swap-Nodes-in-Pairs/index.html","hash":"3b71889b8f389ad25f192b6f31aea94fe0c51bbb","modified":1574836737663},{"_id":"public/377-Combination-Sum-IV/index.html","hash":"5fe9c8841d620d72a5ecf128014058c01d17bc71","modified":1574836737664},{"_id":"public/216-Combination-Sum-III/index.html","hash":"d27ebe56470f1f2acaee457941ecf1b138eccaf2","modified":1574836737664},{"_id":"public/40-Combination-Sum-II/index.html","hash":"312f2b86bf8cc37e74d86ac85689037b1cdd1252","modified":1574836737664},{"_id":"public/39-Combination-Sum/index.html","hash":"b5c3aa196a5840894debd6a9c773f68e0cbd23f5","modified":1574836737664},{"_id":"public/47-Permutations-II/index.html","hash":"e24d78886d470962458f934ab34782ac40d41b08","modified":1574836737664},{"_id":"public/46-Permutations/index.html","hash":"ce4592c5a9b619c4a28bbf9d0f0cc50b2d2d6e7d","modified":1574836737664},{"_id":"public/49-Group-Anagrams/index.html","hash":"fdf74d9029b74d17aae161d95ae5305dc5e9a352","modified":1574836737665},{"_id":"public/148-Sort-List/index.html","hash":"cdb76293094e930609ba1590101610259e53bcce","modified":1574836737665},{"_id":"public/147-Insertion-Sort-List/index.html","hash":"6b7889a9608ecbce4bd407e542894f1a4edbf803","modified":1574836737667},{"_id":"public/121-Best-Time-to-Buy-and-Sell-Stock/index.html","hash":"6bb415b913b6ea49af15fa6a9fb47e9f8d4e9943","modified":1574836737667},{"_id":"public/120-Triangle/index.html","hash":"e6ddc8d987b1f8b4d7003f485111bfdaa0ea59f0","modified":1574836737667},{"_id":"public/143-Reorder-List/index.html","hash":"dc4c51463c833b2d59f6792b9621fde719756a6b","modified":1574836737667},{"_id":"public/87-Scramble-String/index.html","hash":"16dbcdfd9a6887f2c83ae82c150a5b19709f969e","modified":1574836737667},{"_id":"public/55-Jump-Game/index.html","hash":"e101dca5963a6e793faf02891dcef2c37ad4989e","modified":1574836737667},{"_id":"public/100-Same-Tree/index.html","hash":"0b71fb9411e52a8c66c98ddad46bdb63497875ba","modified":1574836737668},{"_id":"public/99-Recover-Binary-Search-Tree/index.html","hash":"1a7fad860e1d2f4ef604c837279ee5b290325320","modified":1574836737668},{"_id":"public/Java/index.html","hash":"e6e86e68f266fa213c1834e94e8d49de5e62f121","modified":1574836737668},{"_id":"public/MySQL-ACID/index.html","hash":"49a38df08510bf251af2aa7fce239c404dcd8a19","modified":1574836737668},{"_id":"public/ReentrantLock/index.html","hash":"13b66ac231660cbb9bd8babcc141396a6703cb2d","modified":1574836737668},{"_id":"public/Https/index.html","hash":"bc2da9bdd92de540bfaf78ac753798ee26cf5bb5","modified":1574836737668},{"_id":"public/archives/index.html","hash":"1dca6ccbcef03b0f54499a87c0b18fccadfdda3d","modified":1574836737668},{"_id":"public/archives/page/2/index.html","hash":"4c92bc2920005f191159d10b428872f9b19bff40","modified":1574836737669},{"_id":"public/archives/page/3/index.html","hash":"b1fe5079a23fa56212b5e88698b2f7b4038c572e","modified":1574836737669},{"_id":"public/archives/2019/index.html","hash":"ffc21a67501eef702d3535a00902a359efb2bb59","modified":1574836737669},{"_id":"public/archives/2019/page/2/index.html","hash":"0d38ff3e1c781fde9753c96b3fd1125e1d274264","modified":1574836737669},{"_id":"public/archives/2019/page/3/index.html","hash":"2783df91cd2cf5485e0d2bc401b28199d9cfe3d6","modified":1574836737669},{"_id":"public/archives/2019/11/index.html","hash":"a80c0ad7c93417ed3ee7c13d056ad5ef51d4b45b","modified":1574836737669},{"_id":"public/archives/2019/11/page/2/index.html","hash":"bfff342475e08a89bff66b6bfefc876c12a3f1f0","modified":1574836737669},{"_id":"public/categories/LeetCode/index.html","hash":"1c1538e3d6d7eafe9e2d41d37ee388dbfa690692","modified":1574836737669},{"_id":"public/categories/LeetCode/page/2/index.html","hash":"215f4ab359a6837d9148e66a5ef6f590bd973d1a","modified":1574836737669},{"_id":"public/index.html","hash":"d56303c9153b44dac0fefbebae6b0e6750461273","modified":1574836737669},{"_id":"public/page/2/index.html","hash":"1b768b5e68bb8dfd2e1518d4b47996daacfe8086","modified":1574836737670},{"_id":"public/page/3/index.html","hash":"1a4e7ce094d1243d7f868fb45f15a984cf5bcbbc","modified":1574836737670},{"_id":"public/tags/list/index.html","hash":"96563b0faf726b9bb057d20c59bbfcc6ffb6d29b","modified":1574836737670},{"_id":"public/tags/dynamic-programming/index.html","hash":"6a78f47a220c89e549823a1cea8d887e0ecd8a03","modified":1574836737670},{"_id":"public/92-Reverse-Linked-List-II/index.html","hash":"b0ac94a70deac162dfd550e73ef3644dee848b32","modified":1574836737681},{"_id":"public/archives/2019/11/page/3/index.html","hash":"d4f8add185ffbeda1b9eb4e758d8be39e88d0a12","modified":1574836737681},{"_id":"public/categories/LeetCode/page/3/index.html","hash":"fd2891621777f4a381500608f569f8e23c1d9fe1","modified":1574836737681},{"_id":"public/86-Partition-List/index.html","hash":"4390250ded923ff9362c3c6640528535d855ed51","modified":1574836737681},{"_id":"public/23-Merge-k-Sorted-Lists/index.html","hash":"df9df095efcdbf4c6a609043064b41b04e634135","modified":1574836737681},{"_id":"public/82-Remove-Duplicates-from-Sorted-List-II/index.html","hash":"8a88a905a7c6f17be04acf858f5a89ff5614cdac","modified":1574836737681},{"_id":"public/19-Remove-Nth-Node-From-End-of-List/index.html","hash":"c129f7fe231b8e531bc3e5d3eaf1aee5351b6c58","modified":1574836737681},{"_id":"public/robots.txt","hash":"f0b903945c8a9605403b6ed5a044efb67e54258c","modified":1574836737690},{"_id":"public/images/avatar.jpg","hash":"d9f6adea889194eca7f2f9a638860655f82ba0e7","modified":1574836737690},{"_id":"public/images/avatar1.jpg","hash":"964e4f70e2c7d276c7ac00efe61b183c48a8fe77","modified":1574836737691},{"_id":"public/images/MySQL_ACID.png","hash":"94178d660552484982d5efa1d8aa7396ed58ceb5","modified":1574836737691},{"_id":"public/images/reentrantlock1.png","hash":"b105a8c573fa112fb530c8326b23486a78a031de","modified":1574836737691},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1574836737691},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1574836737691},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1574836737691},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1574836737691},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1574836737691},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1574836737691},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1574836737691},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1574836737691},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1574836737691},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1574836737692},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1574836737692},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1574836737692},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1574836737692},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1574836737692},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1574836737692},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1574836737692},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1574836737692},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1574836737692},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1574836737692},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1574836737692},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1574836737692},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1574836737692},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1574836737692},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1574836737693},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1574836737693},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1574836737693},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1574836737693},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1574836737693},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1574836737693},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1574836737693},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1574836737693},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1574836737693},{"_id":"public/files/building-data-driven-internet-of-things-iot-applications.pdf","hash":"14adbe6c0509072022fae1bcc9781f11f963abe8","modified":1574836740268},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1574836740268},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1574836740269},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1574836740269},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1574836740276},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1574836740276},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1574836740276},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1574836740276},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1574836740277},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1574836740277},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1574836740277},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1574836740277},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1574836740277},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1574836740277},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1574836740277},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1574836740277},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1574836740277},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1574836740277},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1574836740277},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1574836740278},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1574836740278},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1574836740278},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1574836740278},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1574836740278},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1574836740278},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1574836740278},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1574836740279},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1574836740279},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1574836740279},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1574836740279},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1574836740279},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1574836740279},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1574836740279},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1574836740279},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1574836740279},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1574836740279},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1574836740280},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1574836740280},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1574836740280},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1574836740280},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1574836740280},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1574836740280},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1574836740281},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1574836740281},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1574836740281},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1574836740281},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1574836740281},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1574836740281},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1574836740281},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1574836740282},{"_id":"public/lib/fastclick/README.html","hash":"165347650131ee198acfef9296207c86d588fa48","modified":1574836740282},{"_id":"public/lib/jquery_lazyload/README.html","hash":"7d0454fd74b78adf9f1eac9f12d40b96861f5157","modified":1574836740282},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"dc2e9f369eb229e56530ef846e948c9cd0c8724d","modified":1574836740282},{"_id":"public/css/main.css","hash":"35474ddfab61583d6b6c0d55d6327ea00727b171","modified":1574836740282},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1574836740282},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1574836740282},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1574836740282},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1574836740282},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1574836740283},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1574836740283},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1574836740283},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1574836740283},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1574836740283},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1574836740283},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1574836740283},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1574836740283},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1574836740284},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1574836740284},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1574836740284},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1574836740284},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1574836740284},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1574836740284},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1574836740284},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1574836740284},{"_id":"public/files/docker-mta/ROI_Infographic_9-13-17.pdf","hash":"ef51c7ffdb652b465e71aad40b06adcd602a8240","modified":1574836740285},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1574836740285},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1574836740285},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1574836740293},{"_id":"public/files/docker-mta/SB_MTA_04.14.2017.pdf","hash":"711f8e42781692cd080f48edd964a201b9f424cb","modified":1574836740294},{"_id":"public/files/docker-mta/WP_Docker and the 3 ways devops.pdf","hash":"c15b2da8f92cb6afec7b5aea406b4f98f88bb73f","modified":1574836740331},{"_id":"public/files/docker-mta/Docker-for-Virtualization-Admin-eBook.pdf","hash":"94b26aad4e5d6bff6382d888efa0cee9ae543174","modified":1574836740339},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1574836740358},{"_id":"public/files/applying-chatbots-into-iot.pdf","hash":"ee9fd07a9e0a478b3f5f96ac2b76033234010a8e","modified":1574836740371},{"_id":"public/files/IoT-Suite.pdf","hash":"599a21375fc47fb9c55f2ebdfd5ca7c44541caad","modified":1574836740373},{"_id":"public/files/Java_1512024443940-Reviewed20180115.pdf","hash":"822b09e628f1023431d20c0dd49bba64e1d22e6b","modified":1574836740374}],"Category":[{"name":"LeetCode","_id":"ck3gx4n0t000dtkbsv51zmv2u"},{"name":"Computer Network","_id":"ck3gx4n43001qtkbscmabj74s"},{"name":"中文","_id":"ck3gx4n47001ztkbsiu133l51"},{"name":"Concurrency","_id":"ck3gx4n4b002btkbs59rfwhrx"},{"name":"Database","parent":"ck3gx4n47001ztkbsiu133l51","_id":"ck3gx4nac003ktkbstxvdgv56"},{"name":"Java","parent":"ck3gx4n47001ztkbsiu133l51","_id":"ck3gx4nad003ptkbs8md32928"}],"Data":[],"Page":[{"layout":"false","_content":"google-site-verification: googlecc99871950e7b1b0.html\n","source":"googlecc99871950e7b1b0.html","raw":"layout: false\n---\ngoogle-site-verification: googlecc99871950e7b1b0.html\n","date":"2019-09-21T12:25:00.699Z","updated":"2019-09-21T12:25:00.691Z","path":"googlecc99871950e7b1b0.html","title":"","comments":1,"_id":"ck3gx4myi0000tkbsybxy7su4","content":"google-site-verification: googlecc99871950e7b1b0.html\n","site":{"data":{}},"excerpt":"","more":"google-site-verification: googlecc99871950e7b1b0.html\n"},{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","source":"404/index.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","date":"2019-09-04T13:54:39.823Z","updated":"2018-04-05T08:56:58.000Z","path":"404/index.html","title":"","comments":1,"layout":"page","_id":"ck3gx4myp0002tkbszxpqm8bn","content":"<!DOCTYPE HTML>\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.9.0\">\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.9.0\">\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n"},{"title":"about","date":"2017-05-08T13:59:13.000Z","_content":"Contact me: racle0704@foxmail.com\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-05-08 21:59:13\n---\nContact me: racle0704@foxmail.com\n","updated":"2019-09-05T03:15:07.208Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck3gx4n10000ftkbs2km0r8pj","content":"<p>Contact me: racle0704@foxmail.com</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Contact me: racle0704@foxmail.com</p>\n"},{"title":"tags","date":"2017-05-08T14:11:46.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-05-08 22:11:46\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-04-05T08:56:58.000Z","path":"tags/index.html","layout":"page","_id":"ck3gx4n13000htkbs8p291ds1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2017-05-08T14:11:35.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-05-08 22:11:35\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-04-05T08:56:58.000Z","path":"categories/index.html","layout":"page","_id":"ck3gx4n16000jtkbs7lq17j60","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"version: '3.0'\n\nnetworks:\n  hono-net:\n    driver: overlay\n\nservices:\n\n  qdrouter:\n    image: registry.docker-cn.com/eclipsehono/dispatch-router:0.5-M5\n    networks:\n      - hono-net\n    command: /usr/sbin/qdrouterd -c /etc/hono/qdrouter/qdrouterd.json\n    ports:\n      - \"15671:5671\"\n      - \"15672:5672\"\n\n  hono:\n    image: registry.docker-cn.com/eclipsehono/hono-server:0.5-M5\n    networks:\n      - hono-net\n    ports:\n      - \"5671:5671\"\n    environment:\n      - HONO_DOWNSTREAM_HOST=qdrouter\n      - HONO_DOWNSTREAM_PORT=5673\n      - HONO_DOWNSTREAM_KEY_STORE_PATH=/etc/hono/certs/honoKeyStore.p12\n      - HONO_DOWNSTREAM_KEY_STORE_PASSWORD=honokeys\n      - HONO_DOWNSTREAM_TRUST_STORE_PATH=/etc/hono/certs/trusted-certs.pem\n      - HONO_SERVER_BIND_ADDRESS=0.0.0.0\n      - HONO_SERVER_KEY_STORE_PATH=/etc/hono/certs/honoKeyStore.p12\n      - HONO_SERVER_KEY_STORE_PASSWORD=honokeys\n      - HONO_SERVER_INSECURE_PORT_ENABLED=false\n      - HONO_SERVER_MAX_INSTANCES=1\n      - LOGGING_CONFIG=classpath:logback-spring.xml\n      - SPRING_PROFILES_ACTIVE=default,dev\n    volumes:\n      - /home/hono/registration\n\n  rest-adapter:\n    image: registry.docker-cn.com/eclipsehono/hono-adapter-rest-vertx:0.5-M5\n    networks:\n      - hono-net\n    ports:\n      - \"8080:8080\"\n    environment:\n      - HONO_CLIENT_NAME=Hono REST Adapter\n      - HONO_CLIENT_HOST=hono\n      - HONO_CLIENT_PORT=5671\n      - HONO_CLIENT_USERNAME=rest-adapter\n      - HONO_CLIENT_PASSWORD=secret\n      - HONO_CLIENT_TRUST_STORE_PATH=/etc/hono/certs/trusted-certs.pem\n      - HONO_HTTP_BIND_ADDRESS=0.0.0.0\n      - HONO_HTTP_MAX_INSTANCES=1\n      - SPRING_PROFILES_ACTIVE=dev\n\n  mqtt-adapter:\n    image: registry.docker-cn.com/eclipsehono/hono-adapter-mqtt-vertx:0.5-M5\n    networks:\n      - hono-net\n    ports:\n      - \"1883:1883\"\n    environment:\n      - HONO_CLIENT_NAME=Hono MQTT Adapter\n      - HONO_CLIENT_HOST=hono\n      - HONO_CLIENT_PORT=5671\n      - HONO_CLIENT_USERNAME=mqtt-adapter\n      - HONO_CLIENT_PASSWORD=secret\n      - HONO_CLIENT_TRUST_STORE_PATH=/etc/hono/certs/trusted-certs.pem\n      - HONO_MQTT_BIND_ADDRESS=0.0.0.0\n      - HONO_MQTT_MAX_INSTANCES=1\n      - SPRING_PROFILES_ACTIVE=dev\n","source":"artifacts/hono-docker-compose.yml","raw":"version: '3.0'\n\nnetworks:\n  hono-net:\n    driver: overlay\n\nservices:\n\n  qdrouter:\n    image: registry.docker-cn.com/eclipsehono/dispatch-router:0.5-M5\n    networks:\n      - hono-net\n    command: /usr/sbin/qdrouterd -c /etc/hono/qdrouter/qdrouterd.json\n    ports:\n      - \"15671:5671\"\n      - \"15672:5672\"\n\n  hono:\n    image: registry.docker-cn.com/eclipsehono/hono-server:0.5-M5\n    networks:\n      - hono-net\n    ports:\n      - \"5671:5671\"\n    environment:\n      - HONO_DOWNSTREAM_HOST=qdrouter\n      - HONO_DOWNSTREAM_PORT=5673\n      - HONO_DOWNSTREAM_KEY_STORE_PATH=/etc/hono/certs/honoKeyStore.p12\n      - HONO_DOWNSTREAM_KEY_STORE_PASSWORD=honokeys\n      - HONO_DOWNSTREAM_TRUST_STORE_PATH=/etc/hono/certs/trusted-certs.pem\n      - HONO_SERVER_BIND_ADDRESS=0.0.0.0\n      - HONO_SERVER_KEY_STORE_PATH=/etc/hono/certs/honoKeyStore.p12\n      - HONO_SERVER_KEY_STORE_PASSWORD=honokeys\n      - HONO_SERVER_INSECURE_PORT_ENABLED=false\n      - HONO_SERVER_MAX_INSTANCES=1\n      - LOGGING_CONFIG=classpath:logback-spring.xml\n      - SPRING_PROFILES_ACTIVE=default,dev\n    volumes:\n      - /home/hono/registration\n\n  rest-adapter:\n    image: registry.docker-cn.com/eclipsehono/hono-adapter-rest-vertx:0.5-M5\n    networks:\n      - hono-net\n    ports:\n      - \"8080:8080\"\n    environment:\n      - HONO_CLIENT_NAME=Hono REST Adapter\n      - HONO_CLIENT_HOST=hono\n      - HONO_CLIENT_PORT=5671\n      - HONO_CLIENT_USERNAME=rest-adapter\n      - HONO_CLIENT_PASSWORD=secret\n      - HONO_CLIENT_TRUST_STORE_PATH=/etc/hono/certs/trusted-certs.pem\n      - HONO_HTTP_BIND_ADDRESS=0.0.0.0\n      - HONO_HTTP_MAX_INSTANCES=1\n      - SPRING_PROFILES_ACTIVE=dev\n\n  mqtt-adapter:\n    image: registry.docker-cn.com/eclipsehono/hono-adapter-mqtt-vertx:0.5-M5\n    networks:\n      - hono-net\n    ports:\n      - \"1883:1883\"\n    environment:\n      - HONO_CLIENT_NAME=Hono MQTT Adapter\n      - HONO_CLIENT_HOST=hono\n      - HONO_CLIENT_PORT=5671\n      - HONO_CLIENT_USERNAME=mqtt-adapter\n      - HONO_CLIENT_PASSWORD=secret\n      - HONO_CLIENT_TRUST_STORE_PATH=/etc/hono/certs/trusted-certs.pem\n      - HONO_MQTT_BIND_ADDRESS=0.0.0.0\n      - HONO_MQTT_MAX_INSTANCES=1\n      - SPRING_PROFILES_ACTIVE=dev\n","date":"2019-09-04T13:54:39.847Z","updated":"2018-04-05T08:56:58.000Z","path":"artifacts/hono-docker-compose.json","layout":"false","title":"","comments":1,"_id":"ck3gx4n43001stkbslhwucv0w","content":"{\"version\":\"3.0\",\"networks\":{\"hono-net\":{\"driver\":\"overlay\"}},\"services\":{\"qdrouter\":{\"image\":\"registry.docker-cn.com/eclipsehono/dispatch-router:0.5-M5\",\"networks\":[\"hono-net\"],\"command\":\"/usr/sbin/qdrouterd -c /etc/hono/qdrouter/qdrouterd.json\",\"ports\":[\"15671:5671\",\"15672:5672\"]},\"hono\":{\"image\":\"registry.docker-cn.com/eclipsehono/hono-server:0.5-M5\",\"networks\":[\"hono-net\"],\"ports\":[\"5671:5671\"],\"environment\":[\"HONO_DOWNSTREAM_HOST=qdrouter\",\"HONO_DOWNSTREAM_PORT=5673\",\"HONO_DOWNSTREAM_KEY_STORE_PATH=/etc/hono/certs/honoKeyStore.p12\",\"HONO_DOWNSTREAM_KEY_STORE_PASSWORD=honokeys\",\"HONO_DOWNSTREAM_TRUST_STORE_PATH=/etc/hono/certs/trusted-certs.pem\",\"HONO_SERVER_BIND_ADDRESS=0.0.0.0\",\"HONO_SERVER_KEY_STORE_PATH=/etc/hono/certs/honoKeyStore.p12\",\"HONO_SERVER_KEY_STORE_PASSWORD=honokeys\",\"HONO_SERVER_INSECURE_PORT_ENABLED=false\",\"HONO_SERVER_MAX_INSTANCES=1\",\"LOGGING_CONFIG=classpath:logback-spring.xml\",\"SPRING_PROFILES_ACTIVE=default,dev\"],\"volumes\":[\"/home/hono/registration\"]},\"rest-adapter\":{\"image\":\"registry.docker-cn.com/eclipsehono/hono-adapter-rest-vertx:0.5-M5\",\"networks\":[\"hono-net\"],\"ports\":[\"8080:8080\"],\"environment\":[\"HONO_CLIENT_NAME=Hono REST Adapter\",\"HONO_CLIENT_HOST=hono\",\"HONO_CLIENT_PORT=5671\",\"HONO_CLIENT_USERNAME=rest-adapter\",\"HONO_CLIENT_PASSWORD=secret\",\"HONO_CLIENT_TRUST_STORE_PATH=/etc/hono/certs/trusted-certs.pem\",\"HONO_HTTP_BIND_ADDRESS=0.0.0.0\",\"HONO_HTTP_MAX_INSTANCES=1\",\"SPRING_PROFILES_ACTIVE=dev\"]},\"mqtt-adapter\":{\"image\":\"registry.docker-cn.com/eclipsehono/hono-adapter-mqtt-vertx:0.5-M5\",\"networks\":[\"hono-net\"],\"ports\":[\"1883:1883\"],\"environment\":[\"HONO_CLIENT_NAME=Hono MQTT Adapter\",\"HONO_CLIENT_HOST=hono\",\"HONO_CLIENT_PORT=5671\",\"HONO_CLIENT_USERNAME=mqtt-adapter\",\"HONO_CLIENT_PASSWORD=secret\",\"HONO_CLIENT_TRUST_STORE_PATH=/etc/hono/certs/trusted-certs.pem\",\"HONO_MQTT_BIND_ADDRESS=0.0.0.0\",\"HONO_MQTT_MAX_INSTANCES=1\",\"SPRING_PROFILES_ACTIVE=dev\"]}}}","site":{"data":{}},"excerpt":"","more":"{\"version\":\"3.0\",\"networks\":{\"hono-net\":{\"driver\":\"overlay\"}},\"services\":{\"qdrouter\":{\"image\":\"registry.docker-cn.com/eclipsehono/dispatch-router:0.5-M5\",\"networks\":[\"hono-net\"],\"command\":\"/usr/sbin/qdrouterd -c /etc/hono/qdrouter/qdrouterd.json\",\"ports\":[\"15671:5671\",\"15672:5672\"]},\"hono\":{\"image\":\"registry.docker-cn.com/eclipsehono/hono-server:0.5-M5\",\"networks\":[\"hono-net\"],\"ports\":[\"5671:5671\"],\"environment\":[\"HONO_DOWNSTREAM_HOST=qdrouter\",\"HONO_DOWNSTREAM_PORT=5673\",\"HONO_DOWNSTREAM_KEY_STORE_PATH=/etc/hono/certs/honoKeyStore.p12\",\"HONO_DOWNSTREAM_KEY_STORE_PASSWORD=honokeys\",\"HONO_DOWNSTREAM_TRUST_STORE_PATH=/etc/hono/certs/trusted-certs.pem\",\"HONO_SERVER_BIND_ADDRESS=0.0.0.0\",\"HONO_SERVER_KEY_STORE_PATH=/etc/hono/certs/honoKeyStore.p12\",\"HONO_SERVER_KEY_STORE_PASSWORD=honokeys\",\"HONO_SERVER_INSECURE_PORT_ENABLED=false\",\"HONO_SERVER_MAX_INSTANCES=1\",\"LOGGING_CONFIG=classpath:logback-spring.xml\",\"SPRING_PROFILES_ACTIVE=default,dev\"],\"volumes\":[\"/home/hono/registration\"]},\"rest-adapter\":{\"image\":\"registry.docker-cn.com/eclipsehono/hono-adapter-rest-vertx:0.5-M5\",\"networks\":[\"hono-net\"],\"ports\":[\"8080:8080\"],\"environment\":[\"HONO_CLIENT_NAME=Hono REST Adapter\",\"HONO_CLIENT_HOST=hono\",\"HONO_CLIENT_PORT=5671\",\"HONO_CLIENT_USERNAME=rest-adapter\",\"HONO_CLIENT_PASSWORD=secret\",\"HONO_CLIENT_TRUST_STORE_PATH=/etc/hono/certs/trusted-certs.pem\",\"HONO_HTTP_BIND_ADDRESS=0.0.0.0\",\"HONO_HTTP_MAX_INSTANCES=1\",\"SPRING_PROFILES_ACTIVE=dev\"]},\"mqtt-adapter\":{\"image\":\"registry.docker-cn.com/eclipsehono/hono-adapter-mqtt-vertx:0.5-M5\",\"networks\":[\"hono-net\"],\"ports\":[\"1883:1883\"],\"environment\":[\"HONO_CLIENT_NAME=Hono MQTT Adapter\",\"HONO_CLIENT_HOST=hono\",\"HONO_CLIENT_PORT=5671\",\"HONO_CLIENT_USERNAME=mqtt-adapter\",\"HONO_CLIENT_PASSWORD=secret\",\"HONO_CLIENT_TRUST_STORE_PATH=/etc/hono/certs/trusted-certs.pem\",\"HONO_MQTT_BIND_ADDRESS=0.0.0.0\",\"HONO_MQTT_MAX_INSTANCES=1\",\"SPRING_PROFILES_ACTIVE=dev\"]}}}"}],"Post":[{"title":"121 Best Time to Buy and Sell Stock","date":"2019-11-08T16:10:58.000Z","_content":"# Intuition\nThe broute-force solution is listing all the possible combinations and finding the maximum one:\n\n$$\nmax(a[j] - a[i]) \\quad j>=i\n$$\n\nTime complexity for this algorithm is $O(n^2)$. We have linear solution actually, which is not that intuitive. Before talking about the linear solution, let's see the `Largest Sum Contiguous Subarray` problem.\n\n###### Largest Sum Contiguous Subarray\n\n> Write an efficient program to find the sum of contiguous subarray within a one-dimensional array of numbers which has the largest sum.\n\n![image](https://media.geeksforgeeks.org/wp-content/cdn-uploads/kadane-Algorithm.png)\n\nThe intuitive method for this question is dynamic programming too, but we have more efficient algorithm: Kadane's Algorithm.\n\nKadane's Algorithm keep track of positive sum contiguous subarray, and keep recording a maximum sum among them. For the above array, we have:\n```\n0:\nmax_segment: -2\nmax_so_far: -2\n\n1:\nmax_segment: -3\nmax_so_far: -2\n\n2:\nmax_segment: 4\nmax_so_far: 4\n\n3:\nmax_segment: 3\nmax_so_far: 4\n\n4:\nmax_segment: 1\nmax_so_far: 4\n\n5:\nmax_segment: 2\nmax_so_far: 4\n\n6:\nmax_segment: 7\nmax_so_far: 7\n\n7:\nmax_segment: 4\nmax_so_far: 7\n```\nIf the addition of previous segment and current element is positive, we compare the sum with the `max_so_far` and  update previous segment to the addition.\n\n# Algorithm\nOur goal is to find $max(a[j]-a[i])$, let's rewrite this formula to\n\n$$max(a[j]-a[j-1] + a[j-1]-a[j-2] +...+  a[i+1]-a[i])$$\n\nThe original question becomes a `Largest Sum Contiguous Subarray` question! We can get the largest sum within a linear time.\n\n# Code\n```\nclass Solution {\n    public int maxProfit(int[] prices) {\n        int max_so_far = 0;\n        int max_temp = 0;\n        for(int i = 1; i < prices.length; i++){\n            int price = prices[i] - prices[i-1];\n            if(max_temp + price < 0){\n                max_temp = 0;\n            }\n            else{\n                max_temp += price;\n                max_so_far = Math.max(max_so_far, max_temp);\n            }\n        }\n        return max_so_far;\n    }\n}\n```\n\n# Complexity\n**Time Complexity:** $O(n)$\n**Space Complexity:** $O(1)$\n","source":"_posts/121-Best-Time-to-Buy-and-Sell-Stock.md","raw":"---\ntitle: 121 Best Time to Buy and Sell Stock\ndate: 2019-11-09 00:10:58\ncategories:\n- LeetCode\ntags:\n- Kanade's Algorithm\n- Subarray\n---\n# Intuition\nThe broute-force solution is listing all the possible combinations and finding the maximum one:\n\n$$\nmax(a[j] - a[i]) \\quad j>=i\n$$\n\nTime complexity for this algorithm is $O(n^2)$. We have linear solution actually, which is not that intuitive. Before talking about the linear solution, let's see the `Largest Sum Contiguous Subarray` problem.\n\n###### Largest Sum Contiguous Subarray\n\n> Write an efficient program to find the sum of contiguous subarray within a one-dimensional array of numbers which has the largest sum.\n\n![image](https://media.geeksforgeeks.org/wp-content/cdn-uploads/kadane-Algorithm.png)\n\nThe intuitive method for this question is dynamic programming too, but we have more efficient algorithm: Kadane's Algorithm.\n\nKadane's Algorithm keep track of positive sum contiguous subarray, and keep recording a maximum sum among them. For the above array, we have:\n```\n0:\nmax_segment: -2\nmax_so_far: -2\n\n1:\nmax_segment: -3\nmax_so_far: -2\n\n2:\nmax_segment: 4\nmax_so_far: 4\n\n3:\nmax_segment: 3\nmax_so_far: 4\n\n4:\nmax_segment: 1\nmax_so_far: 4\n\n5:\nmax_segment: 2\nmax_so_far: 4\n\n6:\nmax_segment: 7\nmax_so_far: 7\n\n7:\nmax_segment: 4\nmax_so_far: 7\n```\nIf the addition of previous segment and current element is positive, we compare the sum with the `max_so_far` and  update previous segment to the addition.\n\n# Algorithm\nOur goal is to find $max(a[j]-a[i])$, let's rewrite this formula to\n\n$$max(a[j]-a[j-1] + a[j-1]-a[j-2] +...+  a[i+1]-a[i])$$\n\nThe original question becomes a `Largest Sum Contiguous Subarray` question! We can get the largest sum within a linear time.\n\n# Code\n```\nclass Solution {\n    public int maxProfit(int[] prices) {\n        int max_so_far = 0;\n        int max_temp = 0;\n        for(int i = 1; i < prices.length; i++){\n            int price = prices[i] - prices[i-1];\n            if(max_temp + price < 0){\n                max_temp = 0;\n            }\n            else{\n                max_temp += price;\n                max_so_far = Math.max(max_so_far, max_temp);\n            }\n        }\n        return max_so_far;\n    }\n}\n```\n\n# Complexity\n**Time Complexity:** $O(n)$\n**Space Complexity:** $O(1)$\n","slug":"121-Best-Time-to-Buy-and-Sell-Stock","published":1,"updated":"2019-11-23T13:35:06.480Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3gx4myk0001tkbso3l1x1xl","content":"<h1 id=\"Intuition\"><a href=\"#Intuition\" class=\"headerlink\" title=\"Intuition\"></a>Intuition</h1><p>The broute-force solution is listing all the possible combinations and finding the maximum one:</p>\n<script type=\"math/tex; mode=display\">\nmax(a[j] - a[i]) \\quad j>=i</script><p>Time complexity for this algorithm is $O(n^2)$. We have linear solution actually, which is not that intuitive. Before talking about the linear solution, let’s see the <code>Largest Sum Contiguous Subarray</code> problem.</p>\n<h6 id=\"Largest-Sum-Contiguous-Subarray\"><a href=\"#Largest-Sum-Contiguous-Subarray\" class=\"headerlink\" title=\"Largest Sum Contiguous Subarray\"></a>Largest Sum Contiguous Subarray</h6><blockquote>\n<p>Write an efficient program to find the sum of contiguous subarray within a one-dimensional array of numbers which has the largest sum.</p>\n</blockquote>\n<p><img src=\"https://media.geeksforgeeks.org/wp-content/cdn-uploads/kadane-Algorithm.png\" alt=\"image\"></p>\n<p>The intuitive method for this question is dynamic programming too, but we have more efficient algorithm: Kadane’s Algorithm.</p>\n<p>Kadane’s Algorithm keep track of positive sum contiguous subarray, and keep recording a maximum sum among them. For the above array, we have:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0:</span><br><span class=\"line\">max_segment: -2</span><br><span class=\"line\">max_so_far: -2</span><br><span class=\"line\"></span><br><span class=\"line\">1:</span><br><span class=\"line\">max_segment: -3</span><br><span class=\"line\">max_so_far: -2</span><br><span class=\"line\"></span><br><span class=\"line\">2:</span><br><span class=\"line\">max_segment: 4</span><br><span class=\"line\">max_so_far: 4</span><br><span class=\"line\"></span><br><span class=\"line\">3:</span><br><span class=\"line\">max_segment: 3</span><br><span class=\"line\">max_so_far: 4</span><br><span class=\"line\"></span><br><span class=\"line\">4:</span><br><span class=\"line\">max_segment: 1</span><br><span class=\"line\">max_so_far: 4</span><br><span class=\"line\"></span><br><span class=\"line\">5:</span><br><span class=\"line\">max_segment: 2</span><br><span class=\"line\">max_so_far: 4</span><br><span class=\"line\"></span><br><span class=\"line\">6:</span><br><span class=\"line\">max_segment: 7</span><br><span class=\"line\">max_so_far: 7</span><br><span class=\"line\"></span><br><span class=\"line\">7:</span><br><span class=\"line\">max_segment: 4</span><br><span class=\"line\">max_so_far: 7</span><br></pre></td></tr></table></figure></p>\n<p>If the addition of previous segment and current element is positive, we compare the sum with the <code>max_so_far</code> and  update previous segment to the addition.</p>\n<h1 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h1><p>Our goal is to find $max(a[j]-a[i])$, let’s rewrite this formula to</p>\n<script type=\"math/tex; mode=display\">max(a[j]-a[j-1] + a[j-1]-a[j-2] +...+  a[i+1]-a[i])</script><p>The original question becomes a <code>Largest Sum Contiguous Subarray</code> question! We can get the largest sum within a linear time.</p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public int maxProfit(int[] prices) &#123;</span><br><span class=\"line\">        int max_so_far = 0;</span><br><span class=\"line\">        int max_temp = 0;</span><br><span class=\"line\">        for(int i = 1; i &lt; prices.length; i++)&#123;</span><br><span class=\"line\">            int price = prices[i] - prices[i-1];</span><br><span class=\"line\">            if(max_temp + price &lt; 0)&#123;</span><br><span class=\"line\">                max_temp = 0;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else&#123;</span><br><span class=\"line\">                max_temp += price;</span><br><span class=\"line\">                max_so_far = Math.max(max_so_far, max_temp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return max_so_far;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> $O(n)$<br><strong>Space Complexity:</strong> $O(1)$</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Intuition\"><a href=\"#Intuition\" class=\"headerlink\" title=\"Intuition\"></a>Intuition</h1><p>The broute-force solution is listing all the possible combinations and finding the maximum one:</p>\n<script type=\"math/tex; mode=display\">\nmax(a[j] - a[i]) \\quad j>=i</script><p>Time complexity for this algorithm is $O(n^2)$. We have linear solution actually, which is not that intuitive. Before talking about the linear solution, let’s see the <code>Largest Sum Contiguous Subarray</code> problem.</p>\n<h6 id=\"Largest-Sum-Contiguous-Subarray\"><a href=\"#Largest-Sum-Contiguous-Subarray\" class=\"headerlink\" title=\"Largest Sum Contiguous Subarray\"></a>Largest Sum Contiguous Subarray</h6><blockquote>\n<p>Write an efficient program to find the sum of contiguous subarray within a one-dimensional array of numbers which has the largest sum.</p>\n</blockquote>\n<p><img src=\"https://media.geeksforgeeks.org/wp-content/cdn-uploads/kadane-Algorithm.png\" alt=\"image\"></p>\n<p>The intuitive method for this question is dynamic programming too, but we have more efficient algorithm: Kadane’s Algorithm.</p>\n<p>Kadane’s Algorithm keep track of positive sum contiguous subarray, and keep recording a maximum sum among them. For the above array, we have:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0:</span><br><span class=\"line\">max_segment: -2</span><br><span class=\"line\">max_so_far: -2</span><br><span class=\"line\"></span><br><span class=\"line\">1:</span><br><span class=\"line\">max_segment: -3</span><br><span class=\"line\">max_so_far: -2</span><br><span class=\"line\"></span><br><span class=\"line\">2:</span><br><span class=\"line\">max_segment: 4</span><br><span class=\"line\">max_so_far: 4</span><br><span class=\"line\"></span><br><span class=\"line\">3:</span><br><span class=\"line\">max_segment: 3</span><br><span class=\"line\">max_so_far: 4</span><br><span class=\"line\"></span><br><span class=\"line\">4:</span><br><span class=\"line\">max_segment: 1</span><br><span class=\"line\">max_so_far: 4</span><br><span class=\"line\"></span><br><span class=\"line\">5:</span><br><span class=\"line\">max_segment: 2</span><br><span class=\"line\">max_so_far: 4</span><br><span class=\"line\"></span><br><span class=\"line\">6:</span><br><span class=\"line\">max_segment: 7</span><br><span class=\"line\">max_so_far: 7</span><br><span class=\"line\"></span><br><span class=\"line\">7:</span><br><span class=\"line\">max_segment: 4</span><br><span class=\"line\">max_so_far: 7</span><br></pre></td></tr></table></figure></p>\n<p>If the addition of previous segment and current element is positive, we compare the sum with the <code>max_so_far</code> and  update previous segment to the addition.</p>\n<h1 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h1><p>Our goal is to find $max(a[j]-a[i])$, let’s rewrite this formula to</p>\n<script type=\"math/tex; mode=display\">max(a[j]-a[j-1] + a[j-1]-a[j-2] +...+  a[i+1]-a[i])</script><p>The original question becomes a <code>Largest Sum Contiguous Subarray</code> question! We can get the largest sum within a linear time.</p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public int maxProfit(int[] prices) &#123;</span><br><span class=\"line\">        int max_so_far = 0;</span><br><span class=\"line\">        int max_temp = 0;</span><br><span class=\"line\">        for(int i = 1; i &lt; prices.length; i++)&#123;</span><br><span class=\"line\">            int price = prices[i] - prices[i-1];</span><br><span class=\"line\">            if(max_temp + price &lt; 0)&#123;</span><br><span class=\"line\">                max_temp = 0;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else&#123;</span><br><span class=\"line\">                max_temp += price;</span><br><span class=\"line\">                max_so_far = Math.max(max_so_far, max_temp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return max_so_far;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> $O(n)$<br><strong>Space Complexity:</strong> $O(1)$</p>\n"},{"title":"143 Reorder List","date":"2019-11-07T16:34:08.000Z","_content":"# Intuition\nFrom the description of this question, we need three steps to achieve the `reorder` operation for a singly linked list:\n1. seperate the list into two parts\n2. reverse the right part\n3. merge the left part and reversed right part one by one\n\n# Algorithm\n###### 1. seperate the list into two parts\nA stright and simple method is counting the node number and find the middle one. This will cost ***O(n)*** time.\n###### 2. reverse the right part\nThere are two methods for reversing the list, *recursion* and *pointers*. We are all familiar with the prons and cons of recursion. It's easy to be implemented and understood, but the size of the list are limited by the size of stack frame. The time complexity for reversing a list is still ***O(n)***.\n> To be honest, I can't resist the temptation of recursion, it's brief and concise. Sometimes recursion is like a magic, we suppose it works for some case and then deduce the relationship between the past and the future, finally we solved the whole problem, it's always a little unrealistic. We can call this method mathematical induction. Maybe when quantum computer comes out, this method will not be limited by the problem size and can be first choice of different solutions.\n\n###### 3. merge the left part and reversed right part one by one\nWe just combine two list one by one, for example `1->2->3` and `5->4` will be `1-> 5 ->2-> 4 ->3` after merge. Time complexity is still ***O(n)***.\n\n# Code\n```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    private ListNode ansHead; \n    public void reorderList(ListNode head) {\n        int length = 0;\n        ListNode temp = head, newHead = head, pre = head;\n        while(temp!=null){\n            length++;\n            temp= temp.next;\n        }\n        if(length < 3)return ;\n        int mid = (length >> 1)  + 1;\n        for(int i = 1; i <= mid; i++){\n            pre = newHead;\n            newHead = newHead.next;            \n        }\n        pre.next = null;\n        reverse(newHead);\n        merge(head, ansHead);\n    }\n    \n    public ListNode reverse(ListNode head){\n        if(head.next == null)\n        {\n            this.ansHead = head;\n            return head;\n        }\n        ListNode next = inverse(head.next);\n        next.next = head;\n        head.next = null;\n        return head;\n    }\n    /*\n    //This function reverse a list by pointers, it cost a constant space\n     public ListNode reverse(ListNode head){\n        ListNode pre = null, cur = head, next = head;\n        while(cur.next != null){\n            next = cur.next;\n            cur.next = pre;\n            pre = cur;\n            cur = next;\n        }\n        cur.next = pre;\n        ansHead = cur;\n        return cur;\n    }\n    */\n    public void merge(ListNode head1, ListNode head2){\n        while(head2 != null){\n            ListNode next= head2.next;\n            head2.next = head1.next;\n            head1.next = head2;\n            head1 = head2.next;\n            head2 = next;\n        }\n    }\n\n}\n\n```\n\n# Comlexity\n***Time Complexity:*** O(n), see analysis above.\n\n***Space Complexity:*** We cost a constant space O(1) if using *pointer* method to reverse a list, other wise it's O(n)\n\n","source":"_posts/143-Reorder-List.md","raw":"---\ntitle: 143 Reorder List\ndate: 2019-11-08 00:34:08\ncategories:\n- LeetCode\ntags:\n- list\n- recursion\n- pointer\n---\n# Intuition\nFrom the description of this question, we need three steps to achieve the `reorder` operation for a singly linked list:\n1. seperate the list into two parts\n2. reverse the right part\n3. merge the left part and reversed right part one by one\n\n# Algorithm\n###### 1. seperate the list into two parts\nA stright and simple method is counting the node number and find the middle one. This will cost ***O(n)*** time.\n###### 2. reverse the right part\nThere are two methods for reversing the list, *recursion* and *pointers*. We are all familiar with the prons and cons of recursion. It's easy to be implemented and understood, but the size of the list are limited by the size of stack frame. The time complexity for reversing a list is still ***O(n)***.\n> To be honest, I can't resist the temptation of recursion, it's brief and concise. Sometimes recursion is like a magic, we suppose it works for some case and then deduce the relationship between the past and the future, finally we solved the whole problem, it's always a little unrealistic. We can call this method mathematical induction. Maybe when quantum computer comes out, this method will not be limited by the problem size and can be first choice of different solutions.\n\n###### 3. merge the left part and reversed right part one by one\nWe just combine two list one by one, for example `1->2->3` and `5->4` will be `1-> 5 ->2-> 4 ->3` after merge. Time complexity is still ***O(n)***.\n\n# Code\n```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    private ListNode ansHead; \n    public void reorderList(ListNode head) {\n        int length = 0;\n        ListNode temp = head, newHead = head, pre = head;\n        while(temp!=null){\n            length++;\n            temp= temp.next;\n        }\n        if(length < 3)return ;\n        int mid = (length >> 1)  + 1;\n        for(int i = 1; i <= mid; i++){\n            pre = newHead;\n            newHead = newHead.next;            \n        }\n        pre.next = null;\n        reverse(newHead);\n        merge(head, ansHead);\n    }\n    \n    public ListNode reverse(ListNode head){\n        if(head.next == null)\n        {\n            this.ansHead = head;\n            return head;\n        }\n        ListNode next = inverse(head.next);\n        next.next = head;\n        head.next = null;\n        return head;\n    }\n    /*\n    //This function reverse a list by pointers, it cost a constant space\n     public ListNode reverse(ListNode head){\n        ListNode pre = null, cur = head, next = head;\n        while(cur.next != null){\n            next = cur.next;\n            cur.next = pre;\n            pre = cur;\n            cur = next;\n        }\n        cur.next = pre;\n        ansHead = cur;\n        return cur;\n    }\n    */\n    public void merge(ListNode head1, ListNode head2){\n        while(head2 != null){\n            ListNode next= head2.next;\n            head2.next = head1.next;\n            head1.next = head2;\n            head1 = head2.next;\n            head2 = next;\n        }\n    }\n\n}\n\n```\n\n# Comlexity\n***Time Complexity:*** O(n), see analysis above.\n\n***Space Complexity:*** We cost a constant space O(1) if using *pointer* method to reverse a list, other wise it's O(n)\n\n","slug":"143-Reorder-List","published":1,"updated":"2019-11-07T16:37:33.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3gx4myr0003tkbs5vpioxg4","content":"<h1 id=\"Intuition\"><a href=\"#Intuition\" class=\"headerlink\" title=\"Intuition\"></a>Intuition</h1><p>From the description of this question, we need three steps to achieve the <code>reorder</code> operation for a singly linked list:</p>\n<ol>\n<li>seperate the list into two parts</li>\n<li>reverse the right part</li>\n<li>merge the left part and reversed right part one by one</li>\n</ol>\n<h1 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h1><h6 id=\"1-seperate-the-list-into-two-parts\"><a href=\"#1-seperate-the-list-into-two-parts\" class=\"headerlink\" title=\"1. seperate the list into two parts\"></a>1. seperate the list into two parts</h6><p>A stright and simple method is counting the node number and find the middle one. This will cost <strong><em>O(n)</em></strong> time.</p>\n<h6 id=\"2-reverse-the-right-part\"><a href=\"#2-reverse-the-right-part\" class=\"headerlink\" title=\"2. reverse the right part\"></a>2. reverse the right part</h6><p>There are two methods for reversing the list, <em>recursion</em> and <em>pointers</em>. We are all familiar with the prons and cons of recursion. It’s easy to be implemented and understood, but the size of the list are limited by the size of stack frame. The time complexity for reversing a list is still <strong><em>O(n)</em></strong>.</p>\n<blockquote>\n<p>To be honest, I can’t resist the temptation of recursion, it’s brief and concise. Sometimes recursion is like a magic, we suppose it works for some case and then deduce the relationship between the past and the future, finally we solved the whole problem, it’s always a little unrealistic. We can call this method mathematical induction. Maybe when quantum computer comes out, this method will not be limited by the problem size and can be first choice of different solutions.</p>\n</blockquote>\n<h6 id=\"3-merge-the-left-part-and-reversed-right-part-one-by-one\"><a href=\"#3-merge-the-left-part-and-reversed-right-part-one-by-one\" class=\"headerlink\" title=\"3. merge the left part and reversed right part one by one\"></a>3. merge the left part and reversed right part one by one</h6><p>We just combine two list one by one, for example <code>1-&gt;2-&gt;3</code> and <code>5-&gt;4</code> will be <code>1-&gt; 5 -&gt;2-&gt; 4 -&gt;3</code> after merge. Time complexity is still <strong><em>O(n)</em></strong>.</p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    private ListNode ansHead; </span><br><span class=\"line\">    public void reorderList(ListNode head) &#123;</span><br><span class=\"line\">        int length = 0;</span><br><span class=\"line\">        ListNode temp = head, newHead = head, pre = head;</span><br><span class=\"line\">        while(temp!=null)&#123;</span><br><span class=\"line\">            length++;</span><br><span class=\"line\">            temp= temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(length &lt; 3)return ;</span><br><span class=\"line\">        int mid = (length &gt;&gt; 1)  + 1;</span><br><span class=\"line\">        for(int i = 1; i &lt;= mid; i++)&#123;</span><br><span class=\"line\">            pre = newHead;</span><br><span class=\"line\">            newHead = newHead.next;            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pre.next = null;</span><br><span class=\"line\">        reverse(newHead);</span><br><span class=\"line\">        merge(head, ansHead);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public ListNode reverse(ListNode head)&#123;</span><br><span class=\"line\">        if(head.next == null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            this.ansHead = head;</span><br><span class=\"line\">            return head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode next = inverse(head.next);</span><br><span class=\"line\">        next.next = head;</span><br><span class=\"line\">        head.next = null;</span><br><span class=\"line\">        return head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /*</span><br><span class=\"line\">    //This function reverse a list by pointers, it cost a constant space</span><br><span class=\"line\">     public ListNode reverse(ListNode head)&#123;</span><br><span class=\"line\">        ListNode pre = null, cur = head, next = head;</span><br><span class=\"line\">        while(cur.next != null)&#123;</span><br><span class=\"line\">            next = cur.next;</span><br><span class=\"line\">            cur.next = pre;</span><br><span class=\"line\">            pre = cur;</span><br><span class=\"line\">            cur = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cur.next = pre;</span><br><span class=\"line\">        ansHead = cur;</span><br><span class=\"line\">        return cur;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    */</span><br><span class=\"line\">    public void merge(ListNode head1, ListNode head2)&#123;</span><br><span class=\"line\">        while(head2 != null)&#123;</span><br><span class=\"line\">            ListNode next= head2.next;</span><br><span class=\"line\">            head2.next = head1.next;</span><br><span class=\"line\">            head1.next = head2;</span><br><span class=\"line\">            head1 = head2.next;</span><br><span class=\"line\">            head2 = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Comlexity\"><a href=\"#Comlexity\" class=\"headerlink\" title=\"Comlexity\"></a>Comlexity</h1><p><strong><em>Time Complexity:</em></strong> O(n), see analysis above.</p>\n<p><strong><em>Space Complexity:</em></strong> We cost a constant space O(1) if using <em>pointer</em> method to reverse a list, other wise it’s O(n)</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Intuition\"><a href=\"#Intuition\" class=\"headerlink\" title=\"Intuition\"></a>Intuition</h1><p>From the description of this question, we need three steps to achieve the <code>reorder</code> operation for a singly linked list:</p>\n<ol>\n<li>seperate the list into two parts</li>\n<li>reverse the right part</li>\n<li>merge the left part and reversed right part one by one</li>\n</ol>\n<h1 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h1><h6 id=\"1-seperate-the-list-into-two-parts\"><a href=\"#1-seperate-the-list-into-two-parts\" class=\"headerlink\" title=\"1. seperate the list into two parts\"></a>1. seperate the list into two parts</h6><p>A stright and simple method is counting the node number and find the middle one. This will cost <strong><em>O(n)</em></strong> time.</p>\n<h6 id=\"2-reverse-the-right-part\"><a href=\"#2-reverse-the-right-part\" class=\"headerlink\" title=\"2. reverse the right part\"></a>2. reverse the right part</h6><p>There are two methods for reversing the list, <em>recursion</em> and <em>pointers</em>. We are all familiar with the prons and cons of recursion. It’s easy to be implemented and understood, but the size of the list are limited by the size of stack frame. The time complexity for reversing a list is still <strong><em>O(n)</em></strong>.</p>\n<blockquote>\n<p>To be honest, I can’t resist the temptation of recursion, it’s brief and concise. Sometimes recursion is like a magic, we suppose it works for some case and then deduce the relationship between the past and the future, finally we solved the whole problem, it’s always a little unrealistic. We can call this method mathematical induction. Maybe when quantum computer comes out, this method will not be limited by the problem size and can be first choice of different solutions.</p>\n</blockquote>\n<h6 id=\"3-merge-the-left-part-and-reversed-right-part-one-by-one\"><a href=\"#3-merge-the-left-part-and-reversed-right-part-one-by-one\" class=\"headerlink\" title=\"3. merge the left part and reversed right part one by one\"></a>3. merge the left part and reversed right part one by one</h6><p>We just combine two list one by one, for example <code>1-&gt;2-&gt;3</code> and <code>5-&gt;4</code> will be <code>1-&gt; 5 -&gt;2-&gt; 4 -&gt;3</code> after merge. Time complexity is still <strong><em>O(n)</em></strong>.</p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    private ListNode ansHead; </span><br><span class=\"line\">    public void reorderList(ListNode head) &#123;</span><br><span class=\"line\">        int length = 0;</span><br><span class=\"line\">        ListNode temp = head, newHead = head, pre = head;</span><br><span class=\"line\">        while(temp!=null)&#123;</span><br><span class=\"line\">            length++;</span><br><span class=\"line\">            temp= temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(length &lt; 3)return ;</span><br><span class=\"line\">        int mid = (length &gt;&gt; 1)  + 1;</span><br><span class=\"line\">        for(int i = 1; i &lt;= mid; i++)&#123;</span><br><span class=\"line\">            pre = newHead;</span><br><span class=\"line\">            newHead = newHead.next;            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pre.next = null;</span><br><span class=\"line\">        reverse(newHead);</span><br><span class=\"line\">        merge(head, ansHead);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public ListNode reverse(ListNode head)&#123;</span><br><span class=\"line\">        if(head.next == null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            this.ansHead = head;</span><br><span class=\"line\">            return head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode next = inverse(head.next);</span><br><span class=\"line\">        next.next = head;</span><br><span class=\"line\">        head.next = null;</span><br><span class=\"line\">        return head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /*</span><br><span class=\"line\">    //This function reverse a list by pointers, it cost a constant space</span><br><span class=\"line\">     public ListNode reverse(ListNode head)&#123;</span><br><span class=\"line\">        ListNode pre = null, cur = head, next = head;</span><br><span class=\"line\">        while(cur.next != null)&#123;</span><br><span class=\"line\">            next = cur.next;</span><br><span class=\"line\">            cur.next = pre;</span><br><span class=\"line\">            pre = cur;</span><br><span class=\"line\">            cur = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cur.next = pre;</span><br><span class=\"line\">        ansHead = cur;</span><br><span class=\"line\">        return cur;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    */</span><br><span class=\"line\">    public void merge(ListNode head1, ListNode head2)&#123;</span><br><span class=\"line\">        while(head2 != null)&#123;</span><br><span class=\"line\">            ListNode next= head2.next;</span><br><span class=\"line\">            head2.next = head1.next;</span><br><span class=\"line\">            head1.next = head2;</span><br><span class=\"line\">            head1 = head2.next;</span><br><span class=\"line\">            head2 = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Comlexity\"><a href=\"#Comlexity\" class=\"headerlink\" title=\"Comlexity\"></a>Comlexity</h1><p><strong><em>Time Complexity:</em></strong> O(n), see analysis above.</p>\n<p><strong><em>Space Complexity:</em></strong> We cost a constant space O(1) if using <em>pointer</em> method to reverse a list, other wise it’s O(n)</p>\n"},{"title":"147 Insertion Sort List","date":"2019-11-10T12:50:18.000Z","_content":"# Intuition & Algorithm\nThe diagram and illustration in the question have given us a clear description of insertion sort algorithm.\n1. Separate the list into two parts: `sorted` and `sorting`\n2. Insert the head of `sorting` list into the sorted list\n\nWe should consider three cases during insertion(v is the node to be inserted):\n- `v < sorted.head.val` we should use this node as the new head of sorted list\n- `cur.val < v < cur.next.val` `cur` is a node in the sorted list, in this case we should insert the new node between `cur` and `cur.next`\n- `cur.next == null` this means `v` is large than any number in the list, so we append it to the tail.\n\n\n# Code\n```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode insertionSortList(ListNode head) {\n        if(head == null)return head;\n        ListNode sorted=head,sorting = head.next, next;\n        head.next = null;\n        while(sorting != null){\n            next = sorting.next;\n            \n            ListNode cur = sorted;\n            if(sorting.val < cur.val){\n                sorting.next = sorted;\n                sorted = sorting;\n            }\n            else{\n                while(cur.next != null){\n                    if(sorting.val >= cur.val && sorting.val <= cur.next.val)\n                    {\n                        sorting.next = cur.next;\n                        cur.next = sorting;\n                        break;\n                    }\n                    cur = cur.next;\n                }\n                if(cur.next == null){\n                    sorting.next = null;\n                    cur.next = sorting;\n                }\n            }\n            sorting = next;\n        }\n        return sorted;\n    }\n}\n```\n\n# Complexity\n**Time Complexity:** $O(n)$\n\n**Spatial Complexity:** $O(1)$\n","source":"_posts/147-Insertion-Sort-List.md","raw":"---\ntitle: 147 Insertion Sort List\ndate: 2019-11-10 20:50:18\ncategories:\n- LeetCode\ntags:\n- list\n- pointer\n---\n# Intuition & Algorithm\nThe diagram and illustration in the question have given us a clear description of insertion sort algorithm.\n1. Separate the list into two parts: `sorted` and `sorting`\n2. Insert the head of `sorting` list into the sorted list\n\nWe should consider three cases during insertion(v is the node to be inserted):\n- `v < sorted.head.val` we should use this node as the new head of sorted list\n- `cur.val < v < cur.next.val` `cur` is a node in the sorted list, in this case we should insert the new node between `cur` and `cur.next`\n- `cur.next == null` this means `v` is large than any number in the list, so we append it to the tail.\n\n\n# Code\n```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode insertionSortList(ListNode head) {\n        if(head == null)return head;\n        ListNode sorted=head,sorting = head.next, next;\n        head.next = null;\n        while(sorting != null){\n            next = sorting.next;\n            \n            ListNode cur = sorted;\n            if(sorting.val < cur.val){\n                sorting.next = sorted;\n                sorted = sorting;\n            }\n            else{\n                while(cur.next != null){\n                    if(sorting.val >= cur.val && sorting.val <= cur.next.val)\n                    {\n                        sorting.next = cur.next;\n                        cur.next = sorting;\n                        break;\n                    }\n                    cur = cur.next;\n                }\n                if(cur.next == null){\n                    sorting.next = null;\n                    cur.next = sorting;\n                }\n            }\n            sorting = next;\n        }\n        return sorted;\n    }\n}\n```\n\n# Complexity\n**Time Complexity:** $O(n)$\n\n**Spatial Complexity:** $O(1)$\n","slug":"147-Insertion-Sort-List","published":1,"updated":"2019-11-12T15:12:52.014Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3gx4myt0004tkbscxfbj48r","content":"<h1 id=\"Intuition-amp-Algorithm\"><a href=\"#Intuition-amp-Algorithm\" class=\"headerlink\" title=\"Intuition &amp; Algorithm\"></a>Intuition &amp; Algorithm</h1><p>The diagram and illustration in the question have given us a clear description of insertion sort algorithm.</p>\n<ol>\n<li>Separate the list into two parts: <code>sorted</code> and <code>sorting</code></li>\n<li>Insert the head of <code>sorting</code> list into the sorted list</li>\n</ol>\n<p>We should consider three cases during insertion(v is the node to be inserted):</p>\n<ul>\n<li><code>v &lt; sorted.head.val</code> we should use this node as the new head of sorted list</li>\n<li><code>cur.val &lt; v &lt; cur.next.val</code> <code>cur</code> is a node in the sorted list, in this case we should insert the new node between <code>cur</code> and <code>cur.next</code></li>\n<li><code>cur.next == null</code> this means <code>v</code> is large than any number in the list, so we append it to the tail.</li>\n</ul>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public ListNode insertionSortList(ListNode head) &#123;</span><br><span class=\"line\">        if(head == null)return head;</span><br><span class=\"line\">        ListNode sorted=head,sorting = head.next, next;</span><br><span class=\"line\">        head.next = null;</span><br><span class=\"line\">        while(sorting != null)&#123;</span><br><span class=\"line\">            next = sorting.next;</span><br><span class=\"line\">            </span><br><span class=\"line\">            ListNode cur = sorted;</span><br><span class=\"line\">            if(sorting.val &lt; cur.val)&#123;</span><br><span class=\"line\">                sorting.next = sorted;</span><br><span class=\"line\">                sorted = sorting;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else&#123;</span><br><span class=\"line\">                while(cur.next != null)&#123;</span><br><span class=\"line\">                    if(sorting.val &gt;= cur.val &amp;&amp; sorting.val &lt;= cur.next.val)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        sorting.next = cur.next;</span><br><span class=\"line\">                        cur.next = sorting;</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    cur = cur.next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if(cur.next == null)&#123;</span><br><span class=\"line\">                    sorting.next = null;</span><br><span class=\"line\">                    cur.next = sorting;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sorting = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return sorted;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> $O(n)$</p>\n<p><strong>Spatial Complexity:</strong> $O(1)$</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Intuition-amp-Algorithm\"><a href=\"#Intuition-amp-Algorithm\" class=\"headerlink\" title=\"Intuition &amp; Algorithm\"></a>Intuition &amp; Algorithm</h1><p>The diagram and illustration in the question have given us a clear description of insertion sort algorithm.</p>\n<ol>\n<li>Separate the list into two parts: <code>sorted</code> and <code>sorting</code></li>\n<li>Insert the head of <code>sorting</code> list into the sorted list</li>\n</ol>\n<p>We should consider three cases during insertion(v is the node to be inserted):</p>\n<ul>\n<li><code>v &lt; sorted.head.val</code> we should use this node as the new head of sorted list</li>\n<li><code>cur.val &lt; v &lt; cur.next.val</code> <code>cur</code> is a node in the sorted list, in this case we should insert the new node between <code>cur</code> and <code>cur.next</code></li>\n<li><code>cur.next == null</code> this means <code>v</code> is large than any number in the list, so we append it to the tail.</li>\n</ul>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public ListNode insertionSortList(ListNode head) &#123;</span><br><span class=\"line\">        if(head == null)return head;</span><br><span class=\"line\">        ListNode sorted=head,sorting = head.next, next;</span><br><span class=\"line\">        head.next = null;</span><br><span class=\"line\">        while(sorting != null)&#123;</span><br><span class=\"line\">            next = sorting.next;</span><br><span class=\"line\">            </span><br><span class=\"line\">            ListNode cur = sorted;</span><br><span class=\"line\">            if(sorting.val &lt; cur.val)&#123;</span><br><span class=\"line\">                sorting.next = sorted;</span><br><span class=\"line\">                sorted = sorting;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else&#123;</span><br><span class=\"line\">                while(cur.next != null)&#123;</span><br><span class=\"line\">                    if(sorting.val &gt;= cur.val &amp;&amp; sorting.val &lt;= cur.next.val)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        sorting.next = cur.next;</span><br><span class=\"line\">                        cur.next = sorting;</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    cur = cur.next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if(cur.next == null)&#123;</span><br><span class=\"line\">                    sorting.next = null;</span><br><span class=\"line\">                    cur.next = sorting;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sorting = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return sorted;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> $O(n)$</p>\n<p><strong>Spatial Complexity:</strong> $O(1)$</p>\n"},{"title":"100 Same Tree","date":"2019-11-04T16:10:10.000Z","_content":"## Intuition & Algorithm\nThe question asks whether the structure of the two binary trees and the values of the nodes are the same. This question has a strong reference significance on how to judge whether two objects are equal.\n\nThere are two ideas for the solution. The first one is the recursive method. First, determine whether the root nodes are the same. If they are the same, determine whether the left and right subtrees are the same, which is equivalent to determining whether the root nodes are equal in the depth traversal process. The second idea is to traverse the binary tree in the sequence, store the nodes of the current layer of the two trees in two queues, and determine whether each node is the same in turn. In this process, the left and right child nodes of the node are added to the tail end of the queue. Yes, even if the left and right child nodes are null, you need to join because the two trees may be symmetric structures (see Example 2), and the left and right nodes are not added to the queue until the current node is empty.\n\nThis question is almost identical to the [101 symmetry binary tree](https://leetcode.com/problems/symmetric-tree/) idea, except that in the recursive method, it is judged whether the left sub-tree and the right sub-tree are equal, instead of Determine whether the left subtree and the left subtree are equal. Instead of two queues in the sequence traversal, use one queue and one stack.\n\n## Complexity\n**Time Complexity:** Time complexity for traversing the entire tree  is O(N)\n\n**Space Complexity:** The recursive method depends on the height of the tree, the worst case is O(N), best case is  O(logN); the number of nodes in the sequence traversal depends on the number of nodes, the worst is O(N), best case is O(1)\n> Interestingly, the worst case space complexity in the recursive algorithm is that the binary tree  degenerates to a linked list which resulting in a tree height of O(N), so consumption of function stack is O(N), while the broad fist traversal performs best in this case with space complexity of O(1). The best case of the recursive algorithm is a complete binary tree, in which case the height of the tree is O(logN), when the binary tree is full The number of  last layer nodes is N/2, so the space consumed is O(N).\n\n## Code\n\n```\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public boolean isSameTree(TreeNode p, TreeNode q) {\n        LinkedList<TreeNode> pl = new LinkedList<>();\n        LinkedList<TreeNode> ql = new LinkedList<>();\n        \n        pl.add(p);\n        ql.add(q);\n        while(true){\n            if(pl.size()==0 && ql.size() == 0){\n                return true;\n            }\n            else if(pl.size()==0 || ql.size() == 0)\n            {\n                return false;\n            }\n            //比较队列中的元素，并将下一层结点加入队列\n            int np = pl.size();\n            int nq = ql.size();\n            if(np != nq)return false; //结构不同，一层的节点数量不一样\n            //依次比较每个节点\n            int i = 0;\n            while(i++ < np){\n                TreeNode p1 = pl.removeFirst();\n                TreeNode q1 = ql.removeFirst();\n                if( (p1 == null && q1!=null) || (p1 != null && q1==null) )return false;\n                else if(p1!=null && q1!=null && p1.val != q1.val)return false;\n                if(p1 != null){\n                    pl.add(p1.left);pl.add(p1.right);\n                }\n                if(q1 != null){\n                    ql.add(q1.left);ql.add(q1.right);\n                }\n            }\n        }\n    }\n}\n```\n\n\n","source":"_posts/100-Same-Tree.md","raw":"---\ntitle: 100 Same Tree\ndate: 2019-11-05 00:10:10\ncategories:\n- LeetCode\ntags:\n- binary tree\n---\n## Intuition & Algorithm\nThe question asks whether the structure of the two binary trees and the values of the nodes are the same. This question has a strong reference significance on how to judge whether two objects are equal.\n\nThere are two ideas for the solution. The first one is the recursive method. First, determine whether the root nodes are the same. If they are the same, determine whether the left and right subtrees are the same, which is equivalent to determining whether the root nodes are equal in the depth traversal process. The second idea is to traverse the binary tree in the sequence, store the nodes of the current layer of the two trees in two queues, and determine whether each node is the same in turn. In this process, the left and right child nodes of the node are added to the tail end of the queue. Yes, even if the left and right child nodes are null, you need to join because the two trees may be symmetric structures (see Example 2), and the left and right nodes are not added to the queue until the current node is empty.\n\nThis question is almost identical to the [101 symmetry binary tree](https://leetcode.com/problems/symmetric-tree/) idea, except that in the recursive method, it is judged whether the left sub-tree and the right sub-tree are equal, instead of Determine whether the left subtree and the left subtree are equal. Instead of two queues in the sequence traversal, use one queue and one stack.\n\n## Complexity\n**Time Complexity:** Time complexity for traversing the entire tree  is O(N)\n\n**Space Complexity:** The recursive method depends on the height of the tree, the worst case is O(N), best case is  O(logN); the number of nodes in the sequence traversal depends on the number of nodes, the worst is O(N), best case is O(1)\n> Interestingly, the worst case space complexity in the recursive algorithm is that the binary tree  degenerates to a linked list which resulting in a tree height of O(N), so consumption of function stack is O(N), while the broad fist traversal performs best in this case with space complexity of O(1). The best case of the recursive algorithm is a complete binary tree, in which case the height of the tree is O(logN), when the binary tree is full The number of  last layer nodes is N/2, so the space consumed is O(N).\n\n## Code\n\n```\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public boolean isSameTree(TreeNode p, TreeNode q) {\n        LinkedList<TreeNode> pl = new LinkedList<>();\n        LinkedList<TreeNode> ql = new LinkedList<>();\n        \n        pl.add(p);\n        ql.add(q);\n        while(true){\n            if(pl.size()==0 && ql.size() == 0){\n                return true;\n            }\n            else if(pl.size()==0 || ql.size() == 0)\n            {\n                return false;\n            }\n            //比较队列中的元素，并将下一层结点加入队列\n            int np = pl.size();\n            int nq = ql.size();\n            if(np != nq)return false; //结构不同，一层的节点数量不一样\n            //依次比较每个节点\n            int i = 0;\n            while(i++ < np){\n                TreeNode p1 = pl.removeFirst();\n                TreeNode q1 = ql.removeFirst();\n                if( (p1 == null && q1!=null) || (p1 != null && q1==null) )return false;\n                else if(p1!=null && q1!=null && p1.val != q1.val)return false;\n                if(p1 != null){\n                    pl.add(p1.left);pl.add(p1.right);\n                }\n                if(q1 != null){\n                    ql.add(q1.left);ql.add(q1.right);\n                }\n            }\n        }\n    }\n}\n```\n\n\n","slug":"100-Same-Tree","published":1,"updated":"2019-11-08T15:50:09.012Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3gx4myv0005tkbsj3rx2d1p","content":"<h2 id=\"Intuition-amp-Algorithm\"><a href=\"#Intuition-amp-Algorithm\" class=\"headerlink\" title=\"Intuition &amp; Algorithm\"></a>Intuition &amp; Algorithm</h2><p>The question asks whether the structure of the two binary trees and the values of the nodes are the same. This question has a strong reference significance on how to judge whether two objects are equal.</p>\n<p>There are two ideas for the solution. The first one is the recursive method. First, determine whether the root nodes are the same. If they are the same, determine whether the left and right subtrees are the same, which is equivalent to determining whether the root nodes are equal in the depth traversal process. The second idea is to traverse the binary tree in the sequence, store the nodes of the current layer of the two trees in two queues, and determine whether each node is the same in turn. In this process, the left and right child nodes of the node are added to the tail end of the queue. Yes, even if the left and right child nodes are null, you need to join because the two trees may be symmetric structures (see Example 2), and the left and right nodes are not added to the queue until the current node is empty.</p>\n<p>This question is almost identical to the <a href=\"https://leetcode.com/problems/symmetric-tree/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">101 symmetry binary tree</a> idea, except that in the recursive method, it is judged whether the left sub-tree and the right sub-tree are equal, instead of Determine whether the left subtree and the left subtree are equal. Instead of two queues in the sequence traversal, use one queue and one stack.</p>\n<h2 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h2><p><strong>Time Complexity:</strong> Time complexity for traversing the entire tree  is O(N)</p>\n<p><strong>Space Complexity:</strong> The recursive method depends on the height of the tree, the worst case is O(N), best case is  O(logN); the number of nodes in the sequence traversal depends on the number of nodes, the worst is O(N), best case is O(1)</p>\n<blockquote>\n<p>Interestingly, the worst case space complexity in the recursive algorithm is that the binary tree  degenerates to a linked list which resulting in a tree height of O(N), so consumption of function stack is O(N), while the broad fist traversal performs best in this case with space complexity of O(1). The best case of the recursive algorithm is a complete binary tree, in which case the height of the tree is O(logN), when the binary tree is full The number of  last layer nodes is N/2, so the space consumed is O(N).</p>\n</blockquote>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for a binary tree node.</span><br><span class=\"line\"> * public class TreeNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     TreeNode left;</span><br><span class=\"line\"> *     TreeNode right;</span><br><span class=\"line\"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public boolean isSameTree(TreeNode p, TreeNode q) &#123;</span><br><span class=\"line\">        LinkedList&lt;TreeNode&gt; pl = new LinkedList&lt;&gt;();</span><br><span class=\"line\">        LinkedList&lt;TreeNode&gt; ql = new LinkedList&lt;&gt;();</span><br><span class=\"line\">        </span><br><span class=\"line\">        pl.add(p);</span><br><span class=\"line\">        ql.add(q);</span><br><span class=\"line\">        while(true)&#123;</span><br><span class=\"line\">            if(pl.size()==0 &amp;&amp; ql.size() == 0)&#123;</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else if(pl.size()==0 || ql.size() == 0)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            //比较队列中的元素，并将下一层结点加入队列</span><br><span class=\"line\">            int np = pl.size();</span><br><span class=\"line\">            int nq = ql.size();</span><br><span class=\"line\">            if(np != nq)return false; //结构不同，一层的节点数量不一样</span><br><span class=\"line\">            //依次比较每个节点</span><br><span class=\"line\">            int i = 0;</span><br><span class=\"line\">            while(i++ &lt; np)&#123;</span><br><span class=\"line\">                TreeNode p1 = pl.removeFirst();</span><br><span class=\"line\">                TreeNode q1 = ql.removeFirst();</span><br><span class=\"line\">                if( (p1 == null &amp;&amp; q1!=null) || (p1 != null &amp;&amp; q1==null) )return false;</span><br><span class=\"line\">                else if(p1!=null &amp;&amp; q1!=null &amp;&amp; p1.val != q1.val)return false;</span><br><span class=\"line\">                if(p1 != null)&#123;</span><br><span class=\"line\">                    pl.add(p1.left);pl.add(p1.right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if(q1 != null)&#123;</span><br><span class=\"line\">                    ql.add(q1.left);ql.add(q1.right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Intuition-amp-Algorithm\"><a href=\"#Intuition-amp-Algorithm\" class=\"headerlink\" title=\"Intuition &amp; Algorithm\"></a>Intuition &amp; Algorithm</h2><p>The question asks whether the structure of the two binary trees and the values of the nodes are the same. This question has a strong reference significance on how to judge whether two objects are equal.</p>\n<p>There are two ideas for the solution. The first one is the recursive method. First, determine whether the root nodes are the same. If they are the same, determine whether the left and right subtrees are the same, which is equivalent to determining whether the root nodes are equal in the depth traversal process. The second idea is to traverse the binary tree in the sequence, store the nodes of the current layer of the two trees in two queues, and determine whether each node is the same in turn. In this process, the left and right child nodes of the node are added to the tail end of the queue. Yes, even if the left and right child nodes are null, you need to join because the two trees may be symmetric structures (see Example 2), and the left and right nodes are not added to the queue until the current node is empty.</p>\n<p>This question is almost identical to the <a href=\"https://leetcode.com/problems/symmetric-tree/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">101 symmetry binary tree</a> idea, except that in the recursive method, it is judged whether the left sub-tree and the right sub-tree are equal, instead of Determine whether the left subtree and the left subtree are equal. Instead of two queues in the sequence traversal, use one queue and one stack.</p>\n<h2 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h2><p><strong>Time Complexity:</strong> Time complexity for traversing the entire tree  is O(N)</p>\n<p><strong>Space Complexity:</strong> The recursive method depends on the height of the tree, the worst case is O(N), best case is  O(logN); the number of nodes in the sequence traversal depends on the number of nodes, the worst is O(N), best case is O(1)</p>\n<blockquote>\n<p>Interestingly, the worst case space complexity in the recursive algorithm is that the binary tree  degenerates to a linked list which resulting in a tree height of O(N), so consumption of function stack is O(N), while the broad fist traversal performs best in this case with space complexity of O(1). The best case of the recursive algorithm is a complete binary tree, in which case the height of the tree is O(logN), when the binary tree is full The number of  last layer nodes is N/2, so the space consumed is O(N).</p>\n</blockquote>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for a binary tree node.</span><br><span class=\"line\"> * public class TreeNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     TreeNode left;</span><br><span class=\"line\"> *     TreeNode right;</span><br><span class=\"line\"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public boolean isSameTree(TreeNode p, TreeNode q) &#123;</span><br><span class=\"line\">        LinkedList&lt;TreeNode&gt; pl = new LinkedList&lt;&gt;();</span><br><span class=\"line\">        LinkedList&lt;TreeNode&gt; ql = new LinkedList&lt;&gt;();</span><br><span class=\"line\">        </span><br><span class=\"line\">        pl.add(p);</span><br><span class=\"line\">        ql.add(q);</span><br><span class=\"line\">        while(true)&#123;</span><br><span class=\"line\">            if(pl.size()==0 &amp;&amp; ql.size() == 0)&#123;</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else if(pl.size()==0 || ql.size() == 0)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            //比较队列中的元素，并将下一层结点加入队列</span><br><span class=\"line\">            int np = pl.size();</span><br><span class=\"line\">            int nq = ql.size();</span><br><span class=\"line\">            if(np != nq)return false; //结构不同，一层的节点数量不一样</span><br><span class=\"line\">            //依次比较每个节点</span><br><span class=\"line\">            int i = 0;</span><br><span class=\"line\">            while(i++ &lt; np)&#123;</span><br><span class=\"line\">                TreeNode p1 = pl.removeFirst();</span><br><span class=\"line\">                TreeNode q1 = ql.removeFirst();</span><br><span class=\"line\">                if( (p1 == null &amp;&amp; q1!=null) || (p1 != null &amp;&amp; q1==null) )return false;</span><br><span class=\"line\">                else if(p1!=null &amp;&amp; q1!=null &amp;&amp; p1.val != q1.val)return false;</span><br><span class=\"line\">                if(p1 != null)&#123;</span><br><span class=\"line\">                    pl.add(p1.left);pl.add(p1.right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if(q1 != null)&#123;</span><br><span class=\"line\">                    ql.add(q1.left);ql.add(q1.right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"19 Remove Nth Node From End of List","date":"2019-11-27T06:35:52.000Z","_content":"# Intuition & Alogorithm\nSince it's a singly linked list, we'd can only count the number of the node from head to tail. The equavalent question of this is `remove the (N-n+1)-th node from the head of list and return its head, where N is the length of the list`. There are several corner cases to notice:\n1. `n > N or n <= 0` both conditions means we try to remove unexisted nodes in the list(before the head or after the end);\n2. `n==N` this means we want to remove the head, we can deal with this one alone, or add a dummy node;\n\nBesides corner cases, we should remember to use fast-slow pointer to remove a node from the list. (I'm used to call them current and previous pointer)\n\n# Code\n```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        int N = 0;\n        ListNode tmp = head;\n        while(tmp!=null){\n            tmp = tmp.next;\n            N++;\n        }\n        if(n > N || n == 0){\n            return head;\n        }\n        n = N - n;\n        ListNode dummy = new ListNode(0);\n        dummy.next = head;\n        ListNode cur = head;\n        ListNode pre = dummy;\n        while(n-- > 0){\n            pre = cur;\n            cur = cur.next;\n        }\n        pre.next = cur.next;\n        cur = null;\n        return dummy.next;\n    }\n}\n```\n\n# Complexity\n**Time Complexity:** O(N+n) There are two for loops here, costing O(N) and O(n) respectively.\n\n**Space Complexity:** O(1)\n","source":"_posts/19-Remove-Nth-Node-From-End-of-List.md","raw":"---\ntitle: 19 Remove Nth Node From End of List\ndate: 2019-11-27 14:35:52\ntags:\n- list\ncategories:\n- LeetCode\n---\n# Intuition & Alogorithm\nSince it's a singly linked list, we'd can only count the number of the node from head to tail. The equavalent question of this is `remove the (N-n+1)-th node from the head of list and return its head, where N is the length of the list`. There are several corner cases to notice:\n1. `n > N or n <= 0` both conditions means we try to remove unexisted nodes in the list(before the head or after the end);\n2. `n==N` this means we want to remove the head, we can deal with this one alone, or add a dummy node;\n\nBesides corner cases, we should remember to use fast-slow pointer to remove a node from the list. (I'm used to call them current and previous pointer)\n\n# Code\n```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        int N = 0;\n        ListNode tmp = head;\n        while(tmp!=null){\n            tmp = tmp.next;\n            N++;\n        }\n        if(n > N || n == 0){\n            return head;\n        }\n        n = N - n;\n        ListNode dummy = new ListNode(0);\n        dummy.next = head;\n        ListNode cur = head;\n        ListNode pre = dummy;\n        while(n-- > 0){\n            pre = cur;\n            cur = cur.next;\n        }\n        pre.next = cur.next;\n        cur = null;\n        return dummy.next;\n    }\n}\n```\n\n# Complexity\n**Time Complexity:** O(N+n) There are two for loops here, costing O(N) and O(n) respectively.\n\n**Space Complexity:** O(1)\n","slug":"19-Remove-Nth-Node-From-End-of-List","published":1,"updated":"2019-11-27T06:37:24.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3gx4myx0006tkbsg21kmle3","content":"<h1 id=\"Intuition-amp-Alogorithm\"><a href=\"#Intuition-amp-Alogorithm\" class=\"headerlink\" title=\"Intuition &amp; Alogorithm\"></a>Intuition &amp; Alogorithm</h1><p>Since it’s a singly linked list, we’d can only count the number of the node from head to tail. The equavalent question of this is <code>remove the (N-n+1)-th node from the head of list and return its head, where N is the length of the list</code>. There are several corner cases to notice:</p>\n<ol>\n<li><code>n &gt; N or n &lt;= 0</code> both conditions means we try to remove unexisted nodes in the list(before the head or after the end);</li>\n<li><code>n==N</code> this means we want to remove the head, we can deal with this one alone, or add a dummy node;</li>\n</ol>\n<p>Besides corner cases, we should remember to use fast-slow pointer to remove a node from the list. (I’m used to call them current and previous pointer)</p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public ListNode removeNthFromEnd(ListNode head, int n) &#123;</span><br><span class=\"line\">        int N = 0;</span><br><span class=\"line\">        ListNode tmp = head;</span><br><span class=\"line\">        while(tmp!=null)&#123;</span><br><span class=\"line\">            tmp = tmp.next;</span><br><span class=\"line\">            N++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(n &gt; N || n == 0)&#123;</span><br><span class=\"line\">            return head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        n = N - n;</span><br><span class=\"line\">        ListNode dummy = new ListNode(0);</span><br><span class=\"line\">        dummy.next = head;</span><br><span class=\"line\">        ListNode cur = head;</span><br><span class=\"line\">        ListNode pre = dummy;</span><br><span class=\"line\">        while(n-- &gt; 0)&#123;</span><br><span class=\"line\">            pre = cur;</span><br><span class=\"line\">            cur = cur.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pre.next = cur.next;</span><br><span class=\"line\">        cur = null;</span><br><span class=\"line\">        return dummy.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> O(N+n) There are two for loops here, costing O(N) and O(n) respectively.</p>\n<p><strong>Space Complexity:</strong> O(1)</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Intuition-amp-Alogorithm\"><a href=\"#Intuition-amp-Alogorithm\" class=\"headerlink\" title=\"Intuition &amp; Alogorithm\"></a>Intuition &amp; Alogorithm</h1><p>Since it’s a singly linked list, we’d can only count the number of the node from head to tail. The equavalent question of this is <code>remove the (N-n+1)-th node from the head of list and return its head, where N is the length of the list</code>. There are several corner cases to notice:</p>\n<ol>\n<li><code>n &gt; N or n &lt;= 0</code> both conditions means we try to remove unexisted nodes in the list(before the head or after the end);</li>\n<li><code>n==N</code> this means we want to remove the head, we can deal with this one alone, or add a dummy node;</li>\n</ol>\n<p>Besides corner cases, we should remember to use fast-slow pointer to remove a node from the list. (I’m used to call them current and previous pointer)</p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public ListNode removeNthFromEnd(ListNode head, int n) &#123;</span><br><span class=\"line\">        int N = 0;</span><br><span class=\"line\">        ListNode tmp = head;</span><br><span class=\"line\">        while(tmp!=null)&#123;</span><br><span class=\"line\">            tmp = tmp.next;</span><br><span class=\"line\">            N++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(n &gt; N || n == 0)&#123;</span><br><span class=\"line\">            return head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        n = N - n;</span><br><span class=\"line\">        ListNode dummy = new ListNode(0);</span><br><span class=\"line\">        dummy.next = head;</span><br><span class=\"line\">        ListNode cur = head;</span><br><span class=\"line\">        ListNode pre = dummy;</span><br><span class=\"line\">        while(n-- &gt; 0)&#123;</span><br><span class=\"line\">            pre = cur;</span><br><span class=\"line\">            cur = cur.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pre.next = cur.next;</span><br><span class=\"line\">        cur = null;</span><br><span class=\"line\">        return dummy.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> O(N+n) There are two for loops here, costing O(N) and O(n) respectively.</p>\n<p><strong>Space Complexity:</strong> O(1)</p>\n"},{"title":"148 Sort List","date":"2019-11-10T12:54:24.000Z","_content":"# Intuition & Algorithm\nThe diagram and illustration in the question have given us a clear description of insertion sort algorithm.\n1. Separate the list into two parts: `sorted` and `sorting`\n2. Insert the head of `sorting` list into the sorted list\n\nWe should consider three cases during insertion(v is the node to be inserted):\n- `v < sorted.head.val` we should use this node as the new head of sorted list\n- `cur.val < v < cur.next.val` `cur` is a node in the sorted list, in this case we should insert the new node between `cur` and `cur.next`\n- `cur.next == null` this means `v` is large than any number in the list, so we append it to the tail.\n\n\n# Code\n```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode insertionSortList(ListNode head) {\n        if(head == null)return head;\n        ListNode sorted=head,sorting = head.next, next;\n        head.next = null;\n        while(sorting != null){\n            next = sorting.next;\n            \n            ListNode cur = sorted;\n            if(sorting.val < cur.val){\n                sorting.next = sorted;\n                sorted = sorting;\n            }\n            else{\n                while(cur.next != null){\n                    if(sorting.val >= cur.val && sorting.val <= cur.next.val)\n                    {\n                        sorting.next = cur.next;\n                        cur.next = sorting;\n                        break;\n                    }\n                    cur = cur.next;\n                }\n                if(cur.next == null){\n                    sorting.next = null;\n                    cur.next = sorting;\n                }\n            }\n            sorting = next;\n        }\n        return sorted;\n    }\n}\n```\n\n# Complexity\n**Time Complexity:** $O(n)$\n\n**Spatial Complexity:** $O(1)$\n","source":"_posts/148-Sort-List.md","raw":"---\ntitle: 148 Sort List\ndate: 2019-11-10 20:54:24\ncategories:\n- LeetCode\ntags:\n- list\n- pointer\n---\n# Intuition & Algorithm\nThe diagram and illustration in the question have given us a clear description of insertion sort algorithm.\n1. Separate the list into two parts: `sorted` and `sorting`\n2. Insert the head of `sorting` list into the sorted list\n\nWe should consider three cases during insertion(v is the node to be inserted):\n- `v < sorted.head.val` we should use this node as the new head of sorted list\n- `cur.val < v < cur.next.val` `cur` is a node in the sorted list, in this case we should insert the new node between `cur` and `cur.next`\n- `cur.next == null` this means `v` is large than any number in the list, so we append it to the tail.\n\n\n# Code\n```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode insertionSortList(ListNode head) {\n        if(head == null)return head;\n        ListNode sorted=head,sorting = head.next, next;\n        head.next = null;\n        while(sorting != null){\n            next = sorting.next;\n            \n            ListNode cur = sorted;\n            if(sorting.val < cur.val){\n                sorting.next = sorted;\n                sorted = sorting;\n            }\n            else{\n                while(cur.next != null){\n                    if(sorting.val >= cur.val && sorting.val <= cur.next.val)\n                    {\n                        sorting.next = cur.next;\n                        cur.next = sorting;\n                        break;\n                    }\n                    cur = cur.next;\n                }\n                if(cur.next == null){\n                    sorting.next = null;\n                    cur.next = sorting;\n                }\n            }\n            sorting = next;\n        }\n        return sorted;\n    }\n}\n```\n\n# Complexity\n**Time Complexity:** $O(n)$\n\n**Spatial Complexity:** $O(1)$\n","slug":"148-Sort-List","published":1,"updated":"2019-11-12T15:17:23.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3gx4myz0007tkbsvedlxjge","content":"<h1 id=\"Intuition-amp-Algorithm\"><a href=\"#Intuition-amp-Algorithm\" class=\"headerlink\" title=\"Intuition &amp; Algorithm\"></a>Intuition &amp; Algorithm</h1><p>The diagram and illustration in the question have given us a clear description of insertion sort algorithm.</p>\n<ol>\n<li>Separate the list into two parts: <code>sorted</code> and <code>sorting</code></li>\n<li>Insert the head of <code>sorting</code> list into the sorted list</li>\n</ol>\n<p>We should consider three cases during insertion(v is the node to be inserted):</p>\n<ul>\n<li><code>v &lt; sorted.head.val</code> we should use this node as the new head of sorted list</li>\n<li><code>cur.val &lt; v &lt; cur.next.val</code> <code>cur</code> is a node in the sorted list, in this case we should insert the new node between <code>cur</code> and <code>cur.next</code></li>\n<li><code>cur.next == null</code> this means <code>v</code> is large than any number in the list, so we append it to the tail.</li>\n</ul>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public ListNode insertionSortList(ListNode head) &#123;</span><br><span class=\"line\">        if(head == null)return head;</span><br><span class=\"line\">        ListNode sorted=head,sorting = head.next, next;</span><br><span class=\"line\">        head.next = null;</span><br><span class=\"line\">        while(sorting != null)&#123;</span><br><span class=\"line\">            next = sorting.next;</span><br><span class=\"line\">            </span><br><span class=\"line\">            ListNode cur = sorted;</span><br><span class=\"line\">            if(sorting.val &lt; cur.val)&#123;</span><br><span class=\"line\">                sorting.next = sorted;</span><br><span class=\"line\">                sorted = sorting;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else&#123;</span><br><span class=\"line\">                while(cur.next != null)&#123;</span><br><span class=\"line\">                    if(sorting.val &gt;= cur.val &amp;&amp; sorting.val &lt;= cur.next.val)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        sorting.next = cur.next;</span><br><span class=\"line\">                        cur.next = sorting;</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    cur = cur.next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if(cur.next == null)&#123;</span><br><span class=\"line\">                    sorting.next = null;</span><br><span class=\"line\">                    cur.next = sorting;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sorting = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return sorted;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> $O(n)$</p>\n<p><strong>Spatial Complexity:</strong> $O(1)$</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Intuition-amp-Algorithm\"><a href=\"#Intuition-amp-Algorithm\" class=\"headerlink\" title=\"Intuition &amp; Algorithm\"></a>Intuition &amp; Algorithm</h1><p>The diagram and illustration in the question have given us a clear description of insertion sort algorithm.</p>\n<ol>\n<li>Separate the list into two parts: <code>sorted</code> and <code>sorting</code></li>\n<li>Insert the head of <code>sorting</code> list into the sorted list</li>\n</ol>\n<p>We should consider three cases during insertion(v is the node to be inserted):</p>\n<ul>\n<li><code>v &lt; sorted.head.val</code> we should use this node as the new head of sorted list</li>\n<li><code>cur.val &lt; v &lt; cur.next.val</code> <code>cur</code> is a node in the sorted list, in this case we should insert the new node between <code>cur</code> and <code>cur.next</code></li>\n<li><code>cur.next == null</code> this means <code>v</code> is large than any number in the list, so we append it to the tail.</li>\n</ul>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public ListNode insertionSortList(ListNode head) &#123;</span><br><span class=\"line\">        if(head == null)return head;</span><br><span class=\"line\">        ListNode sorted=head,sorting = head.next, next;</span><br><span class=\"line\">        head.next = null;</span><br><span class=\"line\">        while(sorting != null)&#123;</span><br><span class=\"line\">            next = sorting.next;</span><br><span class=\"line\">            </span><br><span class=\"line\">            ListNode cur = sorted;</span><br><span class=\"line\">            if(sorting.val &lt; cur.val)&#123;</span><br><span class=\"line\">                sorting.next = sorted;</span><br><span class=\"line\">                sorted = sorting;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else&#123;</span><br><span class=\"line\">                while(cur.next != null)&#123;</span><br><span class=\"line\">                    if(sorting.val &gt;= cur.val &amp;&amp; sorting.val &lt;= cur.next.val)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        sorting.next = cur.next;</span><br><span class=\"line\">                        cur.next = sorting;</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    cur = cur.next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if(cur.next == null)&#123;</span><br><span class=\"line\">                    sorting.next = null;</span><br><span class=\"line\">                    cur.next = sorting;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sorting = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return sorted;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> $O(n)$</p>\n<p><strong>Spatial Complexity:</strong> $O(1)$</p>\n"},{"title":"23 Merge k Sorted Lists","date":"2019-11-27T06:36:20.000Z","_content":"# Intuition \nThis seems to be a general question of merging two sorted lists. The naive method of this question is quite intuitive. If you are interested in more efficient solutions, skip to `Partition Algorithm` and `Heap Algorithm` directly. Let's look at the example below to illustrate our naive method.\n>Input: <br>\n[<br>\n  1->4->5,<br>\n  1->3->4,<br>\n  2->6<br>\n]<br>\nOutput: 1->1->2->3->4->4->5->6<br>\n\nLet's start with a `dummy` node to represent our final list. The next node of `dummy` should be the minimum one from three headers: 1,1,2, it's the first header or the second one, either is ok, let's take the first one in this case. And we should move the header of the first list to its next one. \n\n>lists: <br>\n[<br>\n  4->5,<br>\n  1->3->4,<br>\n  2->6<br>\n]<br>\nans: -1(dummy)->1<br>\n\nThen we pick the minimum node from lists into `ans` list again. It's the head node from second list.\n>lists: <br>\n[<br>\n  4->5,<br>\n  3->4,<br>\n  2->6<br>\n]<br>\nans: -1(dummy)->1->1<br>\n\nWe do this `N` times in total. We compare `k` headers each time. where `k` is the number of lists to be merged. So time complexity is $O(Nk)$ in this method.\n\n# Heap Algorithm\nWhere is the bottleneck of naive method? We have to pick `N` nodes, so the time complexity must be $O(N*X)$. Can we reduce X from `k` to something smaller than it? The answer is yes. Review the process when we pick a node, we pick it from k nodes, and then change one of the k nodes, other k-1 nodes remains the same. In this circumstance\n, heap is a perfect data structure. The query complexity and insert complexity for a small root queue are $O(logk)$ instead of $O(k)$ in the naive method.\n# Partition Algorithm\nDon't forget it's a merge sortion question although this is for lists. Recall that how do we merge sorted arrays, every two of them are merged into one sorted array, and then we merge the new arrays with half number of previous one. Finally, we merge two sorted array. Actually, this is the same case for lists. Each time we merge every two of them, they will be merged into one after $log(k)$ times. So the time complexity is $O(Nlogk)$.  \n# Code\n1. Heap Algorithm\n```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        PriorityQueue<ListNode> heap = new PriorityQueue<>(new Comparator<ListNode>(){\n            public int compare(ListNode n1, ListNode n2){\n                if(n1.val < n2.val){\n                    return -1;\n                }\n                else if(n1.val == n2.val){\n                    return 0;\n                }\n                else\n                    return 1;\n            }}\n        );\n        for(ListNode n : lists){\n            if(n != null)\n                heap.add(n);\n        }\n        ListNode dummy = new ListNode(-1), cur = dummy;\n        while(heap.size() > 0){\n            cur.next = heap.poll();\n            cur = cur.next;\n            if(cur.next != null){\n                heap.add(cur.next);\n            }\n        }\n        return dummy.next;\n    }\n}\n\n```\n2. Partition Algorithm\n```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        if(lists.length == 0)return null;\n        List<ListNode> pool = new ArrayList<ListNode>(Arrays.asList(lists));\n        while(pool.size() > 1){\n            pool = merge(pool);\n        }\n        return pool.get(0);\n    }\n    private List<ListNode> merge(List<ListNode> pool){\n        List<ListNode> res = new ArrayList<ListNode>();\n        for(int i = 0; i< pool.size(); i+=2){\n            if(i == pool.size()-1){\n                res.add(pool.get(i));\n                break;\n            }\n            res.add(mergeTwoLists(pool.get(i), pool.get(i+1)));\n        }\n        return res;\n    }\n    private ListNode mergeTwoLists(ListNode list1, ListNode list2){\n        if(list1 == null) return list2;\n        if(list2 == null) return list1;\n        ListNode dummy = new ListNode(0), cur = dummy;\n        while(list1 != null && list2 != null){\n            if(list1.val < list2.val)\n            {\n                cur.next = list1;\n                list1 = list1.next;\n            }\n            else{\n                cur.next = list2;\n                list2 = list2.next;\n            }\n            cur = cur.next;\n        }\n        if(list1 == null){\n            cur.next = list2;\n        }\n        else{\n            cur.next = list1;\n        }\n        return dummy.next;\n    }\n}\n```\n# Complexity\n**Time Complexity:** $O(Nlog(k))$ See explanations in Algorithm sections.\n\n**Space Complexity:** $O(k)$ for the heap\n","source":"_posts/23-Merge-k-Sorted-Lists.md","raw":"---\ntitle: 23 Merge k Sorted Lists\ndate: 2019-11-27 14:36:20\ntags:\n- list\ncategories:\n- LeetCode\n---\n# Intuition \nThis seems to be a general question of merging two sorted lists. The naive method of this question is quite intuitive. If you are interested in more efficient solutions, skip to `Partition Algorithm` and `Heap Algorithm` directly. Let's look at the example below to illustrate our naive method.\n>Input: <br>\n[<br>\n  1->4->5,<br>\n  1->3->4,<br>\n  2->6<br>\n]<br>\nOutput: 1->1->2->3->4->4->5->6<br>\n\nLet's start with a `dummy` node to represent our final list. The next node of `dummy` should be the minimum one from three headers: 1,1,2, it's the first header or the second one, either is ok, let's take the first one in this case. And we should move the header of the first list to its next one. \n\n>lists: <br>\n[<br>\n  4->5,<br>\n  1->3->4,<br>\n  2->6<br>\n]<br>\nans: -1(dummy)->1<br>\n\nThen we pick the minimum node from lists into `ans` list again. It's the head node from second list.\n>lists: <br>\n[<br>\n  4->5,<br>\n  3->4,<br>\n  2->6<br>\n]<br>\nans: -1(dummy)->1->1<br>\n\nWe do this `N` times in total. We compare `k` headers each time. where `k` is the number of lists to be merged. So time complexity is $O(Nk)$ in this method.\n\n# Heap Algorithm\nWhere is the bottleneck of naive method? We have to pick `N` nodes, so the time complexity must be $O(N*X)$. Can we reduce X from `k` to something smaller than it? The answer is yes. Review the process when we pick a node, we pick it from k nodes, and then change one of the k nodes, other k-1 nodes remains the same. In this circumstance\n, heap is a perfect data structure. The query complexity and insert complexity for a small root queue are $O(logk)$ instead of $O(k)$ in the naive method.\n# Partition Algorithm\nDon't forget it's a merge sortion question although this is for lists. Recall that how do we merge sorted arrays, every two of them are merged into one sorted array, and then we merge the new arrays with half number of previous one. Finally, we merge two sorted array. Actually, this is the same case for lists. Each time we merge every two of them, they will be merged into one after $log(k)$ times. So the time complexity is $O(Nlogk)$.  \n# Code\n1. Heap Algorithm\n```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        PriorityQueue<ListNode> heap = new PriorityQueue<>(new Comparator<ListNode>(){\n            public int compare(ListNode n1, ListNode n2){\n                if(n1.val < n2.val){\n                    return -1;\n                }\n                else if(n1.val == n2.val){\n                    return 0;\n                }\n                else\n                    return 1;\n            }}\n        );\n        for(ListNode n : lists){\n            if(n != null)\n                heap.add(n);\n        }\n        ListNode dummy = new ListNode(-1), cur = dummy;\n        while(heap.size() > 0){\n            cur.next = heap.poll();\n            cur = cur.next;\n            if(cur.next != null){\n                heap.add(cur.next);\n            }\n        }\n        return dummy.next;\n    }\n}\n\n```\n2. Partition Algorithm\n```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        if(lists.length == 0)return null;\n        List<ListNode> pool = new ArrayList<ListNode>(Arrays.asList(lists));\n        while(pool.size() > 1){\n            pool = merge(pool);\n        }\n        return pool.get(0);\n    }\n    private List<ListNode> merge(List<ListNode> pool){\n        List<ListNode> res = new ArrayList<ListNode>();\n        for(int i = 0; i< pool.size(); i+=2){\n            if(i == pool.size()-1){\n                res.add(pool.get(i));\n                break;\n            }\n            res.add(mergeTwoLists(pool.get(i), pool.get(i+1)));\n        }\n        return res;\n    }\n    private ListNode mergeTwoLists(ListNode list1, ListNode list2){\n        if(list1 == null) return list2;\n        if(list2 == null) return list1;\n        ListNode dummy = new ListNode(0), cur = dummy;\n        while(list1 != null && list2 != null){\n            if(list1.val < list2.val)\n            {\n                cur.next = list1;\n                list1 = list1.next;\n            }\n            else{\n                cur.next = list2;\n                list2 = list2.next;\n            }\n            cur = cur.next;\n        }\n        if(list1 == null){\n            cur.next = list2;\n        }\n        else{\n            cur.next = list1;\n        }\n        return dummy.next;\n    }\n}\n```\n# Complexity\n**Time Complexity:** $O(Nlog(k))$ See explanations in Algorithm sections.\n\n**Space Complexity:** $O(k)$ for the heap\n","slug":"23-Merge-k-Sorted-Lists","published":1,"updated":"2019-11-27T06:38:33.604Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3gx4mz00008tkbsrz858xei","content":"<h1 id=\"Intuition\"><a href=\"#Intuition\" class=\"headerlink\" title=\"Intuition\"></a>Intuition</h1><p>This seems to be a general question of merging two sorted lists. The naive method of this question is quite intuitive. If you are interested in more efficient solutions, skip to <code>Partition Algorithm</code> and <code>Heap Algorithm</code> directly. Let’s look at the example below to illustrate our naive method.</p>\n<blockquote>\n<p>Input: <br><br>[<br><br>  1-&gt;4-&gt;5,<br><br>  1-&gt;3-&gt;4,<br><br>  2-&gt;6<br><br>]<br><br>Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6<br></p>\n</blockquote>\n<p>Let’s start with a <code>dummy</code> node to represent our final list. The next node of <code>dummy</code> should be the minimum one from three headers: 1,1,2, it’s the first header or the second one, either is ok, let’s take the first one in this case. And we should move the header of the first list to its next one. </p>\n<blockquote>\n<p>lists: <br><br>[<br><br>  4-&gt;5,<br><br>  1-&gt;3-&gt;4,<br><br>  2-&gt;6<br><br>]<br><br>ans: -1(dummy)-&gt;1<br></p>\n</blockquote>\n<p>Then we pick the minimum node from lists into <code>ans</code> list again. It’s the head node from second list.</p>\n<blockquote>\n<p>lists: <br><br>[<br><br>  4-&gt;5,<br><br>  3-&gt;4,<br><br>  2-&gt;6<br><br>]<br><br>ans: -1(dummy)-&gt;1-&gt;1<br></p>\n</blockquote>\n<p>We do this <code>N</code> times in total. We compare <code>k</code> headers each time. where <code>k</code> is the number of lists to be merged. So time complexity is $O(Nk)$ in this method.</p>\n<h1 id=\"Heap-Algorithm\"><a href=\"#Heap-Algorithm\" class=\"headerlink\" title=\"Heap Algorithm\"></a>Heap Algorithm</h1><p>Where is the bottleneck of naive method? We have to pick <code>N</code> nodes, so the time complexity must be $O(N*X)$. Can we reduce X from <code>k</code> to something smaller than it? The answer is yes. Review the process when we pick a node, we pick it from k nodes, and then change one of the k nodes, other k-1 nodes remains the same. In this circumstance<br>, heap is a perfect data structure. The query complexity and insert complexity for a small root queue are $O(logk)$ instead of $O(k)$ in the naive method.</p>\n<h1 id=\"Partition-Algorithm\"><a href=\"#Partition-Algorithm\" class=\"headerlink\" title=\"Partition Algorithm\"></a>Partition Algorithm</h1><p>Don’t forget it’s a merge sortion question although this is for lists. Recall that how do we merge sorted arrays, every two of them are merged into one sorted array, and then we merge the new arrays with half number of previous one. Finally, we merge two sorted array. Actually, this is the same case for lists. Each time we merge every two of them, they will be merged into one after $log(k)$ times. So the time complexity is $O(Nlogk)$.  </p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><ol>\n<li><p>Heap Algorithm</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public ListNode mergeKLists(ListNode[] lists) &#123;</span><br><span class=\"line\">        PriorityQueue&lt;ListNode&gt; heap = new PriorityQueue&lt;&gt;(new Comparator&lt;ListNode&gt;()&#123;</span><br><span class=\"line\">            public int compare(ListNode n1, ListNode n2)&#123;</span><br><span class=\"line\">                if(n1.val &lt; n2.val)&#123;</span><br><span class=\"line\">                    return -1;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else if(n1.val == n2.val)&#123;</span><br><span class=\"line\">                    return 0;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else</span><br><span class=\"line\">                    return 1;</span><br><span class=\"line\">            &#125;&#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">        for(ListNode n : lists)&#123;</span><br><span class=\"line\">            if(n != null)</span><br><span class=\"line\">                heap.add(n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode dummy = new ListNode(-1), cur = dummy;</span><br><span class=\"line\">        while(heap.size() &gt; 0)&#123;</span><br><span class=\"line\">            cur.next = heap.poll();</span><br><span class=\"line\">            cur = cur.next;</span><br><span class=\"line\">            if(cur.next != null)&#123;</span><br><span class=\"line\">                heap.add(cur.next);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dummy.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Partition Algorithm</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public ListNode mergeKLists(ListNode[] lists) &#123;</span><br><span class=\"line\">        if(lists.length == 0)return null;</span><br><span class=\"line\">        List&lt;ListNode&gt; pool = new ArrayList&lt;ListNode&gt;(Arrays.asList(lists));</span><br><span class=\"line\">        while(pool.size() &gt; 1)&#123;</span><br><span class=\"line\">            pool = merge(pool);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return pool.get(0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private List&lt;ListNode&gt; merge(List&lt;ListNode&gt; pool)&#123;</span><br><span class=\"line\">        List&lt;ListNode&gt; res = new ArrayList&lt;ListNode&gt;();</span><br><span class=\"line\">        for(int i = 0; i&lt; pool.size(); i+=2)&#123;</span><br><span class=\"line\">            if(i == pool.size()-1)&#123;</span><br><span class=\"line\">                res.add(pool.get(i));</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res.add(mergeTwoLists(pool.get(i), pool.get(i+1)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private ListNode mergeTwoLists(ListNode list1, ListNode list2)&#123;</span><br><span class=\"line\">        if(list1 == null) return list2;</span><br><span class=\"line\">        if(list2 == null) return list1;</span><br><span class=\"line\">        ListNode dummy = new ListNode(0), cur = dummy;</span><br><span class=\"line\">        while(list1 != null &amp;&amp; list2 != null)&#123;</span><br><span class=\"line\">            if(list1.val &lt; list2.val)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cur.next = list1;</span><br><span class=\"line\">                list1 = list1.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else&#123;</span><br><span class=\"line\">                cur.next = list2;</span><br><span class=\"line\">                list2 = list2.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cur = cur.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(list1 == null)&#123;</span><br><span class=\"line\">            cur.next = list2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else&#123;</span><br><span class=\"line\">            cur.next = list1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dummy.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> $O(Nlog(k))$ See explanations in Algorithm sections.</p>\n<p><strong>Space Complexity:</strong> $O(k)$ for the heap</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Intuition\"><a href=\"#Intuition\" class=\"headerlink\" title=\"Intuition\"></a>Intuition</h1><p>This seems to be a general question of merging two sorted lists. The naive method of this question is quite intuitive. If you are interested in more efficient solutions, skip to <code>Partition Algorithm</code> and <code>Heap Algorithm</code> directly. Let’s look at the example below to illustrate our naive method.</p>\n<blockquote>\n<p>Input: <br><br>[<br><br>  1-&gt;4-&gt;5,<br><br>  1-&gt;3-&gt;4,<br><br>  2-&gt;6<br><br>]<br><br>Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6<br></p>\n</blockquote>\n<p>Let’s start with a <code>dummy</code> node to represent our final list. The next node of <code>dummy</code> should be the minimum one from three headers: 1,1,2, it’s the first header or the second one, either is ok, let’s take the first one in this case. And we should move the header of the first list to its next one. </p>\n<blockquote>\n<p>lists: <br><br>[<br><br>  4-&gt;5,<br><br>  1-&gt;3-&gt;4,<br><br>  2-&gt;6<br><br>]<br><br>ans: -1(dummy)-&gt;1<br></p>\n</blockquote>\n<p>Then we pick the minimum node from lists into <code>ans</code> list again. It’s the head node from second list.</p>\n<blockquote>\n<p>lists: <br><br>[<br><br>  4-&gt;5,<br><br>  3-&gt;4,<br><br>  2-&gt;6<br><br>]<br><br>ans: -1(dummy)-&gt;1-&gt;1<br></p>\n</blockquote>\n<p>We do this <code>N</code> times in total. We compare <code>k</code> headers each time. where <code>k</code> is the number of lists to be merged. So time complexity is $O(Nk)$ in this method.</p>\n<h1 id=\"Heap-Algorithm\"><a href=\"#Heap-Algorithm\" class=\"headerlink\" title=\"Heap Algorithm\"></a>Heap Algorithm</h1><p>Where is the bottleneck of naive method? We have to pick <code>N</code> nodes, so the time complexity must be $O(N*X)$. Can we reduce X from <code>k</code> to something smaller than it? The answer is yes. Review the process when we pick a node, we pick it from k nodes, and then change one of the k nodes, other k-1 nodes remains the same. In this circumstance<br>, heap is a perfect data structure. The query complexity and insert complexity for a small root queue are $O(logk)$ instead of $O(k)$ in the naive method.</p>\n<h1 id=\"Partition-Algorithm\"><a href=\"#Partition-Algorithm\" class=\"headerlink\" title=\"Partition Algorithm\"></a>Partition Algorithm</h1><p>Don’t forget it’s a merge sortion question although this is for lists. Recall that how do we merge sorted arrays, every two of them are merged into one sorted array, and then we merge the new arrays with half number of previous one. Finally, we merge two sorted array. Actually, this is the same case for lists. Each time we merge every two of them, they will be merged into one after $log(k)$ times. So the time complexity is $O(Nlogk)$.  </p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><ol>\n<li><p>Heap Algorithm</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public ListNode mergeKLists(ListNode[] lists) &#123;</span><br><span class=\"line\">        PriorityQueue&lt;ListNode&gt; heap = new PriorityQueue&lt;&gt;(new Comparator&lt;ListNode&gt;()&#123;</span><br><span class=\"line\">            public int compare(ListNode n1, ListNode n2)&#123;</span><br><span class=\"line\">                if(n1.val &lt; n2.val)&#123;</span><br><span class=\"line\">                    return -1;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else if(n1.val == n2.val)&#123;</span><br><span class=\"line\">                    return 0;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else</span><br><span class=\"line\">                    return 1;</span><br><span class=\"line\">            &#125;&#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">        for(ListNode n : lists)&#123;</span><br><span class=\"line\">            if(n != null)</span><br><span class=\"line\">                heap.add(n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode dummy = new ListNode(-1), cur = dummy;</span><br><span class=\"line\">        while(heap.size() &gt; 0)&#123;</span><br><span class=\"line\">            cur.next = heap.poll();</span><br><span class=\"line\">            cur = cur.next;</span><br><span class=\"line\">            if(cur.next != null)&#123;</span><br><span class=\"line\">                heap.add(cur.next);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dummy.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Partition Algorithm</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public ListNode mergeKLists(ListNode[] lists) &#123;</span><br><span class=\"line\">        if(lists.length == 0)return null;</span><br><span class=\"line\">        List&lt;ListNode&gt; pool = new ArrayList&lt;ListNode&gt;(Arrays.asList(lists));</span><br><span class=\"line\">        while(pool.size() &gt; 1)&#123;</span><br><span class=\"line\">            pool = merge(pool);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return pool.get(0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private List&lt;ListNode&gt; merge(List&lt;ListNode&gt; pool)&#123;</span><br><span class=\"line\">        List&lt;ListNode&gt; res = new ArrayList&lt;ListNode&gt;();</span><br><span class=\"line\">        for(int i = 0; i&lt; pool.size(); i+=2)&#123;</span><br><span class=\"line\">            if(i == pool.size()-1)&#123;</span><br><span class=\"line\">                res.add(pool.get(i));</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res.add(mergeTwoLists(pool.get(i), pool.get(i+1)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private ListNode mergeTwoLists(ListNode list1, ListNode list2)&#123;</span><br><span class=\"line\">        if(list1 == null) return list2;</span><br><span class=\"line\">        if(list2 == null) return list1;</span><br><span class=\"line\">        ListNode dummy = new ListNode(0), cur = dummy;</span><br><span class=\"line\">        while(list1 != null &amp;&amp; list2 != null)&#123;</span><br><span class=\"line\">            if(list1.val &lt; list2.val)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cur.next = list1;</span><br><span class=\"line\">                list1 = list1.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else&#123;</span><br><span class=\"line\">                cur.next = list2;</span><br><span class=\"line\">                list2 = list2.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cur = cur.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(list1 == null)&#123;</span><br><span class=\"line\">            cur.next = list2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else&#123;</span><br><span class=\"line\">            cur.next = list1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dummy.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> $O(Nlog(k))$ See explanations in Algorithm sections.</p>\n<p><strong>Space Complexity:</strong> $O(k)$ for the heap</p>\n"},{"title":"120  Triangle","date":"2019-11-08T15:49:20.000Z","_content":"# Intuition\nThe **broute-force solution** for this method is to list all the possible path, and then get the minimum.\nIn the top layer of the triangle, we can only choose index *0*. In the second layer, we can choose *0* or *1* for *0* in the first layer. In the third layer, we can choose *0* or *1* for *0* in second layer and *1* or *2* for *1*... these choices form a binary tree. Each path from root to leaf node is related to a path from top to bottom in the trianlgle.So the time complexity is $O(2^n)$.\n\nFrom the above analysis, we find out this is a **dynamic programming** problem, so we can use **memoization** to store the minimum sum from top to the entry in the previous layer and then compare the entries in current layer and get the minimum. For example, in the **i**th layer, for the **j**th element, we have:\n```\nmemo[i][j] = Math.min(memo[i-1][j-1], memo[i-1][j])+triangle[i][j]\n```\nThe equation above actually has also give us the state transition formula for this question. What we want is `min(memo[n-1][j])` with j from 0 to n-1. The question has an extra bonus for less space.`Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.` Currently, space complexity is $O(n^2)$, but we don't need to save all the middle result in array since current state is only relative to previous one, not all the past state. So we can use two one dimensional array, one for previous state, and one for current state. If we look deeper into the state transition equation, one array is enough, we just update elements in previous array to current array one by one.\n\n> Note: *j-1* might be less than 0 and *j* might be large than i(in the ith layer, the maximum index is i). We need to deal with these two cases.\n\n# Algorithm\nAs stated before, this is a dynamic problem, there are three methods:\n1. Recursion\n2. Memoization (Optimize for recursion)\n3. Iteration\n\nWe will only talk  about the iteration method here. Since we have given the two dimensional state  transition equation before, one dimensional state transition equation will be given here, which should be the best solution for this question. Note j is from i to 0 in case we shltered the old state before we don't need it.\n\n*State Transition:* \n\n$$\ndp[j] = min(dp[j-1],dp[j])+triangle[i][j], j\\in{i, i-1, ..., 0} \\quad i\\in0,1,...,n\n$$\n\n# Code \n```\nclass Solution {\n    public int minimumTotal(List<List<Integer>> triangle) {\n\n        int n = triangle.size();\n        int[] dp = new int[n];\n        dp[0] = triangle.get(0).get(0);\n        for(int i = 1; i < n; i++){\n            for(int j = i; j >= 0; j--){\n                int l = Math.max(0, j-1);\n                int r = Math.min(i-1, j);\n                dp[j] = Math.min(dp[l], dp[r]) + triangle.get(i).get(j);\n            }\n        }\n        int ans = Integer.MAX_VALUE;\n        for(int i = 0; i < n; i++){\n            ans = Math.min(ans, dp[i]);\n        }\n        return ans;\n    }\n}\n```\n# Complexity\n**Time Complexity:** $O(n^2)$\n\n**Space Complexity:** $O(n)$\n\n","source":"_posts/120-Triangle.md","raw":"---\ntitle: 120  Triangle\ndate: 2019-11-08 23:49:20\ncategories:\n- LeetCode\ntags:\n- dynamic programming\n---\n# Intuition\nThe **broute-force solution** for this method is to list all the possible path, and then get the minimum.\nIn the top layer of the triangle, we can only choose index *0*. In the second layer, we can choose *0* or *1* for *0* in the first layer. In the third layer, we can choose *0* or *1* for *0* in second layer and *1* or *2* for *1*... these choices form a binary tree. Each path from root to leaf node is related to a path from top to bottom in the trianlgle.So the time complexity is $O(2^n)$.\n\nFrom the above analysis, we find out this is a **dynamic programming** problem, so we can use **memoization** to store the minimum sum from top to the entry in the previous layer and then compare the entries in current layer and get the minimum. For example, in the **i**th layer, for the **j**th element, we have:\n```\nmemo[i][j] = Math.min(memo[i-1][j-1], memo[i-1][j])+triangle[i][j]\n```\nThe equation above actually has also give us the state transition formula for this question. What we want is `min(memo[n-1][j])` with j from 0 to n-1. The question has an extra bonus for less space.`Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.` Currently, space complexity is $O(n^2)$, but we don't need to save all the middle result in array since current state is only relative to previous one, not all the past state. So we can use two one dimensional array, one for previous state, and one for current state. If we look deeper into the state transition equation, one array is enough, we just update elements in previous array to current array one by one.\n\n> Note: *j-1* might be less than 0 and *j* might be large than i(in the ith layer, the maximum index is i). We need to deal with these two cases.\n\n# Algorithm\nAs stated before, this is a dynamic problem, there are three methods:\n1. Recursion\n2. Memoization (Optimize for recursion)\n3. Iteration\n\nWe will only talk  about the iteration method here. Since we have given the two dimensional state  transition equation before, one dimensional state transition equation will be given here, which should be the best solution for this question. Note j is from i to 0 in case we shltered the old state before we don't need it.\n\n*State Transition:* \n\n$$\ndp[j] = min(dp[j-1],dp[j])+triangle[i][j], j\\in{i, i-1, ..., 0} \\quad i\\in0,1,...,n\n$$\n\n# Code \n```\nclass Solution {\n    public int minimumTotal(List<List<Integer>> triangle) {\n\n        int n = triangle.size();\n        int[] dp = new int[n];\n        dp[0] = triangle.get(0).get(0);\n        for(int i = 1; i < n; i++){\n            for(int j = i; j >= 0; j--){\n                int l = Math.max(0, j-1);\n                int r = Math.min(i-1, j);\n                dp[j] = Math.min(dp[l], dp[r]) + triangle.get(i).get(j);\n            }\n        }\n        int ans = Integer.MAX_VALUE;\n        for(int i = 0; i < n; i++){\n            ans = Math.min(ans, dp[i]);\n        }\n        return ans;\n    }\n}\n```\n# Complexity\n**Time Complexity:** $O(n^2)$\n\n**Space Complexity:** $O(n)$\n\n","slug":"120-Triangle","published":1,"updated":"2019-11-08T16:25:26.012Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3gx4mz20009tkbsr4rp9936","content":"<h1 id=\"Intuition\"><a href=\"#Intuition\" class=\"headerlink\" title=\"Intuition\"></a>Intuition</h1><p>The <strong>broute-force solution</strong> for this method is to list all the possible path, and then get the minimum.<br>In the top layer of the triangle, we can only choose index <em>0</em>. In the second layer, we can choose <em>0</em> or <em>1</em> for <em>0</em> in the first layer. In the third layer, we can choose <em>0</em> or <em>1</em> for <em>0</em> in second layer and <em>1</em> or <em>2</em> for <em>1</em>… these choices form a binary tree. Each path from root to leaf node is related to a path from top to bottom in the trianlgle.So the time complexity is $O(2^n)$.</p>\n<p>From the above analysis, we find out this is a <strong>dynamic programming</strong> problem, so we can use <strong>memoization</strong> to store the minimum sum from top to the entry in the previous layer and then compare the entries in current layer and get the minimum. For example, in the <strong>i</strong>th layer, for the <strong>j</strong>th element, we have:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">memo[i][j] = Math.min(memo[i-1][j-1], memo[i-1][j])+triangle[i][j]</span><br></pre></td></tr></table></figure></p>\n<p>The equation above actually has also give us the state transition formula for this question. What we want is <code>min(memo[n-1][j])</code> with j from 0 to n-1. The question has an extra bonus for less space.<code>Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.</code> Currently, space complexity is $O(n^2)$, but we don’t need to save all the middle result in array since current state is only relative to previous one, not all the past state. So we can use two one dimensional array, one for previous state, and one for current state. If we look deeper into the state transition equation, one array is enough, we just update elements in previous array to current array one by one.</p>\n<blockquote>\n<p>Note: <em>j-1</em> might be less than 0 and <em>j</em> might be large than i(in the ith layer, the maximum index is i). We need to deal with these two cases.</p>\n</blockquote>\n<h1 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h1><p>As stated before, this is a dynamic problem, there are three methods:</p>\n<ol>\n<li>Recursion</li>\n<li>Memoization (Optimize for recursion)</li>\n<li>Iteration</li>\n</ol>\n<p>We will only talk  about the iteration method here. Since we have given the two dimensional state  transition equation before, one dimensional state transition equation will be given here, which should be the best solution for this question. Note j is from i to 0 in case we shltered the old state before we don’t need it.</p>\n<p><em>State Transition:</em> </p>\n<script type=\"math/tex; mode=display\">\ndp[j] = min(dp[j-1],dp[j])+triangle[i][j], j\\in{i, i-1, ..., 0} \\quad i\\in0,1,...,n</script><h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public int minimumTotal(List&lt;List&lt;Integer&gt;&gt; triangle) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        int n = triangle.size();</span><br><span class=\"line\">        int[] dp = new int[n];</span><br><span class=\"line\">        dp[0] = triangle.get(0).get(0);</span><br><span class=\"line\">        for(int i = 1; i &lt; n; i++)&#123;</span><br><span class=\"line\">            for(int j = i; j &gt;= 0; j--)&#123;</span><br><span class=\"line\">                int l = Math.max(0, j-1);</span><br><span class=\"line\">                int r = Math.min(i-1, j);</span><br><span class=\"line\">                dp[j] = Math.min(dp[l], dp[r]) + triangle.get(i).get(j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int ans = Integer.MAX_VALUE;</span><br><span class=\"line\">        for(int i = 0; i &lt; n; i++)&#123;</span><br><span class=\"line\">            ans = Math.min(ans, dp[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> $O(n^2)$</p>\n<p><strong>Space Complexity:</strong> $O(n)$</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Intuition\"><a href=\"#Intuition\" class=\"headerlink\" title=\"Intuition\"></a>Intuition</h1><p>The <strong>broute-force solution</strong> for this method is to list all the possible path, and then get the minimum.<br>In the top layer of the triangle, we can only choose index <em>0</em>. In the second layer, we can choose <em>0</em> or <em>1</em> for <em>0</em> in the first layer. In the third layer, we can choose <em>0</em> or <em>1</em> for <em>0</em> in second layer and <em>1</em> or <em>2</em> for <em>1</em>… these choices form a binary tree. Each path from root to leaf node is related to a path from top to bottom in the trianlgle.So the time complexity is $O(2^n)$.</p>\n<p>From the above analysis, we find out this is a <strong>dynamic programming</strong> problem, so we can use <strong>memoization</strong> to store the minimum sum from top to the entry in the previous layer and then compare the entries in current layer and get the minimum. For example, in the <strong>i</strong>th layer, for the <strong>j</strong>th element, we have:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">memo[i][j] = Math.min(memo[i-1][j-1], memo[i-1][j])+triangle[i][j]</span><br></pre></td></tr></table></figure></p>\n<p>The equation above actually has also give us the state transition formula for this question. What we want is <code>min(memo[n-1][j])</code> with j from 0 to n-1. The question has an extra bonus for less space.<code>Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.</code> Currently, space complexity is $O(n^2)$, but we don’t need to save all the middle result in array since current state is only relative to previous one, not all the past state. So we can use two one dimensional array, one for previous state, and one for current state. If we look deeper into the state transition equation, one array is enough, we just update elements in previous array to current array one by one.</p>\n<blockquote>\n<p>Note: <em>j-1</em> might be less than 0 and <em>j</em> might be large than i(in the ith layer, the maximum index is i). We need to deal with these two cases.</p>\n</blockquote>\n<h1 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h1><p>As stated before, this is a dynamic problem, there are three methods:</p>\n<ol>\n<li>Recursion</li>\n<li>Memoization (Optimize for recursion)</li>\n<li>Iteration</li>\n</ol>\n<p>We will only talk  about the iteration method here. Since we have given the two dimensional state  transition equation before, one dimensional state transition equation will be given here, which should be the best solution for this question. Note j is from i to 0 in case we shltered the old state before we don’t need it.</p>\n<p><em>State Transition:</em> </p>\n<script type=\"math/tex; mode=display\">\ndp[j] = min(dp[j-1],dp[j])+triangle[i][j], j\\in{i, i-1, ..., 0} \\quad i\\in0,1,...,n</script><h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public int minimumTotal(List&lt;List&lt;Integer&gt;&gt; triangle) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        int n = triangle.size();</span><br><span class=\"line\">        int[] dp = new int[n];</span><br><span class=\"line\">        dp[0] = triangle.get(0).get(0);</span><br><span class=\"line\">        for(int i = 1; i &lt; n; i++)&#123;</span><br><span class=\"line\">            for(int j = i; j &gt;= 0; j--)&#123;</span><br><span class=\"line\">                int l = Math.max(0, j-1);</span><br><span class=\"line\">                int r = Math.min(i-1, j);</span><br><span class=\"line\">                dp[j] = Math.min(dp[l], dp[r]) + triangle.get(i).get(j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int ans = Integer.MAX_VALUE;</span><br><span class=\"line\">        for(int i = 0; i &lt; n; i++)&#123;</span><br><span class=\"line\">            ans = Math.min(ans, dp[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> $O(n^2)$</p>\n<p><strong>Space Complexity:</strong> $O(n)$</p>\n"},{"title":"216 Combination Sum III","date":"2019-11-20T05:42:31.000Z","comments":1,"_content":"# Intuition & Algorithm\nNumbers 1-9 can be seen as candidates in the previous questions, the constraints of this question are:\n1. We can only pick one number one time, but we can only pick `k` numbers.\n2. All numbers are unique\n\nActually,  this question is much easier than before since numbers are unique and we can only pick one number one time. If we pick these numbers by ascending order, there will be no duplicates. We only need to record the depth of the path in dfs, ensuring it no more than `k`.\n\n\n# Code\n```\nclass Solution {\n    List<Integer> path = new LinkedList<>();\n    List<List<Integer>> ans = new LinkedList<>();\n    public List<List<Integer>> combinationSum3(int k, int n) {\n        if(k > 9 || n <= 0)\n            return ans;\n        dfs(k, n, 1);\n        return ans;\n    }\n    private void dfs(int k, int n , int c){\n        if(k==0 && n==0){\n            ans.add(new ArrayList<Integer>(path));\n            return;\n        }\n        if(k==0 || n<=0 || c>9)\n        {\n            return;\n        }\n        for(int i = c; i < 10; i++){\n            path.add(i);\n            dfs(k-1, n-i, i+1);\n            path.remove(path.size()-1);\n        }\n    }\n}\n```\n\n# Complexity\n**Time Complexity:** $O(9^k)$\n\n**Space Complexity:** $O(km)$ where m is the number of solutions, it's a math problem and I'm not sure what it is. \n","source":"_posts/216-Combination-Sum-III.md","raw":"---\ntitle: 216 Combination Sum III\ndate: 2019-11-20 13:42:31\ntags:\n- dfs\ncategories:\n- LeetCode\ncomments: true\n---\n# Intuition & Algorithm\nNumbers 1-9 can be seen as candidates in the previous questions, the constraints of this question are:\n1. We can only pick one number one time, but we can only pick `k` numbers.\n2. All numbers are unique\n\nActually,  this question is much easier than before since numbers are unique and we can only pick one number one time. If we pick these numbers by ascending order, there will be no duplicates. We only need to record the depth of the path in dfs, ensuring it no more than `k`.\n\n\n# Code\n```\nclass Solution {\n    List<Integer> path = new LinkedList<>();\n    List<List<Integer>> ans = new LinkedList<>();\n    public List<List<Integer>> combinationSum3(int k, int n) {\n        if(k > 9 || n <= 0)\n            return ans;\n        dfs(k, n, 1);\n        return ans;\n    }\n    private void dfs(int k, int n , int c){\n        if(k==0 && n==0){\n            ans.add(new ArrayList<Integer>(path));\n            return;\n        }\n        if(k==0 || n<=0 || c>9)\n        {\n            return;\n        }\n        for(int i = c; i < 10; i++){\n            path.add(i);\n            dfs(k-1, n-i, i+1);\n            path.remove(path.size()-1);\n        }\n    }\n}\n```\n\n# Complexity\n**Time Complexity:** $O(9^k)$\n\n**Space Complexity:** $O(km)$ where m is the number of solutions, it's a math problem and I'm not sure what it is. \n","slug":"216-Combination-Sum-III","published":1,"updated":"2019-11-20T05:44:51.441Z","layout":"post","photos":[],"link":"","_id":"ck3gx4mz4000atkbs24rlh99i","content":"<h1 id=\"Intuition-amp-Algorithm\"><a href=\"#Intuition-amp-Algorithm\" class=\"headerlink\" title=\"Intuition &amp; Algorithm\"></a>Intuition &amp; Algorithm</h1><p>Numbers 1-9 can be seen as candidates in the previous questions, the constraints of this question are:</p>\n<ol>\n<li>We can only pick one number one time, but we can only pick <code>k</code> numbers.</li>\n<li>All numbers are unique</li>\n</ol>\n<p>Actually,  this question is much easier than before since numbers are unique and we can only pick one number one time. If we pick these numbers by ascending order, there will be no duplicates. We only need to record the depth of the path in dfs, ensuring it no more than <code>k</code>.</p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    List&lt;Integer&gt; path = new LinkedList&lt;&gt;();</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; ans = new LinkedList&lt;&gt;();</span><br><span class=\"line\">    public List&lt;List&lt;Integer&gt;&gt; combinationSum3(int k, int n) &#123;</span><br><span class=\"line\">        if(k &gt; 9 || n &lt;= 0)</span><br><span class=\"line\">            return ans;</span><br><span class=\"line\">        dfs(k, n, 1);</span><br><span class=\"line\">        return ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private void dfs(int k, int n , int c)&#123;</span><br><span class=\"line\">        if(k==0 &amp;&amp; n==0)&#123;</span><br><span class=\"line\">            ans.add(new ArrayList&lt;Integer&gt;(path));</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(k==0 || n&lt;=0 || c&gt;9)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for(int i = c; i &lt; 10; i++)&#123;</span><br><span class=\"line\">            path.add(i);</span><br><span class=\"line\">            dfs(k-1, n-i, i+1);</span><br><span class=\"line\">            path.remove(path.size()-1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> $O(9^k)$</p>\n<p><strong>Space Complexity:</strong> $O(km)$ where m is the number of solutions, it’s a math problem and I’m not sure what it is. </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Intuition-amp-Algorithm\"><a href=\"#Intuition-amp-Algorithm\" class=\"headerlink\" title=\"Intuition &amp; Algorithm\"></a>Intuition &amp; Algorithm</h1><p>Numbers 1-9 can be seen as candidates in the previous questions, the constraints of this question are:</p>\n<ol>\n<li>We can only pick one number one time, but we can only pick <code>k</code> numbers.</li>\n<li>All numbers are unique</li>\n</ol>\n<p>Actually,  this question is much easier than before since numbers are unique and we can only pick one number one time. If we pick these numbers by ascending order, there will be no duplicates. We only need to record the depth of the path in dfs, ensuring it no more than <code>k</code>.</p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    List&lt;Integer&gt; path = new LinkedList&lt;&gt;();</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; ans = new LinkedList&lt;&gt;();</span><br><span class=\"line\">    public List&lt;List&lt;Integer&gt;&gt; combinationSum3(int k, int n) &#123;</span><br><span class=\"line\">        if(k &gt; 9 || n &lt;= 0)</span><br><span class=\"line\">            return ans;</span><br><span class=\"line\">        dfs(k, n, 1);</span><br><span class=\"line\">        return ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private void dfs(int k, int n , int c)&#123;</span><br><span class=\"line\">        if(k==0 &amp;&amp; n==0)&#123;</span><br><span class=\"line\">            ans.add(new ArrayList&lt;Integer&gt;(path));</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(k==0 || n&lt;=0 || c&gt;9)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for(int i = c; i &lt; 10; i++)&#123;</span><br><span class=\"line\">            path.add(i);</span><br><span class=\"line\">            dfs(k-1, n-i, i+1);</span><br><span class=\"line\">            path.remove(path.size()-1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> $O(9^k)$</p>\n<p><strong>Space Complexity:</strong> $O(km)$ where m is the number of solutions, it’s a math problem and I’m not sure what it is. </p>\n"},{"title":"39 Combination Sum","date":"2019-11-18T16:08:36.000Z","comments":1,"_content":"# Intuition && Algorithm\nIt's `dfs`+`dynamic programming` problem. To get all the possible combination adding up to the target, we need to solve several subproblems. Before all, let's think about when will there be no solution set for this problem. The naive idea is to sort the array, if the first number is less than target there will be no solution.\n\nLet's look at an example and see how to solve it.\n> Input: candidates = [2,3,6,7], target = 7, \n<br/>A solution set is:\n[\n  [7],\n  [2,2,3]\n]\n\nFirst, suppose there is a `2` in one possible solution(one path if considering dfs), and then we need to solve a combination sum of target `5`(7-2=5) and the same candidates problem. When the target is equal to one candidate, we find a solution(path). But if this target is smaller than the first value, then this is not a possible solution. We can use a formula to describe this solution.\n\n$$S(target)=S(target-candidate[0])+S(target-candidate[1])+...+S(target-candidate[n])$$\n\n$S(i)$ denotes a solution set, it can be empty.\n\nBy far, this is a typic process for solving `dfs`+`dynamic programming` problem. But we ignored one import thing, the solutions in solution set can't be duplicated. For the example above, $S(7)=S(5)+S(4)+S(1)+[7]$, and $S(5)=[2,3]$ $S(4)=[2,2]$, both of them give the same solution indeed $[2,2,3]=[3,2,2]$. Duplicated solution occurs because we can choose value in any sequence. If we are only allowed to choose them in non-decreasing order, duplicates can be avoided. In this case only $[2,2,3]$ is allowed.\n# Code\n```\nclass Solution {\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        Arrays.sort(candidates);\n        return findSolutionSet(candidates, target, 0);\n    }\n    private List<List<Integer>> findSolutionSet(int[] candidates, int target, int pre){\n        List<List<Integer>> ans = new ArrayList<>();\n        // terminate condition\n        if(target < candidates[0])\n            return ans;\n        for(int i = 0; i < candidates.length; i++){           \n            int cur = candidates[i];\n            if(cur < target && cur >= pre){\n                List<List<Integer>> preRes = findSolutionSet(candidates, target - cur, cur);\n                if(preRes.size() > 0){\n                    for(List<Integer> r: preRes){\n                        r.add(cur);\n                        ans.add(r);\n                    }\n                }\n            }\n            else if(cur == target && cur >= pre){\n                List<Integer> t = new ArrayList<>();\n                t.add(cur);\n                ans.add(t);\n\n            }\n        }\n        return ans;\n    }\n}\n```\n\n# Complexity\n\n**Time Complexity:** Time Complexity for sorting an array is $O(nlogn)$ and for dynamic programming portion it's about $O(n^{target})$. You can get the approximate time complexity from the equation for solving this problem above, all the possible solutions construct a tree. \n\n**Space Complexity:** From the equation above, we can simply think it as $O(target)$ since the solution set has `target` member in the worst case.\n","source":"_posts/39-Combination-Sum.md","raw":"---\ntitle: 39 Combination Sum\ndate: 2019-11-19 00:08:36\ntags:\n- dfs\n- dynamic programming\ncategories:\n- LeetCode\ncomments: true\n---\n# Intuition && Algorithm\nIt's `dfs`+`dynamic programming` problem. To get all the possible combination adding up to the target, we need to solve several subproblems. Before all, let's think about when will there be no solution set for this problem. The naive idea is to sort the array, if the first number is less than target there will be no solution.\n\nLet's look at an example and see how to solve it.\n> Input: candidates = [2,3,6,7], target = 7, \n<br/>A solution set is:\n[\n  [7],\n  [2,2,3]\n]\n\nFirst, suppose there is a `2` in one possible solution(one path if considering dfs), and then we need to solve a combination sum of target `5`(7-2=5) and the same candidates problem. When the target is equal to one candidate, we find a solution(path). But if this target is smaller than the first value, then this is not a possible solution. We can use a formula to describe this solution.\n\n$$S(target)=S(target-candidate[0])+S(target-candidate[1])+...+S(target-candidate[n])$$\n\n$S(i)$ denotes a solution set, it can be empty.\n\nBy far, this is a typic process for solving `dfs`+`dynamic programming` problem. But we ignored one import thing, the solutions in solution set can't be duplicated. For the example above, $S(7)=S(5)+S(4)+S(1)+[7]$, and $S(5)=[2,3]$ $S(4)=[2,2]$, both of them give the same solution indeed $[2,2,3]=[3,2,2]$. Duplicated solution occurs because we can choose value in any sequence. If we are only allowed to choose them in non-decreasing order, duplicates can be avoided. In this case only $[2,2,3]$ is allowed.\n# Code\n```\nclass Solution {\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        Arrays.sort(candidates);\n        return findSolutionSet(candidates, target, 0);\n    }\n    private List<List<Integer>> findSolutionSet(int[] candidates, int target, int pre){\n        List<List<Integer>> ans = new ArrayList<>();\n        // terminate condition\n        if(target < candidates[0])\n            return ans;\n        for(int i = 0; i < candidates.length; i++){           \n            int cur = candidates[i];\n            if(cur < target && cur >= pre){\n                List<List<Integer>> preRes = findSolutionSet(candidates, target - cur, cur);\n                if(preRes.size() > 0){\n                    for(List<Integer> r: preRes){\n                        r.add(cur);\n                        ans.add(r);\n                    }\n                }\n            }\n            else if(cur == target && cur >= pre){\n                List<Integer> t = new ArrayList<>();\n                t.add(cur);\n                ans.add(t);\n\n            }\n        }\n        return ans;\n    }\n}\n```\n\n# Complexity\n\n**Time Complexity:** Time Complexity for sorting an array is $O(nlogn)$ and for dynamic programming portion it's about $O(n^{target})$. You can get the approximate time complexity from the equation for solving this problem above, all the possible solutions construct a tree. \n\n**Space Complexity:** From the equation above, we can simply think it as $O(target)$ since the solution set has `target` member in the worst case.\n","slug":"39-Combination-Sum","published":1,"updated":"2019-11-18T16:15:45.678Z","layout":"post","photos":[],"link":"","_id":"ck3gx4mz8000btkbsaex5w4r2","content":"<h1 id=\"Intuition-amp-amp-Algorithm\"><a href=\"#Intuition-amp-amp-Algorithm\" class=\"headerlink\" title=\"Intuition &amp;&amp; Algorithm\"></a>Intuition &amp;&amp; Algorithm</h1><p>It’s <code>dfs</code>+<code>dynamic programming</code> problem. To get all the possible combination adding up to the target, we need to solve several subproblems. Before all, let’s think about when will there be no solution set for this problem. The naive idea is to sort the array, if the first number is less than target there will be no solution.</p>\n<p>Let’s look at an example and see how to solve it.</p>\n<blockquote>\n<p>Input: candidates = [2,3,6,7], target = 7,<br><br>A solution set is:<br>[<br>  [7],<br>  [2,2,3]<br>]</p>\n</blockquote>\n<p>First, suppose there is a <code>2</code> in one possible solution(one path if considering dfs), and then we need to solve a combination sum of target <code>5</code>(7-2=5) and the same candidates problem. When the target is equal to one candidate, we find a solution(path). But if this target is smaller than the first value, then this is not a possible solution. We can use a formula to describe this solution.</p>\n<script type=\"math/tex; mode=display\">S(target)=S(target-candidate[0])+S(target-candidate[1])+...+S(target-candidate[n])</script><p>$S(i)$ denotes a solution set, it can be empty.</p>\n<p>By far, this is a typic process for solving <code>dfs</code>+<code>dynamic programming</code> problem. But we ignored one import thing, the solutions in solution set can’t be duplicated. For the example above, $S(7)=S(5)+S(4)+S(1)+[7]$, and $S(5)=[2,3]$ $S(4)=[2,2]$, both of them give the same solution indeed $[2,2,3]=[3,2,2]$. Duplicated solution occurs because we can choose value in any sequence. If we are only allowed to choose them in non-decreasing order, duplicates can be avoided. In this case only $[2,2,3]$ is allowed.</p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public List&lt;List&lt;Integer&gt;&gt; combinationSum(int[] candidates, int target) &#123;</span><br><span class=\"line\">        Arrays.sort(candidates);</span><br><span class=\"line\">        return findSolutionSet(candidates, target, 0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private List&lt;List&lt;Integer&gt;&gt; findSolutionSet(int[] candidates, int target, int pre)&#123;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        // terminate condition</span><br><span class=\"line\">        if(target &lt; candidates[0])</span><br><span class=\"line\">            return ans;</span><br><span class=\"line\">        for(int i = 0; i &lt; candidates.length; i++)&#123;           </span><br><span class=\"line\">            int cur = candidates[i];</span><br><span class=\"line\">            if(cur &lt; target &amp;&amp; cur &gt;= pre)&#123;</span><br><span class=\"line\">                List&lt;List&lt;Integer&gt;&gt; preRes = findSolutionSet(candidates, target - cur, cur);</span><br><span class=\"line\">                if(preRes.size() &gt; 0)&#123;</span><br><span class=\"line\">                    for(List&lt;Integer&gt; r: preRes)&#123;</span><br><span class=\"line\">                        r.add(cur);</span><br><span class=\"line\">                        ans.add(r);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else if(cur == target &amp;&amp; cur &gt;= pre)&#123;</span><br><span class=\"line\">                List&lt;Integer&gt; t = new ArrayList&lt;&gt;();</span><br><span class=\"line\">                t.add(cur);</span><br><span class=\"line\">                ans.add(t);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> Time Complexity for sorting an array is $O(nlogn)$ and for dynamic programming portion it’s about $O(n^{target})$. You can get the approximate time complexity from the equation for solving this problem above, all the possible solutions construct a tree. </p>\n<p><strong>Space Complexity:</strong> From the equation above, we can simply think it as $O(target)$ since the solution set has <code>target</code> member in the worst case.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Intuition-amp-amp-Algorithm\"><a href=\"#Intuition-amp-amp-Algorithm\" class=\"headerlink\" title=\"Intuition &amp;&amp; Algorithm\"></a>Intuition &amp;&amp; Algorithm</h1><p>It’s <code>dfs</code>+<code>dynamic programming</code> problem. To get all the possible combination adding up to the target, we need to solve several subproblems. Before all, let’s think about when will there be no solution set for this problem. The naive idea is to sort the array, if the first number is less than target there will be no solution.</p>\n<p>Let’s look at an example and see how to solve it.</p>\n<blockquote>\n<p>Input: candidates = [2,3,6,7], target = 7,<br><br>A solution set is:<br>[<br>  [7],<br>  [2,2,3]<br>]</p>\n</blockquote>\n<p>First, suppose there is a <code>2</code> in one possible solution(one path if considering dfs), and then we need to solve a combination sum of target <code>5</code>(7-2=5) and the same candidates problem. When the target is equal to one candidate, we find a solution(path). But if this target is smaller than the first value, then this is not a possible solution. We can use a formula to describe this solution.</p>\n<script type=\"math/tex; mode=display\">S(target)=S(target-candidate[0])+S(target-candidate[1])+...+S(target-candidate[n])</script><p>$S(i)$ denotes a solution set, it can be empty.</p>\n<p>By far, this is a typic process for solving <code>dfs</code>+<code>dynamic programming</code> problem. But we ignored one import thing, the solutions in solution set can’t be duplicated. For the example above, $S(7)=S(5)+S(4)+S(1)+[7]$, and $S(5)=[2,3]$ $S(4)=[2,2]$, both of them give the same solution indeed $[2,2,3]=[3,2,2]$. Duplicated solution occurs because we can choose value in any sequence. If we are only allowed to choose them in non-decreasing order, duplicates can be avoided. In this case only $[2,2,3]$ is allowed.</p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public List&lt;List&lt;Integer&gt;&gt; combinationSum(int[] candidates, int target) &#123;</span><br><span class=\"line\">        Arrays.sort(candidates);</span><br><span class=\"line\">        return findSolutionSet(candidates, target, 0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private List&lt;List&lt;Integer&gt;&gt; findSolutionSet(int[] candidates, int target, int pre)&#123;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        // terminate condition</span><br><span class=\"line\">        if(target &lt; candidates[0])</span><br><span class=\"line\">            return ans;</span><br><span class=\"line\">        for(int i = 0; i &lt; candidates.length; i++)&#123;           </span><br><span class=\"line\">            int cur = candidates[i];</span><br><span class=\"line\">            if(cur &lt; target &amp;&amp; cur &gt;= pre)&#123;</span><br><span class=\"line\">                List&lt;List&lt;Integer&gt;&gt; preRes = findSolutionSet(candidates, target - cur, cur);</span><br><span class=\"line\">                if(preRes.size() &gt; 0)&#123;</span><br><span class=\"line\">                    for(List&lt;Integer&gt; r: preRes)&#123;</span><br><span class=\"line\">                        r.add(cur);</span><br><span class=\"line\">                        ans.add(r);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else if(cur == target &amp;&amp; cur &gt;= pre)&#123;</span><br><span class=\"line\">                List&lt;Integer&gt; t = new ArrayList&lt;&gt;();</span><br><span class=\"line\">                t.add(cur);</span><br><span class=\"line\">                ans.add(t);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> Time Complexity for sorting an array is $O(nlogn)$ and for dynamic programming portion it’s about $O(n^{target})$. You can get the approximate time complexity from the equation for solving this problem above, all the possible solutions construct a tree. </p>\n<p><strong>Space Complexity:</strong> From the equation above, we can simply think it as $O(target)$ since the solution set has <code>target</code> member in the worst case.</p>\n"},{"title":"377 Combination Sum IV","date":"2019-11-20T05:42:42.000Z","comments":1,"_content":"# Intuition & Algorithm\nAt the first glampse of this question, I write down the dfs algorithm immediately. It works of course, but will encounter the `Time Exceed` error. The problem here is \nit costs too much time to search all the possible paths, there are duplicates. For example:\n> [1, 2, 3] target=6\n\nwhen we have picked 1 and 2, we need to find a combination summing to 3. When we have picked 3, again we need to find a combination whose sum is 3. So we do this subproblem multiple times\n> [1,2,3] target=3\n\nIt reminds us that dynamic programming can be used here. The state transition equation is:\n\n$$dp[target] = dp[target-nums[0]]+dp[target-nums[1]]+...+dp[target-nums[n]]$$\n\n\n# Code\n```\nclass Solution {\n\n    public int combinationSum4(int[] nums, int target) {\n        Arrays.sort(nums);\n        if(nums.length == 0 || nums[0] > target)\n            return 0;\n        int[] dp = new int[target + 1];\n        dp[nums[0]] = 1;\n        dp[0] = 1;\n        for(int i = nums[0]+1; i <= target;i++){\n            for(int j = 0; j < nums.length; j++){\n                if(i < nums[j])break;\n                dp[i] += dp[i-nums[j]];\n            } \n        }\n        return dp[target];\n    }\n   \n}\n```\n\n# Complexity\n**Time Complexity:** $O(target*n)$ Outter for loop iterates from nums[0] to target and inner for loop iterates over the array.\n\n**Space Complexity:** $O(target)$ The cost of `dp` arrray. \n","source":"_posts/377-Combination-Sum-IV.md","raw":"---\ntitle: 377 Combination Sum IV\ndate: 2019-11-20 13:42:42\ntags:\n- dynamic programming\ncategories:\n- LeetCode\ncomments: true\n---\n# Intuition & Algorithm\nAt the first glampse of this question, I write down the dfs algorithm immediately. It works of course, but will encounter the `Time Exceed` error. The problem here is \nit costs too much time to search all the possible paths, there are duplicates. For example:\n> [1, 2, 3] target=6\n\nwhen we have picked 1 and 2, we need to find a combination summing to 3. When we have picked 3, again we need to find a combination whose sum is 3. So we do this subproblem multiple times\n> [1,2,3] target=3\n\nIt reminds us that dynamic programming can be used here. The state transition equation is:\n\n$$dp[target] = dp[target-nums[0]]+dp[target-nums[1]]+...+dp[target-nums[n]]$$\n\n\n# Code\n```\nclass Solution {\n\n    public int combinationSum4(int[] nums, int target) {\n        Arrays.sort(nums);\n        if(nums.length == 0 || nums[0] > target)\n            return 0;\n        int[] dp = new int[target + 1];\n        dp[nums[0]] = 1;\n        dp[0] = 1;\n        for(int i = nums[0]+1; i <= target;i++){\n            for(int j = 0; j < nums.length; j++){\n                if(i < nums[j])break;\n                dp[i] += dp[i-nums[j]];\n            } \n        }\n        return dp[target];\n    }\n   \n}\n```\n\n# Complexity\n**Time Complexity:** $O(target*n)$ Outter for loop iterates from nums[0] to target and inner for loop iterates over the array.\n\n**Space Complexity:** $O(target)$ The cost of `dp` arrray. \n","slug":"377-Combination-Sum-IV","published":1,"updated":"2019-11-20T05:44:47.905Z","layout":"post","photos":[],"link":"","_id":"ck3gx4mzb000ctkbsda3mx7a3","content":"<h1 id=\"Intuition-amp-Algorithm\"><a href=\"#Intuition-amp-Algorithm\" class=\"headerlink\" title=\"Intuition &amp; Algorithm\"></a>Intuition &amp; Algorithm</h1><p>At the first glampse of this question, I write down the dfs algorithm immediately. It works of course, but will encounter the <code>Time Exceed</code> error. The problem here is<br>it costs too much time to search all the possible paths, there are duplicates. For example:</p>\n<blockquote>\n<p>[1, 2, 3] target=6</p>\n</blockquote>\n<p>when we have picked 1 and 2, we need to find a combination summing to 3. When we have picked 3, again we need to find a combination whose sum is 3. So we do this subproblem multiple times</p>\n<blockquote>\n<p>[1,2,3] target=3</p>\n</blockquote>\n<p>It reminds us that dynamic programming can be used here. The state transition equation is:</p>\n<script type=\"math/tex; mode=display\">dp[target] = dp[target-nums[0]]+dp[target-nums[1]]+...+dp[target-nums[n]]</script><h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int combinationSum4(int[] nums, int target) &#123;</span><br><span class=\"line\">        Arrays.sort(nums);</span><br><span class=\"line\">        if(nums.length == 0 || nums[0] &gt; target)</span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        int[] dp = new int[target + 1];</span><br><span class=\"line\">        dp[nums[0]] = 1;</span><br><span class=\"line\">        dp[0] = 1;</span><br><span class=\"line\">        for(int i = nums[0]+1; i &lt;= target;i++)&#123;</span><br><span class=\"line\">            for(int j = 0; j &lt; nums.length; j++)&#123;</span><br><span class=\"line\">                if(i &lt; nums[j])break;</span><br><span class=\"line\">                dp[i] += dp[i-nums[j]];</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dp[target];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> $O(target*n)$ Outter for loop iterates from nums[0] to target and inner for loop iterates over the array.</p>\n<p><strong>Space Complexity:</strong> $O(target)$ The cost of <code>dp</code> arrray. </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Intuition-amp-Algorithm\"><a href=\"#Intuition-amp-Algorithm\" class=\"headerlink\" title=\"Intuition &amp; Algorithm\"></a>Intuition &amp; Algorithm</h1><p>At the first glampse of this question, I write down the dfs algorithm immediately. It works of course, but will encounter the <code>Time Exceed</code> error. The problem here is<br>it costs too much time to search all the possible paths, there are duplicates. For example:</p>\n<blockquote>\n<p>[1, 2, 3] target=6</p>\n</blockquote>\n<p>when we have picked 1 and 2, we need to find a combination summing to 3. When we have picked 3, again we need to find a combination whose sum is 3. So we do this subproblem multiple times</p>\n<blockquote>\n<p>[1,2,3] target=3</p>\n</blockquote>\n<p>It reminds us that dynamic programming can be used here. The state transition equation is:</p>\n<script type=\"math/tex; mode=display\">dp[target] = dp[target-nums[0]]+dp[target-nums[1]]+...+dp[target-nums[n]]</script><h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int combinationSum4(int[] nums, int target) &#123;</span><br><span class=\"line\">        Arrays.sort(nums);</span><br><span class=\"line\">        if(nums.length == 0 || nums[0] &gt; target)</span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        int[] dp = new int[target + 1];</span><br><span class=\"line\">        dp[nums[0]] = 1;</span><br><span class=\"line\">        dp[0] = 1;</span><br><span class=\"line\">        for(int i = nums[0]+1; i &lt;= target;i++)&#123;</span><br><span class=\"line\">            for(int j = 0; j &lt; nums.length; j++)&#123;</span><br><span class=\"line\">                if(i &lt; nums[j])break;</span><br><span class=\"line\">                dp[i] += dp[i-nums[j]];</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dp[target];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> $O(target*n)$ Outter for loop iterates from nums[0] to target and inner for loop iterates over the array.</p>\n<p><strong>Space Complexity:</strong> $O(target)$ The cost of <code>dp</code> arrray. </p>\n"},{"title":"47 Permutations II","date":"2019-11-15T16:34:52.000Z","comments":1,"_content":"# Intuition & Algorithm\nRecall how we get permutations for numbers without duplication: for each permutation in last solution set, we insert the new number to all possible places. We won't have any duplicated new permutation in this case. But if we insert a number that have been in the permutation, we may get duplicated new permutation. Here are two example:\n\n`[2,2,1]` For this permutation, we want to insert value 1 in the first, second until the last place, that will give us new permutations: [1,2,2,1], [2,1,2,1], [2,2,1,1] [2,2,1,1]. Notice the last two permutation, we get two duplicated permutation because we try to insert a value before and after another value, and they are equal, so we get equal permutation. In this case, we try to insert 1 before 1 and after 1, both of them will get `1,1`. So we can use a flag to record the last value we inserted before, if it's equal to the value we want to insert, we shouldn't insert the value after it.\n\n`[2,1,1], [1,2,1]` In this case, we want to insert value 2 into two permutations. If we insert 2 into the third place of the first permutation, this will give us `[2,1,2,1]`. If we insert 2 into the first place of the second permutation, we still get `[2,1,2,1]`. The insertion of the second permutation shouldn't start from the first place, actually it should start before the last position of 2 instead. The reason here is if we insert before the last 2, and then we remove last 2 from the permutation, we will get an old permutation that already exist. In this case, we insert 2 in the first place , we get `[2,1,2,1]`, and then we remove last 2, it becomes `[2,1,1]`! This means we can get `[2,1,2,1]` from `[2,1,1]` by insert 2 between two 1s.So compared to the normal permutation problem, we should start from the last index of the value to be inserted instead of 0.\n# Code\n```\nclass Solution {\n    public List<List<Integer>> permuteUnique(int[] nums) {\n        List<List<Integer>> ans = new ArrayList<>();\n        if(nums.length == 0) return ans;\n        List<Integer> t = new ArrayList<>();\n        t.add(nums[0]);\n        ans.add(t);\n        for(int i = 1 ; i < nums.length; i++){\n            List<List<Integer>> curAns = new ArrayList<>();\n            for(List<Integer> ele : ans){\n                int flag = Integer.MIN_VALUE;\n                int k = Math.max(0, ele.lastIndexOf(nums[i]));\n                for(int j = k; j <= i; j++){\n                    if(nums[i] != flag){\n                        List<Integer> copy = new ArrayList<>();\n                        copy.addAll(ele);\n                        copy.add(j, nums[i]);\n                        curAns.add(copy);\n                    }\n                    if(j != i)\n                    flag = ele.get(j);\n                }\n            }\n            ans = curAns;\n        }\n        return ans;\n    }\n}\n```\n# Complexity\n**Time Complexity:** $O(n!)$\n\n**Space Complexity:** $O(n!)$\n\nSee the analysis in `46 permutation`, they are similar, we only add two conditions in this solution.\n\n","source":"_posts/47-Permutations-II.md","raw":"---\ntitle: 47 Permutations II\ndate: 2019-11-16 00:34:52\ncategories:\n- LeetCode\ncomments: true\ntags:\n- backtracking\n- dynamic programming\n- review\n---\n# Intuition & Algorithm\nRecall how we get permutations for numbers without duplication: for each permutation in last solution set, we insert the new number to all possible places. We won't have any duplicated new permutation in this case. But if we insert a number that have been in the permutation, we may get duplicated new permutation. Here are two example:\n\n`[2,2,1]` For this permutation, we want to insert value 1 in the first, second until the last place, that will give us new permutations: [1,2,2,1], [2,1,2,1], [2,2,1,1] [2,2,1,1]. Notice the last two permutation, we get two duplicated permutation because we try to insert a value before and after another value, and they are equal, so we get equal permutation. In this case, we try to insert 1 before 1 and after 1, both of them will get `1,1`. So we can use a flag to record the last value we inserted before, if it's equal to the value we want to insert, we shouldn't insert the value after it.\n\n`[2,1,1], [1,2,1]` In this case, we want to insert value 2 into two permutations. If we insert 2 into the third place of the first permutation, this will give us `[2,1,2,1]`. If we insert 2 into the first place of the second permutation, we still get `[2,1,2,1]`. The insertion of the second permutation shouldn't start from the first place, actually it should start before the last position of 2 instead. The reason here is if we insert before the last 2, and then we remove last 2 from the permutation, we will get an old permutation that already exist. In this case, we insert 2 in the first place , we get `[2,1,2,1]`, and then we remove last 2, it becomes `[2,1,1]`! This means we can get `[2,1,2,1]` from `[2,1,1]` by insert 2 between two 1s.So compared to the normal permutation problem, we should start from the last index of the value to be inserted instead of 0.\n# Code\n```\nclass Solution {\n    public List<List<Integer>> permuteUnique(int[] nums) {\n        List<List<Integer>> ans = new ArrayList<>();\n        if(nums.length == 0) return ans;\n        List<Integer> t = new ArrayList<>();\n        t.add(nums[0]);\n        ans.add(t);\n        for(int i = 1 ; i < nums.length; i++){\n            List<List<Integer>> curAns = new ArrayList<>();\n            for(List<Integer> ele : ans){\n                int flag = Integer.MIN_VALUE;\n                int k = Math.max(0, ele.lastIndexOf(nums[i]));\n                for(int j = k; j <= i; j++){\n                    if(nums[i] != flag){\n                        List<Integer> copy = new ArrayList<>();\n                        copy.addAll(ele);\n                        copy.add(j, nums[i]);\n                        curAns.add(copy);\n                    }\n                    if(j != i)\n                    flag = ele.get(j);\n                }\n            }\n            ans = curAns;\n        }\n        return ans;\n    }\n}\n```\n# Complexity\n**Time Complexity:** $O(n!)$\n\n**Space Complexity:** $O(n!)$\n\nSee the analysis in `46 permutation`, they are similar, we only add two conditions in this solution.\n\n","slug":"47-Permutations-II","published":1,"updated":"2019-11-15T16:39:55.226Z","layout":"post","photos":[],"link":"","_id":"ck3gx4n11000gtkbs2677pldo","content":"<h1 id=\"Intuition-amp-Algorithm\"><a href=\"#Intuition-amp-Algorithm\" class=\"headerlink\" title=\"Intuition &amp; Algorithm\"></a>Intuition &amp; Algorithm</h1><p>Recall how we get permutations for numbers without duplication: for each permutation in last solution set, we insert the new number to all possible places. We won’t have any duplicated new permutation in this case. But if we insert a number that have been in the permutation, we may get duplicated new permutation. Here are two example:</p>\n<p><code>[2,2,1]</code> For this permutation, we want to insert value 1 in the first, second until the last place, that will give us new permutations: [1,2,2,1], [2,1,2,1], [2,2,1,1] [2,2,1,1]. Notice the last two permutation, we get two duplicated permutation because we try to insert a value before and after another value, and they are equal, so we get equal permutation. In this case, we try to insert 1 before 1 and after 1, both of them will get <code>1,1</code>. So we can use a flag to record the last value we inserted before, if it’s equal to the value we want to insert, we shouldn’t insert the value after it.</p>\n<p><code>[2,1,1], [1,2,1]</code> In this case, we want to insert value 2 into two permutations. If we insert 2 into the third place of the first permutation, this will give us <code>[2,1,2,1]</code>. If we insert 2 into the first place of the second permutation, we still get <code>[2,1,2,1]</code>. The insertion of the second permutation shouldn’t start from the first place, actually it should start before the last position of 2 instead. The reason here is if we insert before the last 2, and then we remove last 2 from the permutation, we will get an old permutation that already exist. In this case, we insert 2 in the first place , we get <code>[2,1,2,1]</code>, and then we remove last 2, it becomes <code>[2,1,1]</code>! This means we can get <code>[2,1,2,1]</code> from <code>[2,1,1]</code> by insert 2 between two 1s.So compared to the normal permutation problem, we should start from the last index of the value to be inserted instead of 0.</p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public List&lt;List&lt;Integer&gt;&gt; permuteUnique(int[] nums) &#123;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        if(nums.length == 0) return ans;</span><br><span class=\"line\">        List&lt;Integer&gt; t = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        t.add(nums[0]);</span><br><span class=\"line\">        ans.add(t);</span><br><span class=\"line\">        for(int i = 1 ; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">            List&lt;List&lt;Integer&gt;&gt; curAns = new ArrayList&lt;&gt;();</span><br><span class=\"line\">            for(List&lt;Integer&gt; ele : ans)&#123;</span><br><span class=\"line\">                int flag = Integer.MIN_VALUE;</span><br><span class=\"line\">                int k = Math.max(0, ele.lastIndexOf(nums[i]));</span><br><span class=\"line\">                for(int j = k; j &lt;= i; j++)&#123;</span><br><span class=\"line\">                    if(nums[i] != flag)&#123;</span><br><span class=\"line\">                        List&lt;Integer&gt; copy = new ArrayList&lt;&gt;();</span><br><span class=\"line\">                        copy.addAll(ele);</span><br><span class=\"line\">                        copy.add(j, nums[i]);</span><br><span class=\"line\">                        curAns.add(copy);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    if(j != i)</span><br><span class=\"line\">                    flag = ele.get(j);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans = curAns;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> $O(n!)$</p>\n<p><strong>Space Complexity:</strong> $O(n!)$</p>\n<p>See the analysis in <code>46 permutation</code>, they are similar, we only add two conditions in this solution.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Intuition-amp-Algorithm\"><a href=\"#Intuition-amp-Algorithm\" class=\"headerlink\" title=\"Intuition &amp; Algorithm\"></a>Intuition &amp; Algorithm</h1><p>Recall how we get permutations for numbers without duplication: for each permutation in last solution set, we insert the new number to all possible places. We won’t have any duplicated new permutation in this case. But if we insert a number that have been in the permutation, we may get duplicated new permutation. Here are two example:</p>\n<p><code>[2,2,1]</code> For this permutation, we want to insert value 1 in the first, second until the last place, that will give us new permutations: [1,2,2,1], [2,1,2,1], [2,2,1,1] [2,2,1,1]. Notice the last two permutation, we get two duplicated permutation because we try to insert a value before and after another value, and they are equal, so we get equal permutation. In this case, we try to insert 1 before 1 and after 1, both of them will get <code>1,1</code>. So we can use a flag to record the last value we inserted before, if it’s equal to the value we want to insert, we shouldn’t insert the value after it.</p>\n<p><code>[2,1,1], [1,2,1]</code> In this case, we want to insert value 2 into two permutations. If we insert 2 into the third place of the first permutation, this will give us <code>[2,1,2,1]</code>. If we insert 2 into the first place of the second permutation, we still get <code>[2,1,2,1]</code>. The insertion of the second permutation shouldn’t start from the first place, actually it should start before the last position of 2 instead. The reason here is if we insert before the last 2, and then we remove last 2 from the permutation, we will get an old permutation that already exist. In this case, we insert 2 in the first place , we get <code>[2,1,2,1]</code>, and then we remove last 2, it becomes <code>[2,1,1]</code>! This means we can get <code>[2,1,2,1]</code> from <code>[2,1,1]</code> by insert 2 between two 1s.So compared to the normal permutation problem, we should start from the last index of the value to be inserted instead of 0.</p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public List&lt;List&lt;Integer&gt;&gt; permuteUnique(int[] nums) &#123;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        if(nums.length == 0) return ans;</span><br><span class=\"line\">        List&lt;Integer&gt; t = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        t.add(nums[0]);</span><br><span class=\"line\">        ans.add(t);</span><br><span class=\"line\">        for(int i = 1 ; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">            List&lt;List&lt;Integer&gt;&gt; curAns = new ArrayList&lt;&gt;();</span><br><span class=\"line\">            for(List&lt;Integer&gt; ele : ans)&#123;</span><br><span class=\"line\">                int flag = Integer.MIN_VALUE;</span><br><span class=\"line\">                int k = Math.max(0, ele.lastIndexOf(nums[i]));</span><br><span class=\"line\">                for(int j = k; j &lt;= i; j++)&#123;</span><br><span class=\"line\">                    if(nums[i] != flag)&#123;</span><br><span class=\"line\">                        List&lt;Integer&gt; copy = new ArrayList&lt;&gt;();</span><br><span class=\"line\">                        copy.addAll(ele);</span><br><span class=\"line\">                        copy.add(j, nums[i]);</span><br><span class=\"line\">                        curAns.add(copy);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    if(j != i)</span><br><span class=\"line\">                    flag = ele.get(j);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans = curAns;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> $O(n!)$</p>\n<p><strong>Space Complexity:</strong> $O(n!)$</p>\n<p>See the analysis in <code>46 permutation</code>, they are similar, we only add two conditions in this solution.</p>\n"},{"title":"46 Permutations","date":"2019-11-15T16:34:37.000Z","comments":1,"_content":"# Intuition & Algorithm\nIt's a dynamic programming question. Suppose we have get the permutations of i number, the `i+1`th number will be added to the previous solution set. For Each permution in the previous solution set, the `i+1`th number can be added to the first place, the second place,... or the last place. These new permutations will be added to the new solution set, and then add `i+2`th number. It's a little sophiscated to describe the state transition equation, so we will go through an example instead.\n\n> Given Numbers: [1,2,3]\n> The change of solution set:\n> 1. [[1]]\n> 2. [[2,1], [1,2]]\n> 3. [[3,2,1], [2,3,1], [2,1,3], [3,1,2], [1,3,2], [1,2,3]]\n\n# Code\n```\nclass Solution {\n    public List<List<Integer>> permute(int[] nums) {\n        List<List<Integer>> ans = new ArrayList<List<Integer>>();\n        if(nums.length == 0) return ans;\n        List<Integer> temp = new ArrayList<>();\n        temp.add(nums[0]);\n        ans.add(temp);\n        \n        for(int i = 1; i < nums.length; i++){\n            List<List<Integer>> curAns = new ArrayList<List<Integer>>();\n            for(List<Integer> ele: ans){\n                for(int j = 0; j <= ele.size(); j++){\n                    List<Integer> data = new ArrayList<>();\n                    data.addAll(ele);\n                    /*\n                    for(int k = 0; k< ele.size(); k++){\n                        data.add(0);\n                    }\n                    Collections.copy(data, ele);*/\n                    data.add(j, nums[i]);\n                    curAns.add(data);\n                }\n            }\n            ans = curAns;\n        }\n        return ans;\n    }\n}\n```\n# Complexity\n\n**Time Complexity:** See the code above, when i = 1, the size of `ans` is 1 and the size of `ele` is 1. When i = n-1, `ans` size is (n-1)! and the size of `ele` is n-1. So the entire time complexity is $T(n)=1*1 + 2 * 2 + ...+ (n-1)!(n-1) $, it's about $O(n!)$\n\n**Space Complexity:** $O(n!)$ for storing all the permutations\n","source":"_posts/46-Permutations.md","raw":"---\ntitle: 46 Permutations\ndate: 2019-11-16 00:34:37\ncategories:\n- LeetCode\ncomments: true\ntags:\n- backtracking\n- dynamic programming\n---\n# Intuition & Algorithm\nIt's a dynamic programming question. Suppose we have get the permutations of i number, the `i+1`th number will be added to the previous solution set. For Each permution in the previous solution set, the `i+1`th number can be added to the first place, the second place,... or the last place. These new permutations will be added to the new solution set, and then add `i+2`th number. It's a little sophiscated to describe the state transition equation, so we will go through an example instead.\n\n> Given Numbers: [1,2,3]\n> The change of solution set:\n> 1. [[1]]\n> 2. [[2,1], [1,2]]\n> 3. [[3,2,1], [2,3,1], [2,1,3], [3,1,2], [1,3,2], [1,2,3]]\n\n# Code\n```\nclass Solution {\n    public List<List<Integer>> permute(int[] nums) {\n        List<List<Integer>> ans = new ArrayList<List<Integer>>();\n        if(nums.length == 0) return ans;\n        List<Integer> temp = new ArrayList<>();\n        temp.add(nums[0]);\n        ans.add(temp);\n        \n        for(int i = 1; i < nums.length; i++){\n            List<List<Integer>> curAns = new ArrayList<List<Integer>>();\n            for(List<Integer> ele: ans){\n                for(int j = 0; j <= ele.size(); j++){\n                    List<Integer> data = new ArrayList<>();\n                    data.addAll(ele);\n                    /*\n                    for(int k = 0; k< ele.size(); k++){\n                        data.add(0);\n                    }\n                    Collections.copy(data, ele);*/\n                    data.add(j, nums[i]);\n                    curAns.add(data);\n                }\n            }\n            ans = curAns;\n        }\n        return ans;\n    }\n}\n```\n# Complexity\n\n**Time Complexity:** See the code above, when i = 1, the size of `ans` is 1 and the size of `ele` is 1. When i = n-1, `ans` size is (n-1)! and the size of `ele` is n-1. So the entire time complexity is $T(n)=1*1 + 2 * 2 + ...+ (n-1)!(n-1) $, it's about $O(n!)$\n\n**Space Complexity:** $O(n!)$ for storing all the permutations\n","slug":"46-Permutations","published":1,"updated":"2019-11-15T16:38:32.726Z","layout":"post","photos":[],"link":"","_id":"ck3gx4n14000itkbsht89kjjv","content":"<h1 id=\"Intuition-amp-Algorithm\"><a href=\"#Intuition-amp-Algorithm\" class=\"headerlink\" title=\"Intuition &amp; Algorithm\"></a>Intuition &amp; Algorithm</h1><p>It’s a dynamic programming question. Suppose we have get the permutations of i number, the <code>i+1</code>th number will be added to the previous solution set. For Each permution in the previous solution set, the <code>i+1</code>th number can be added to the first place, the second place,… or the last place. These new permutations will be added to the new solution set, and then add <code>i+2</code>th number. It’s a little sophiscated to describe the state transition equation, so we will go through an example instead.</p>\n<blockquote>\n<p>Given Numbers: [1,2,3]<br>The change of solution set:</p>\n<ol>\n<li>[[1]]</li>\n<li>[[2,1], [1,2]]</li>\n<li>[[3,2,1], [2,3,1], [2,1,3], [3,1,2], [1,3,2], [1,2,3]]</li>\n</ol>\n</blockquote>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public List&lt;List&lt;Integer&gt;&gt; permute(int[] nums) &#123;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">        if(nums.length == 0) return ans;</span><br><span class=\"line\">        List&lt;Integer&gt; temp = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        temp.add(nums[0]);</span><br><span class=\"line\">        ans.add(temp);</span><br><span class=\"line\">        </span><br><span class=\"line\">        for(int i = 1; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">            List&lt;List&lt;Integer&gt;&gt; curAns = new ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">            for(List&lt;Integer&gt; ele: ans)&#123;</span><br><span class=\"line\">                for(int j = 0; j &lt;= ele.size(); j++)&#123;</span><br><span class=\"line\">                    List&lt;Integer&gt; data = new ArrayList&lt;&gt;();</span><br><span class=\"line\">                    data.addAll(ele);</span><br><span class=\"line\">                    /*</span><br><span class=\"line\">                    for(int k = 0; k&lt; ele.size(); k++)&#123;</span><br><span class=\"line\">                        data.add(0);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    Collections.copy(data, ele);*/</span><br><span class=\"line\">                    data.add(j, nums[i]);</span><br><span class=\"line\">                    curAns.add(data);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans = curAns;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> See the code above, when i = 1, the size of <code>ans</code> is 1 and the size of <code>ele</code> is 1. When i = n-1, <code>ans</code> size is (n-1)! and the size of <code>ele</code> is n-1. So the entire time complexity is $T(n)=1<em>1 + 2 </em> 2 + …+ (n-1)!(n-1) $, it’s about $O(n!)$</p>\n<p><strong>Space Complexity:</strong> $O(n!)$ for storing all the permutations</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Intuition-amp-Algorithm\"><a href=\"#Intuition-amp-Algorithm\" class=\"headerlink\" title=\"Intuition &amp; Algorithm\"></a>Intuition &amp; Algorithm</h1><p>It’s a dynamic programming question. Suppose we have get the permutations of i number, the <code>i+1</code>th number will be added to the previous solution set. For Each permution in the previous solution set, the <code>i+1</code>th number can be added to the first place, the second place,… or the last place. These new permutations will be added to the new solution set, and then add <code>i+2</code>th number. It’s a little sophiscated to describe the state transition equation, so we will go through an example instead.</p>\n<blockquote>\n<p>Given Numbers: [1,2,3]<br>The change of solution set:</p>\n<ol>\n<li>[[1]]</li>\n<li>[[2,1], [1,2]]</li>\n<li>[[3,2,1], [2,3,1], [2,1,3], [3,1,2], [1,3,2], [1,2,3]]</li>\n</ol>\n</blockquote>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public List&lt;List&lt;Integer&gt;&gt; permute(int[] nums) &#123;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">        if(nums.length == 0) return ans;</span><br><span class=\"line\">        List&lt;Integer&gt; temp = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        temp.add(nums[0]);</span><br><span class=\"line\">        ans.add(temp);</span><br><span class=\"line\">        </span><br><span class=\"line\">        for(int i = 1; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">            List&lt;List&lt;Integer&gt;&gt; curAns = new ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">            for(List&lt;Integer&gt; ele: ans)&#123;</span><br><span class=\"line\">                for(int j = 0; j &lt;= ele.size(); j++)&#123;</span><br><span class=\"line\">                    List&lt;Integer&gt; data = new ArrayList&lt;&gt;();</span><br><span class=\"line\">                    data.addAll(ele);</span><br><span class=\"line\">                    /*</span><br><span class=\"line\">                    for(int k = 0; k&lt; ele.size(); k++)&#123;</span><br><span class=\"line\">                        data.add(0);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    Collections.copy(data, ele);*/</span><br><span class=\"line\">                    data.add(j, nums[i]);</span><br><span class=\"line\">                    curAns.add(data);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans = curAns;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> See the code above, when i = 1, the size of <code>ans</code> is 1 and the size of <code>ele</code> is 1. When i = n-1, <code>ans</code> size is (n-1)! and the size of <code>ele</code> is n-1. So the entire time complexity is $T(n)=1<em>1 + 2 </em> 2 + …+ (n-1)!(n-1) $, it’s about $O(n!)$</p>\n<p><strong>Space Complexity:</strong> $O(n!)$ for storing all the permutations</p>\n"},{"title":"49 Group Anagrams","date":"2019-11-15T16:34:23.000Z","comments":1,"_content":"# Intuition & Algorithm\nThe primitive problem of this question is how to define anagrams. The definition from wikipedia is:\n> An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\nSo if two strings have the same letters neglecting their appearing sequences, they are anagrams. The typical solution is using an array with length 26( since there are only `a-z` in this question) to count how many times each letter has appeared in this word. The time complexity of this question is $O(mn)$ where m is the average length of each string, n is the number of original strings. This is an approximate time complexity, and you can get the accurate by the code below.\n\nSome would like to sort the string(don't forget it's a char sequence) to determine if two strings are anagrams, but that will change the time complexity to $o(mlogm*n)$. Another thing to notice is that you can determine two equal array by `Arrays.toString` method, but `Arrays.hashCode` will work faster, see the details in the discussion of this question.\n\nThere is still one thing we are worry about: will `Arrays.hashCode` arise collision? Here is the implementation of it:\n```\n     *\n     * <p>The value returned by this method is the same value that would be\n     * obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}\n     * method on a {@link List} containing a sequence of {@link Integer}\n     * instances representing the elements of <tt>a</tt> in the same order.\n     * If <tt>a</tt> is <tt>null</tt>, this method returns 0.\n     *\n     * @param a the array whose hash value to compute\n     * @return a content-based hash code for <tt>a</tt>\n     * @since 1.5\n     */\n    public static int hashCode(int a[]) {\n        if (a == null)\n            return 0;\n\n        int result = 1;\n        for (int element : a)\n            result = 31 * result + element;\n\n        return result;\n    }\n```\n\nSuppose the final count array is $a_1, a_2, ..., a_26$, the hashCode we get is:\n\n$$31*(31*(31 * 1 + a_1) + a_2)+...=1*31^{27} + a_1*31^{26}+a_2*31^{25}+...+a_{26}*31^{1}$$\n\nIf all elements in the array is less than 31 and the total sum is less than `Integer.MAX_VALUE`, there will be no collision . We can create a example that will cause collision easily:\n\n`[\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", \"aa\"]`\n\nIn this case, $a_1=1,a_2=31$ and $a_1=2, a_2 = 0$ would get the same hashCode, so these two strings will be classified as anagrams although they are not in fact.\n\n# Code\n```\nclass Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n        HashMap<Integer, List<String>> map = new HashMap<>();\n        for(int i = 0; i < strs.length; i++){\n            Integer key = encode(strs[i]);\n            List<String> entry = map.getOrDefault(key, new ArrayList<>());\n            entry.add(strs[i]);\n            map.put(key, entry);\n        }\n        return new ArrayList<>(map.values());\n    }\n    private static int encode(String input){\n        int[] sta = new int[26];\n        for(Character c: input.toCharArray()){\n            sta[c-97]++;\n        }\n        /*We can use hashCode here, but don't forget the collision case*/\n        return Arrays.toString(sta);\n    }\n}\n```\n# Complexity\n**Time Complexity:** $O(mn)$\n\n**Space Complexity:** $O(mn)$ it's the size of the hashmap storing final answer.\n","source":"_posts/49-Group-Anagrams.md","raw":"---\ntitle: 49 Group Anagrams\ndate: 2019-11-16 00:34:23\ncategories:\n- LeetCode\ncomments: true\ntags:\n- HashMap\n---\n# Intuition & Algorithm\nThe primitive problem of this question is how to define anagrams. The definition from wikipedia is:\n> An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\nSo if two strings have the same letters neglecting their appearing sequences, they are anagrams. The typical solution is using an array with length 26( since there are only `a-z` in this question) to count how many times each letter has appeared in this word. The time complexity of this question is $O(mn)$ where m is the average length of each string, n is the number of original strings. This is an approximate time complexity, and you can get the accurate by the code below.\n\nSome would like to sort the string(don't forget it's a char sequence) to determine if two strings are anagrams, but that will change the time complexity to $o(mlogm*n)$. Another thing to notice is that you can determine two equal array by `Arrays.toString` method, but `Arrays.hashCode` will work faster, see the details in the discussion of this question.\n\nThere is still one thing we are worry about: will `Arrays.hashCode` arise collision? Here is the implementation of it:\n```\n     *\n     * <p>The value returned by this method is the same value that would be\n     * obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}\n     * method on a {@link List} containing a sequence of {@link Integer}\n     * instances representing the elements of <tt>a</tt> in the same order.\n     * If <tt>a</tt> is <tt>null</tt>, this method returns 0.\n     *\n     * @param a the array whose hash value to compute\n     * @return a content-based hash code for <tt>a</tt>\n     * @since 1.5\n     */\n    public static int hashCode(int a[]) {\n        if (a == null)\n            return 0;\n\n        int result = 1;\n        for (int element : a)\n            result = 31 * result + element;\n\n        return result;\n    }\n```\n\nSuppose the final count array is $a_1, a_2, ..., a_26$, the hashCode we get is:\n\n$$31*(31*(31 * 1 + a_1) + a_2)+...=1*31^{27} + a_1*31^{26}+a_2*31^{25}+...+a_{26}*31^{1}$$\n\nIf all elements in the array is less than 31 and the total sum is less than `Integer.MAX_VALUE`, there will be no collision . We can create a example that will cause collision easily:\n\n`[\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", \"aa\"]`\n\nIn this case, $a_1=1,a_2=31$ and $a_1=2, a_2 = 0$ would get the same hashCode, so these two strings will be classified as anagrams although they are not in fact.\n\n# Code\n```\nclass Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n        HashMap<Integer, List<String>> map = new HashMap<>();\n        for(int i = 0; i < strs.length; i++){\n            Integer key = encode(strs[i]);\n            List<String> entry = map.getOrDefault(key, new ArrayList<>());\n            entry.add(strs[i]);\n            map.put(key, entry);\n        }\n        return new ArrayList<>(map.values());\n    }\n    private static int encode(String input){\n        int[] sta = new int[26];\n        for(Character c: input.toCharArray()){\n            sta[c-97]++;\n        }\n        /*We can use hashCode here, but don't forget the collision case*/\n        return Arrays.toString(sta);\n    }\n}\n```\n# Complexity\n**Time Complexity:** $O(mn)$\n\n**Space Complexity:** $O(mn)$ it's the size of the hashmap storing final answer.\n","slug":"49-Group-Anagrams","published":1,"updated":"2019-11-15T16:37:46.230Z","layout":"post","photos":[],"link":"","_id":"ck3gx4n17000ktkbsdjltld5s","content":"<h1 id=\"Intuition-amp-Algorithm\"><a href=\"#Intuition-amp-Algorithm\" class=\"headerlink\" title=\"Intuition &amp; Algorithm\"></a>Intuition &amp; Algorithm</h1><p>The primitive problem of this question is how to define anagrams. The definition from wikipedia is:</p>\n<blockquote>\n<p>An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>\n</blockquote>\n<p>So if two strings have the same letters neglecting their appearing sequences, they are anagrams. The typical solution is using an array with length 26( since there are only <code>a-z</code> in this question) to count how many times each letter has appeared in this word. The time complexity of this question is $O(mn)$ where m is the average length of each string, n is the number of original strings. This is an approximate time complexity, and you can get the accurate by the code below.</p>\n<p>Some would like to sort the string(don’t forget it’s a char sequence) to determine if two strings are anagrams, but that will change the time complexity to $o(mlogm*n)$. Another thing to notice is that you can determine two equal array by <code>Arrays.toString</code> method, but <code>Arrays.hashCode</code> will work faster, see the details in the discussion of this question.</p>\n<p>There is still one thing we are worry about: will <code>Arrays.hashCode</code> arise collision? Here is the implementation of it:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;The value returned by this method is the same value that would be</span><br><span class=\"line\"> * obtained by invoking the &#123;@link List#hashCode() &lt;tt&gt;hashCode&lt;/tt&gt;&#125;</span><br><span class=\"line\"> * method on a &#123;@link List&#125; containing a sequence of &#123;@link Integer&#125;</span><br><span class=\"line\"> * instances representing the elements of &lt;tt&gt;a&lt;/tt&gt; in the same order.</span><br><span class=\"line\"> * If &lt;tt&gt;a&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, this method returns 0.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param a the array whose hash value to compute</span><br><span class=\"line\"> * @return a content-based hash code for &lt;tt&gt;a&lt;/tt&gt;</span><br><span class=\"line\"> * @since 1.5</span><br><span class=\"line\"> */</span><br><span class=\"line\">public static int hashCode(int a[]) &#123;</span><br><span class=\"line\">    if (a == null)</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    int result = 1;</span><br><span class=\"line\">    for (int element : a)</span><br><span class=\"line\">        result = 31 * result + element;</span><br><span class=\"line\"></span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Suppose the final count array is $a_1, a_2, …, a_26$, the hashCode we get is:</p>\n<script type=\"math/tex; mode=display\">31*(31*(31 * 1 + a_1) + a_2)+...=1*31^{27} + a_1*31^{26}+a_2*31^{25}+...+a_{26}*31^{1}</script><p>If all elements in the array is less than 31 and the total sum is less than <code>Integer.MAX_VALUE</code>, there will be no collision . We can create a example that will cause collision easily:</p>\n<p><code>[&quot;abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&quot;, &quot;aa&quot;]</code></p>\n<p>In this case, $a_1=1,a_2=31$ and $a_1=2, a_2 = 0$ would get the same hashCode, so these two strings will be classified as anagrams although they are not in fact.</p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123;</span><br><span class=\"line\">        HashMap&lt;Integer, List&lt;String&gt;&gt; map = new HashMap&lt;&gt;();</span><br><span class=\"line\">        for(int i = 0; i &lt; strs.length; i++)&#123;</span><br><span class=\"line\">            Integer key = encode(strs[i]);</span><br><span class=\"line\">            List&lt;String&gt; entry = map.getOrDefault(key, new ArrayList&lt;&gt;());</span><br><span class=\"line\">            entry.add(strs[i]);</span><br><span class=\"line\">            map.put(key, entry);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return new ArrayList&lt;&gt;(map.values());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private static int encode(String input)&#123;</span><br><span class=\"line\">        int[] sta = new int[26];</span><br><span class=\"line\">        for(Character c: input.toCharArray())&#123;</span><br><span class=\"line\">            sta[c-97]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        /*We can use hashCode here, but don&apos;t forget the collision case*/</span><br><span class=\"line\">        return Arrays.toString(sta);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> $O(mn)$</p>\n<p><strong>Space Complexity:</strong> $O(mn)$ it’s the size of the hashmap storing final answer.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Intuition-amp-Algorithm\"><a href=\"#Intuition-amp-Algorithm\" class=\"headerlink\" title=\"Intuition &amp; Algorithm\"></a>Intuition &amp; Algorithm</h1><p>The primitive problem of this question is how to define anagrams. The definition from wikipedia is:</p>\n<blockquote>\n<p>An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>\n</blockquote>\n<p>So if two strings have the same letters neglecting their appearing sequences, they are anagrams. The typical solution is using an array with length 26( since there are only <code>a-z</code> in this question) to count how many times each letter has appeared in this word. The time complexity of this question is $O(mn)$ where m is the average length of each string, n is the number of original strings. This is an approximate time complexity, and you can get the accurate by the code below.</p>\n<p>Some would like to sort the string(don’t forget it’s a char sequence) to determine if two strings are anagrams, but that will change the time complexity to $o(mlogm*n)$. Another thing to notice is that you can determine two equal array by <code>Arrays.toString</code> method, but <code>Arrays.hashCode</code> will work faster, see the details in the discussion of this question.</p>\n<p>There is still one thing we are worry about: will <code>Arrays.hashCode</code> arise collision? Here is the implementation of it:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;The value returned by this method is the same value that would be</span><br><span class=\"line\"> * obtained by invoking the &#123;@link List#hashCode() &lt;tt&gt;hashCode&lt;/tt&gt;&#125;</span><br><span class=\"line\"> * method on a &#123;@link List&#125; containing a sequence of &#123;@link Integer&#125;</span><br><span class=\"line\"> * instances representing the elements of &lt;tt&gt;a&lt;/tt&gt; in the same order.</span><br><span class=\"line\"> * If &lt;tt&gt;a&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, this method returns 0.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param a the array whose hash value to compute</span><br><span class=\"line\"> * @return a content-based hash code for &lt;tt&gt;a&lt;/tt&gt;</span><br><span class=\"line\"> * @since 1.5</span><br><span class=\"line\"> */</span><br><span class=\"line\">public static int hashCode(int a[]) &#123;</span><br><span class=\"line\">    if (a == null)</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    int result = 1;</span><br><span class=\"line\">    for (int element : a)</span><br><span class=\"line\">        result = 31 * result + element;</span><br><span class=\"line\"></span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Suppose the final count array is $a_1, a_2, …, a_26$, the hashCode we get is:</p>\n<script type=\"math/tex; mode=display\">31*(31*(31 * 1 + a_1) + a_2)+...=1*31^{27} + a_1*31^{26}+a_2*31^{25}+...+a_{26}*31^{1}</script><p>If all elements in the array is less than 31 and the total sum is less than <code>Integer.MAX_VALUE</code>, there will be no collision . We can create a example that will cause collision easily:</p>\n<p><code>[&quot;abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&quot;, &quot;aa&quot;]</code></p>\n<p>In this case, $a_1=1,a_2=31$ and $a_1=2, a_2 = 0$ would get the same hashCode, so these two strings will be classified as anagrams although they are not in fact.</p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123;</span><br><span class=\"line\">        HashMap&lt;Integer, List&lt;String&gt;&gt; map = new HashMap&lt;&gt;();</span><br><span class=\"line\">        for(int i = 0; i &lt; strs.length; i++)&#123;</span><br><span class=\"line\">            Integer key = encode(strs[i]);</span><br><span class=\"line\">            List&lt;String&gt; entry = map.getOrDefault(key, new ArrayList&lt;&gt;());</span><br><span class=\"line\">            entry.add(strs[i]);</span><br><span class=\"line\">            map.put(key, entry);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return new ArrayList&lt;&gt;(map.values());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private static int encode(String input)&#123;</span><br><span class=\"line\">        int[] sta = new int[26];</span><br><span class=\"line\">        for(Character c: input.toCharArray())&#123;</span><br><span class=\"line\">            sta[c-97]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        /*We can use hashCode here, but don&apos;t forget the collision case*/</span><br><span class=\"line\">        return Arrays.toString(sta);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> $O(mn)$</p>\n<p><strong>Space Complexity:</strong> $O(mn)$ it’s the size of the hashmap storing final answer.</p>\n"},{"title":"55 Jump Game","date":"2019-11-04T16:10:24.000Z","_content":"# Intuition & Algorithm\nIt's a typical dynamic programming problem, so we can find three kinds of solution.\n- Recursion\n- Memoization (Optimization of Recursion)\n- Bottom-up (Iteration)\n\nEach element in the array represents the maximum length we can jump and we need to find out if we can reach the last element starting from the first element.\n\n###### 1. Recursion\nThe broute-force solution is  recursion and backtracking. Let's assum the length of the given array `nums[i]` is `n`, and we want to check if we can jump to the last element from position `i`, this process can be represent as following equation:\n\n```\nS(i) = S(i+1) || ... || S(m), m = min(i+k, n), k=nums[i]\n```\n\nSo the problem is seperated into several sub-problems and the terminated case is `S(n-1)=true` since we just stand on the last element. \n\n***Time complexity*** is O(2^n) because we can choose skip each position or not in each possible solution. ***Space comlexcity*** is O(n) consumed by function stack frame.\n\n###### 2. Memoization\nThe problem of recursion is the solution of each subproblem is imutable, but we calculate it multiple times. Say, `S(i) = S(i+1) || S(i+2) || S(i+3)` and `S(i-1) = S(i+1) || S(i+2) `， `S(i+2)` is repeatedly calculated. So we can store each solution `S(i)`, when we need it just return it. For each `i`, we solved `nums[i]` problems, and `nums[i]` is at most `n`, so time complexity is `O(n^2)`. Space comlexity is O(2n) since we need O(n) for stack frame and O(n) for memo table.\n\n###### 3. Bottom-up\nThe top-down recusion process of above solution is redundant. We can first get `S(n-2)` with the precondition `S(n-1) = true` and then get `S(n-3)`, `S(n-2)`...until `S(0)`. This saves the space consumption for stack frame in recursion. Even more, the scale of this problem is not limited by recusion. For instance, the length of the array is 100000, so we need 100000 stack frame in the worst case. Operating system has limited the size of stack frame. Recursion will cause the `stack overflow` error. \n\nThe implementation of bottom-up solution is quite easy too , we can use an array to store the result of the subproblems and update the element from the last to the first. S(0) is the final answer. Time complexity is still O(n^2) and space complexity is O(n).\n\n###### 4. Greedy(Best)\nIn the above solution, we are finding the nearst position that can jump to the last. An clear illustration can be got from the above equation:\n`S(i) = S(i+1) || ... || S(m)` Logic operation `||` will terminated when an operand is true from left to right, that's exactly the **nearst** jumpable position. The neast jumpable position `njp` is `n-1`, we update it as searching from `n-2` to `0`. While at position `i`, if `i+nums[i] < njp`, we can't jump to the nearst jumpable position so we can't jump to the end, otherwise we set position `i` to jumpable and `njp` to `i`.\nTime complexity is O(n) and Space complexity is O(1). This is the best solution for ***Jump Game*** problem.\n# Complexity\nLook up the details in the above section.\n\n###### 1. Recursion\n**Time Complexity:**  O(2^n)\n\n**Space Complexity:**  O(n)\n\n###### 2. Memoization\n**Time Complexity:**  O(n^2)\n\n**Space Complexity:**  O(n)\n\n###### 3. Bottom-up\n**Time Complexity:**  O(n^2)\n\n**Space Complexity:**  O(n)\n\n###### 4. Greedy(Best)\n**Time Complexity:**  O(n)\n\n**Space Complexity:**  O(1)\n\n# Code\n###### 1. Recursion\n```\npublic class Solution {\n    public boolean canJumpFromPosition(int position, int[] nums) {\n        if (position == nums.length - 1) {\n            return true;\n        }\n\n        int furthestJump = Math.min(position + nums[position], nums.length - 1);\n        for (int nextPosition = position + 1; nextPosition <= furthestJump; nextPosition++) {\n            if (canJumpFromPosition(nextPosition, nums)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public boolean canJump(int[] nums) {\n        return canJumpFromPosition(0, nums);\n    }\n}\n```\n\n###### 2. Memoization\n```\n/**\n* Official Solution: GOOD denotes jumpable position, BAD is not jumpable\n*/\nenum Index {\n    GOOD, BAD, UNKNOWN\n}\n\npublic class Solution {\n    Index[] memo;\n\n    public boolean canJumpFromPosition(int position, int[] nums) {\n        if (memo[position] != Index.UNKNOWN) {\n            return memo[position] == Index.GOOD ? true : false;\n        }\n\n        int furthestJump = Math.min(position + nums[position], nums.length - 1);\n        for (int nextPosition = position + 1; nextPosition <= furthestJump; nextPosition++) {\n            if (canJumpFromPosition(nextPosition, nums)) {\n                memo[position] = Index.GOOD;\n                return true;\n            }\n        }\n\n        memo[position] = Index.BAD;\n        return false;\n    }\n\n    public boolean canJump(int[] nums) {\n        memo = new Index[nums.length];\n        for (int i = 0; i < memo.length; i++) {\n            memo[i] = Index.UNKNOWN;\n        }\n        memo[memo.length - 1] = Index.GOOD;\n        return canJumpFromPosition(0, nums);\n    }\n}\n```\n\n###### 3. Bottom-up\n```\nclass Solution {\n    public boolean canJump(int[] nums) {\n        boolean[] dp = new boolean[nums.length];\n        dp[nums.length - 1] = true;\n        for(int i = nums.length - 2; i >= 0; i--){\n            int k = nums[i];\n            dp[i] = false;\n            int mb = Math.min(k, nums.length-i-1);\n            for(int j = 1 ; j <= mb; j++){\n                if(dp[i+j])\n                {\n                    dp[i] = true;break;\n                }\n            }\n        }\n        return dp[0];\n    }\n}\n```\n\n###### 4. Greedy(Best)\n```\nclass Solution {\n    public boolean canJump(int[] nums) {\n        int njp = nums.length -1;\n        for(int i = nums.length -2 ;  i >=0; i--){\n            if(nums[i] + i >= njp){\n                njp = i;\n            }\n        }\n        return njp == 0; \n    }\n}\n```\n\n# Reference\n[What Is Dynamic Programming and How To Use It](https://www.youtube.com/watch?v=vYquumk4nWw&feature=youtu.be)\n\n[Official Solution](https://leetcode.com/problems/jump-game/solution/)\n","source":"_posts/55-Jump-Game.md","raw":"---\ntitle: 55 Jump Game\ndate: 2019-11-05 00:10:24\ncategories:\n- LeetCode\ntags:\n- dynamic programming\n---\n# Intuition & Algorithm\nIt's a typical dynamic programming problem, so we can find three kinds of solution.\n- Recursion\n- Memoization (Optimization of Recursion)\n- Bottom-up (Iteration)\n\nEach element in the array represents the maximum length we can jump and we need to find out if we can reach the last element starting from the first element.\n\n###### 1. Recursion\nThe broute-force solution is  recursion and backtracking. Let's assum the length of the given array `nums[i]` is `n`, and we want to check if we can jump to the last element from position `i`, this process can be represent as following equation:\n\n```\nS(i) = S(i+1) || ... || S(m), m = min(i+k, n), k=nums[i]\n```\n\nSo the problem is seperated into several sub-problems and the terminated case is `S(n-1)=true` since we just stand on the last element. \n\n***Time complexity*** is O(2^n) because we can choose skip each position or not in each possible solution. ***Space comlexcity*** is O(n) consumed by function stack frame.\n\n###### 2. Memoization\nThe problem of recursion is the solution of each subproblem is imutable, but we calculate it multiple times. Say, `S(i) = S(i+1) || S(i+2) || S(i+3)` and `S(i-1) = S(i+1) || S(i+2) `， `S(i+2)` is repeatedly calculated. So we can store each solution `S(i)`, when we need it just return it. For each `i`, we solved `nums[i]` problems, and `nums[i]` is at most `n`, so time complexity is `O(n^2)`. Space comlexity is O(2n) since we need O(n) for stack frame and O(n) for memo table.\n\n###### 3. Bottom-up\nThe top-down recusion process of above solution is redundant. We can first get `S(n-2)` with the precondition `S(n-1) = true` and then get `S(n-3)`, `S(n-2)`...until `S(0)`. This saves the space consumption for stack frame in recursion. Even more, the scale of this problem is not limited by recusion. For instance, the length of the array is 100000, so we need 100000 stack frame in the worst case. Operating system has limited the size of stack frame. Recursion will cause the `stack overflow` error. \n\nThe implementation of bottom-up solution is quite easy too , we can use an array to store the result of the subproblems and update the element from the last to the first. S(0) is the final answer. Time complexity is still O(n^2) and space complexity is O(n).\n\n###### 4. Greedy(Best)\nIn the above solution, we are finding the nearst position that can jump to the last. An clear illustration can be got from the above equation:\n`S(i) = S(i+1) || ... || S(m)` Logic operation `||` will terminated when an operand is true from left to right, that's exactly the **nearst** jumpable position. The neast jumpable position `njp` is `n-1`, we update it as searching from `n-2` to `0`. While at position `i`, if `i+nums[i] < njp`, we can't jump to the nearst jumpable position so we can't jump to the end, otherwise we set position `i` to jumpable and `njp` to `i`.\nTime complexity is O(n) and Space complexity is O(1). This is the best solution for ***Jump Game*** problem.\n# Complexity\nLook up the details in the above section.\n\n###### 1. Recursion\n**Time Complexity:**  O(2^n)\n\n**Space Complexity:**  O(n)\n\n###### 2. Memoization\n**Time Complexity:**  O(n^2)\n\n**Space Complexity:**  O(n)\n\n###### 3. Bottom-up\n**Time Complexity:**  O(n^2)\n\n**Space Complexity:**  O(n)\n\n###### 4. Greedy(Best)\n**Time Complexity:**  O(n)\n\n**Space Complexity:**  O(1)\n\n# Code\n###### 1. Recursion\n```\npublic class Solution {\n    public boolean canJumpFromPosition(int position, int[] nums) {\n        if (position == nums.length - 1) {\n            return true;\n        }\n\n        int furthestJump = Math.min(position + nums[position], nums.length - 1);\n        for (int nextPosition = position + 1; nextPosition <= furthestJump; nextPosition++) {\n            if (canJumpFromPosition(nextPosition, nums)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public boolean canJump(int[] nums) {\n        return canJumpFromPosition(0, nums);\n    }\n}\n```\n\n###### 2. Memoization\n```\n/**\n* Official Solution: GOOD denotes jumpable position, BAD is not jumpable\n*/\nenum Index {\n    GOOD, BAD, UNKNOWN\n}\n\npublic class Solution {\n    Index[] memo;\n\n    public boolean canJumpFromPosition(int position, int[] nums) {\n        if (memo[position] != Index.UNKNOWN) {\n            return memo[position] == Index.GOOD ? true : false;\n        }\n\n        int furthestJump = Math.min(position + nums[position], nums.length - 1);\n        for (int nextPosition = position + 1; nextPosition <= furthestJump; nextPosition++) {\n            if (canJumpFromPosition(nextPosition, nums)) {\n                memo[position] = Index.GOOD;\n                return true;\n            }\n        }\n\n        memo[position] = Index.BAD;\n        return false;\n    }\n\n    public boolean canJump(int[] nums) {\n        memo = new Index[nums.length];\n        for (int i = 0; i < memo.length; i++) {\n            memo[i] = Index.UNKNOWN;\n        }\n        memo[memo.length - 1] = Index.GOOD;\n        return canJumpFromPosition(0, nums);\n    }\n}\n```\n\n###### 3. Bottom-up\n```\nclass Solution {\n    public boolean canJump(int[] nums) {\n        boolean[] dp = new boolean[nums.length];\n        dp[nums.length - 1] = true;\n        for(int i = nums.length - 2; i >= 0; i--){\n            int k = nums[i];\n            dp[i] = false;\n            int mb = Math.min(k, nums.length-i-1);\n            for(int j = 1 ; j <= mb; j++){\n                if(dp[i+j])\n                {\n                    dp[i] = true;break;\n                }\n            }\n        }\n        return dp[0];\n    }\n}\n```\n\n###### 4. Greedy(Best)\n```\nclass Solution {\n    public boolean canJump(int[] nums) {\n        int njp = nums.length -1;\n        for(int i = nums.length -2 ;  i >=0; i--){\n            if(nums[i] + i >= njp){\n                njp = i;\n            }\n        }\n        return njp == 0; \n    }\n}\n```\n\n# Reference\n[What Is Dynamic Programming and How To Use It](https://www.youtube.com/watch?v=vYquumk4nWw&feature=youtu.be)\n\n[Official Solution](https://leetcode.com/problems/jump-game/solution/)\n","slug":"55-Jump-Game","published":1,"updated":"2019-11-23T13:42:25.436Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3gx4n1a000ntkbsfc4riwk5","content":"<h1 id=\"Intuition-amp-Algorithm\"><a href=\"#Intuition-amp-Algorithm\" class=\"headerlink\" title=\"Intuition &amp; Algorithm\"></a>Intuition &amp; Algorithm</h1><p>It’s a typical dynamic programming problem, so we can find three kinds of solution.</p>\n<ul>\n<li>Recursion</li>\n<li>Memoization (Optimization of Recursion)</li>\n<li>Bottom-up (Iteration)</li>\n</ul>\n<p>Each element in the array represents the maximum length we can jump and we need to find out if we can reach the last element starting from the first element.</p>\n<h6 id=\"1-Recursion\"><a href=\"#1-Recursion\" class=\"headerlink\" title=\"1. Recursion\"></a>1. Recursion</h6><p>The broute-force solution is  recursion and backtracking. Let’s assum the length of the given array <code>nums[i]</code> is <code>n</code>, and we want to check if we can jump to the last element from position <code>i</code>, this process can be represent as following equation:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S(i) = S(i+1) || ... || S(m), m = min(i+k, n), k=nums[i]</span><br></pre></td></tr></table></figure>\n<p>So the problem is seperated into several sub-problems and the terminated case is <code>S(n-1)=true</code> since we just stand on the last element. </p>\n<p><strong><em>Time complexity</em></strong> is O(2^n) because we can choose skip each position or not in each possible solution. <strong><em>Space comlexcity</em></strong> is O(n) consumed by function stack frame.</p>\n<h6 id=\"2-Memoization\"><a href=\"#2-Memoization\" class=\"headerlink\" title=\"2. Memoization\"></a>2. Memoization</h6><p>The problem of recursion is the solution of each subproblem is imutable, but we calculate it multiple times. Say, <code>S(i) = S(i+1) || S(i+2) || S(i+3)</code> and <code>S(i-1) = S(i+1) || S(i+2)</code>， <code>S(i+2)</code> is repeatedly calculated. So we can store each solution <code>S(i)</code>, when we need it just return it. For each <code>i</code>, we solved <code>nums[i]</code> problems, and <code>nums[i]</code> is at most <code>n</code>, so time complexity is <code>O(n^2)</code>. Space comlexity is O(2n) since we need O(n) for stack frame and O(n) for memo table.</p>\n<h6 id=\"3-Bottom-up\"><a href=\"#3-Bottom-up\" class=\"headerlink\" title=\"3. Bottom-up\"></a>3. Bottom-up</h6><p>The top-down recusion process of above solution is redundant. We can first get <code>S(n-2)</code> with the precondition <code>S(n-1) = true</code> and then get <code>S(n-3)</code>, <code>S(n-2)</code>…until <code>S(0)</code>. This saves the space consumption for stack frame in recursion. Even more, the scale of this problem is not limited by recusion. For instance, the length of the array is 100000, so we need 100000 stack frame in the worst case. Operating system has limited the size of stack frame. Recursion will cause the <code>stack overflow</code> error. </p>\n<p>The implementation of bottom-up solution is quite easy too , we can use an array to store the result of the subproblems and update the element from the last to the first. S(0) is the final answer. Time complexity is still O(n^2) and space complexity is O(n).</p>\n<h6 id=\"4-Greedy-Best\"><a href=\"#4-Greedy-Best\" class=\"headerlink\" title=\"4. Greedy(Best)\"></a>4. Greedy(Best)</h6><p>In the above solution, we are finding the nearst position that can jump to the last. An clear illustration can be got from the above equation:<br><code>S(i) = S(i+1) || ... || S(m)</code> Logic operation <code>||</code> will terminated when an operand is true from left to right, that’s exactly the <strong>nearst</strong> jumpable position. The neast jumpable position <code>njp</code> is <code>n-1</code>, we update it as searching from <code>n-2</code> to <code>0</code>. While at position <code>i</code>, if <code>i+nums[i] &lt; njp</code>, we can’t jump to the nearst jumpable position so we can’t jump to the end, otherwise we set position <code>i</code> to jumpable and <code>njp</code> to <code>i</code>.<br>Time complexity is O(n) and Space complexity is O(1). This is the best solution for <strong><em>Jump Game</em></strong> problem.</p>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p>Look up the details in the above section.</p>\n<h6 id=\"1-Recursion-1\"><a href=\"#1-Recursion-1\" class=\"headerlink\" title=\"1. Recursion\"></a>1. Recursion</h6><p><strong>Time Complexity:</strong>  O(2^n)</p>\n<p><strong>Space Complexity:</strong>  O(n)</p>\n<h6 id=\"2-Memoization-1\"><a href=\"#2-Memoization-1\" class=\"headerlink\" title=\"2. Memoization\"></a>2. Memoization</h6><p><strong>Time Complexity:</strong>  O(n^2)</p>\n<p><strong>Space Complexity:</strong>  O(n)</p>\n<h6 id=\"3-Bottom-up-1\"><a href=\"#3-Bottom-up-1\" class=\"headerlink\" title=\"3. Bottom-up\"></a>3. Bottom-up</h6><p><strong>Time Complexity:</strong>  O(n^2)</p>\n<p><strong>Space Complexity:</strong>  O(n)</p>\n<h6 id=\"4-Greedy-Best-1\"><a href=\"#4-Greedy-Best-1\" class=\"headerlink\" title=\"4. Greedy(Best)\"></a>4. Greedy(Best)</h6><p><strong>Time Complexity:</strong>  O(n)</p>\n<p><strong>Space Complexity:</strong>  O(1)</p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><h6 id=\"1-Recursion-2\"><a href=\"#1-Recursion-2\" class=\"headerlink\" title=\"1. Recursion\"></a>1. Recursion</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\">    public boolean canJumpFromPosition(int position, int[] nums) &#123;</span><br><span class=\"line\">        if (position == nums.length - 1) &#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        int furthestJump = Math.min(position + nums[position], nums.length - 1);</span><br><span class=\"line\">        for (int nextPosition = position + 1; nextPosition &lt;= furthestJump; nextPosition++) &#123;</span><br><span class=\"line\">            if (canJumpFromPosition(nextPosition, nums)) &#123;</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean canJump(int[] nums) &#123;</span><br><span class=\"line\">        return canJumpFromPosition(0, nums);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-Memoization-2\"><a href=\"#2-Memoization-2\" class=\"headerlink\" title=\"2. Memoization\"></a>2. Memoization</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* Official Solution: GOOD denotes jumpable position, BAD is not jumpable</span><br><span class=\"line\">*/</span><br><span class=\"line\">enum Index &#123;</span><br><span class=\"line\">    GOOD, BAD, UNKNOWN</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\">    Index[] memo;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean canJumpFromPosition(int position, int[] nums) &#123;</span><br><span class=\"line\">        if (memo[position] != Index.UNKNOWN) &#123;</span><br><span class=\"line\">            return memo[position] == Index.GOOD ? true : false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        int furthestJump = Math.min(position + nums[position], nums.length - 1);</span><br><span class=\"line\">        for (int nextPosition = position + 1; nextPosition &lt;= furthestJump; nextPosition++) &#123;</span><br><span class=\"line\">            if (canJumpFromPosition(nextPosition, nums)) &#123;</span><br><span class=\"line\">                memo[position] = Index.GOOD;</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        memo[position] = Index.BAD;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean canJump(int[] nums) &#123;</span><br><span class=\"line\">        memo = new Index[nums.length];</span><br><span class=\"line\">        for (int i = 0; i &lt; memo.length; i++) &#123;</span><br><span class=\"line\">            memo[i] = Index.UNKNOWN;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        memo[memo.length - 1] = Index.GOOD;</span><br><span class=\"line\">        return canJumpFromPosition(0, nums);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"3-Bottom-up-2\"><a href=\"#3-Bottom-up-2\" class=\"headerlink\" title=\"3. Bottom-up\"></a>3. Bottom-up</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public boolean canJump(int[] nums) &#123;</span><br><span class=\"line\">        boolean[] dp = new boolean[nums.length];</span><br><span class=\"line\">        dp[nums.length - 1] = true;</span><br><span class=\"line\">        for(int i = nums.length - 2; i &gt;= 0; i--)&#123;</span><br><span class=\"line\">            int k = nums[i];</span><br><span class=\"line\">            dp[i] = false;</span><br><span class=\"line\">            int mb = Math.min(k, nums.length-i-1);</span><br><span class=\"line\">            for(int j = 1 ; j &lt;= mb; j++)&#123;</span><br><span class=\"line\">                if(dp[i+j])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dp[i] = true;break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dp[0];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"4-Greedy-Best-2\"><a href=\"#4-Greedy-Best-2\" class=\"headerlink\" title=\"4. Greedy(Best)\"></a>4. Greedy(Best)</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public boolean canJump(int[] nums) &#123;</span><br><span class=\"line\">        int njp = nums.length -1;</span><br><span class=\"line\">        for(int i = nums.length -2 ;  i &gt;=0; i--)&#123;</span><br><span class=\"line\">            if(nums[i] + i &gt;= njp)&#123;</span><br><span class=\"line\">                njp = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return njp == 0; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><p><a href=\"https://www.youtube.com/watch?v=vYquumk4nWw&amp;feature=youtu.be\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">What Is Dynamic Programming and How To Use It</a></p>\n<p><a href=\"https://leetcode.com/problems/jump-game/solution/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">Official Solution</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Intuition-amp-Algorithm\"><a href=\"#Intuition-amp-Algorithm\" class=\"headerlink\" title=\"Intuition &amp; Algorithm\"></a>Intuition &amp; Algorithm</h1><p>It’s a typical dynamic programming problem, so we can find three kinds of solution.</p>\n<ul>\n<li>Recursion</li>\n<li>Memoization (Optimization of Recursion)</li>\n<li>Bottom-up (Iteration)</li>\n</ul>\n<p>Each element in the array represents the maximum length we can jump and we need to find out if we can reach the last element starting from the first element.</p>\n<h6 id=\"1-Recursion\"><a href=\"#1-Recursion\" class=\"headerlink\" title=\"1. Recursion\"></a>1. Recursion</h6><p>The broute-force solution is  recursion and backtracking. Let’s assum the length of the given array <code>nums[i]</code> is <code>n</code>, and we want to check if we can jump to the last element from position <code>i</code>, this process can be represent as following equation:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S(i) = S(i+1) || ... || S(m), m = min(i+k, n), k=nums[i]</span><br></pre></td></tr></table></figure>\n<p>So the problem is seperated into several sub-problems and the terminated case is <code>S(n-1)=true</code> since we just stand on the last element. </p>\n<p><strong><em>Time complexity</em></strong> is O(2^n) because we can choose skip each position or not in each possible solution. <strong><em>Space comlexcity</em></strong> is O(n) consumed by function stack frame.</p>\n<h6 id=\"2-Memoization\"><a href=\"#2-Memoization\" class=\"headerlink\" title=\"2. Memoization\"></a>2. Memoization</h6><p>The problem of recursion is the solution of each subproblem is imutable, but we calculate it multiple times. Say, <code>S(i) = S(i+1) || S(i+2) || S(i+3)</code> and <code>S(i-1) = S(i+1) || S(i+2)</code>， <code>S(i+2)</code> is repeatedly calculated. So we can store each solution <code>S(i)</code>, when we need it just return it. For each <code>i</code>, we solved <code>nums[i]</code> problems, and <code>nums[i]</code> is at most <code>n</code>, so time complexity is <code>O(n^2)</code>. Space comlexity is O(2n) since we need O(n) for stack frame and O(n) for memo table.</p>\n<h6 id=\"3-Bottom-up\"><a href=\"#3-Bottom-up\" class=\"headerlink\" title=\"3. Bottom-up\"></a>3. Bottom-up</h6><p>The top-down recusion process of above solution is redundant. We can first get <code>S(n-2)</code> with the precondition <code>S(n-1) = true</code> and then get <code>S(n-3)</code>, <code>S(n-2)</code>…until <code>S(0)</code>. This saves the space consumption for stack frame in recursion. Even more, the scale of this problem is not limited by recusion. For instance, the length of the array is 100000, so we need 100000 stack frame in the worst case. Operating system has limited the size of stack frame. Recursion will cause the <code>stack overflow</code> error. </p>\n<p>The implementation of bottom-up solution is quite easy too , we can use an array to store the result of the subproblems and update the element from the last to the first. S(0) is the final answer. Time complexity is still O(n^2) and space complexity is O(n).</p>\n<h6 id=\"4-Greedy-Best\"><a href=\"#4-Greedy-Best\" class=\"headerlink\" title=\"4. Greedy(Best)\"></a>4. Greedy(Best)</h6><p>In the above solution, we are finding the nearst position that can jump to the last. An clear illustration can be got from the above equation:<br><code>S(i) = S(i+1) || ... || S(m)</code> Logic operation <code>||</code> will terminated when an operand is true from left to right, that’s exactly the <strong>nearst</strong> jumpable position. The neast jumpable position <code>njp</code> is <code>n-1</code>, we update it as searching from <code>n-2</code> to <code>0</code>. While at position <code>i</code>, if <code>i+nums[i] &lt; njp</code>, we can’t jump to the nearst jumpable position so we can’t jump to the end, otherwise we set position <code>i</code> to jumpable and <code>njp</code> to <code>i</code>.<br>Time complexity is O(n) and Space complexity is O(1). This is the best solution for <strong><em>Jump Game</em></strong> problem.</p>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p>Look up the details in the above section.</p>\n<h6 id=\"1-Recursion-1\"><a href=\"#1-Recursion-1\" class=\"headerlink\" title=\"1. Recursion\"></a>1. Recursion</h6><p><strong>Time Complexity:</strong>  O(2^n)</p>\n<p><strong>Space Complexity:</strong>  O(n)</p>\n<h6 id=\"2-Memoization-1\"><a href=\"#2-Memoization-1\" class=\"headerlink\" title=\"2. Memoization\"></a>2. Memoization</h6><p><strong>Time Complexity:</strong>  O(n^2)</p>\n<p><strong>Space Complexity:</strong>  O(n)</p>\n<h6 id=\"3-Bottom-up-1\"><a href=\"#3-Bottom-up-1\" class=\"headerlink\" title=\"3. Bottom-up\"></a>3. Bottom-up</h6><p><strong>Time Complexity:</strong>  O(n^2)</p>\n<p><strong>Space Complexity:</strong>  O(n)</p>\n<h6 id=\"4-Greedy-Best-1\"><a href=\"#4-Greedy-Best-1\" class=\"headerlink\" title=\"4. Greedy(Best)\"></a>4. Greedy(Best)</h6><p><strong>Time Complexity:</strong>  O(n)</p>\n<p><strong>Space Complexity:</strong>  O(1)</p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><h6 id=\"1-Recursion-2\"><a href=\"#1-Recursion-2\" class=\"headerlink\" title=\"1. Recursion\"></a>1. Recursion</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\">    public boolean canJumpFromPosition(int position, int[] nums) &#123;</span><br><span class=\"line\">        if (position == nums.length - 1) &#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        int furthestJump = Math.min(position + nums[position], nums.length - 1);</span><br><span class=\"line\">        for (int nextPosition = position + 1; nextPosition &lt;= furthestJump; nextPosition++) &#123;</span><br><span class=\"line\">            if (canJumpFromPosition(nextPosition, nums)) &#123;</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean canJump(int[] nums) &#123;</span><br><span class=\"line\">        return canJumpFromPosition(0, nums);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-Memoization-2\"><a href=\"#2-Memoization-2\" class=\"headerlink\" title=\"2. Memoization\"></a>2. Memoization</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* Official Solution: GOOD denotes jumpable position, BAD is not jumpable</span><br><span class=\"line\">*/</span><br><span class=\"line\">enum Index &#123;</span><br><span class=\"line\">    GOOD, BAD, UNKNOWN</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\">    Index[] memo;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean canJumpFromPosition(int position, int[] nums) &#123;</span><br><span class=\"line\">        if (memo[position] != Index.UNKNOWN) &#123;</span><br><span class=\"line\">            return memo[position] == Index.GOOD ? true : false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        int furthestJump = Math.min(position + nums[position], nums.length - 1);</span><br><span class=\"line\">        for (int nextPosition = position + 1; nextPosition &lt;= furthestJump; nextPosition++) &#123;</span><br><span class=\"line\">            if (canJumpFromPosition(nextPosition, nums)) &#123;</span><br><span class=\"line\">                memo[position] = Index.GOOD;</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        memo[position] = Index.BAD;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean canJump(int[] nums) &#123;</span><br><span class=\"line\">        memo = new Index[nums.length];</span><br><span class=\"line\">        for (int i = 0; i &lt; memo.length; i++) &#123;</span><br><span class=\"line\">            memo[i] = Index.UNKNOWN;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        memo[memo.length - 1] = Index.GOOD;</span><br><span class=\"line\">        return canJumpFromPosition(0, nums);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"3-Bottom-up-2\"><a href=\"#3-Bottom-up-2\" class=\"headerlink\" title=\"3. Bottom-up\"></a>3. Bottom-up</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public boolean canJump(int[] nums) &#123;</span><br><span class=\"line\">        boolean[] dp = new boolean[nums.length];</span><br><span class=\"line\">        dp[nums.length - 1] = true;</span><br><span class=\"line\">        for(int i = nums.length - 2; i &gt;= 0; i--)&#123;</span><br><span class=\"line\">            int k = nums[i];</span><br><span class=\"line\">            dp[i] = false;</span><br><span class=\"line\">            int mb = Math.min(k, nums.length-i-1);</span><br><span class=\"line\">            for(int j = 1 ; j &lt;= mb; j++)&#123;</span><br><span class=\"line\">                if(dp[i+j])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dp[i] = true;break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dp[0];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"4-Greedy-Best-2\"><a href=\"#4-Greedy-Best-2\" class=\"headerlink\" title=\"4. Greedy(Best)\"></a>4. Greedy(Best)</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public boolean canJump(int[] nums) &#123;</span><br><span class=\"line\">        int njp = nums.length -1;</span><br><span class=\"line\">        for(int i = nums.length -2 ;  i &gt;=0; i--)&#123;</span><br><span class=\"line\">            if(nums[i] + i &gt;= njp)&#123;</span><br><span class=\"line\">                njp = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return njp == 0; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><p><a href=\"https://www.youtube.com/watch?v=vYquumk4nWw&amp;feature=youtu.be\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">What Is Dynamic Programming and How To Use It</a></p>\n<p><a href=\"https://leetcode.com/problems/jump-game/solution/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">Official Solution</a></p>\n"},{"title":"61 Rotate List","date":"2019-11-23T13:25:36.000Z","_content":"# Intuition & Algorithm\nRemove the last k nodes before the head node.\n# Code\n```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode rotateRight(ListNode head, int k) {\n        if(head ==null)return head;\n        int n = 0;\n        ListNode tail = null;\n        for(ListNode i = head; i!=null;n++,tail=i,i=i.next);\n        k=k%n;\n        if(k==0)return head;\n        ListNode pre=null;\n        ListNode c=head;\n        for(int i = 0 ; i < n-k; i++,pre=c,c=c.next);\n        tail.next = head;\n        head = pre.next;\n        pre.next=null;\n        return head;\n    }\n}\n```\n\n# Complexity\n**Time Complexity:** There are two for loop here, cost $O(n)$ time to traverse the lsit.\n**Space Complexity:** $O(1)$\n","source":"_posts/61-Rotate-List.md","raw":"---\ntitle: 61 Rotate List\ndate: 2019-11-23 21:25:36\ntags:\n- list\ncategories:\n- LeetCode\n---\n# Intuition & Algorithm\nRemove the last k nodes before the head node.\n# Code\n```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode rotateRight(ListNode head, int k) {\n        if(head ==null)return head;\n        int n = 0;\n        ListNode tail = null;\n        for(ListNode i = head; i!=null;n++,tail=i,i=i.next);\n        k=k%n;\n        if(k==0)return head;\n        ListNode pre=null;\n        ListNode c=head;\n        for(int i = 0 ; i < n-k; i++,pre=c,c=c.next);\n        tail.next = head;\n        head = pre.next;\n        pre.next=null;\n        return head;\n    }\n}\n```\n\n# Complexity\n**Time Complexity:** There are two for loop here, cost $O(n)$ time to traverse the lsit.\n**Space Complexity:** $O(1)$\n","slug":"61-Rotate-List","published":1,"updated":"2019-11-23T13:27:11.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3gx4n1c000otkbs7fqsxf3h","content":"<h1 id=\"Intuition-amp-Algorithm\"><a href=\"#Intuition-amp-Algorithm\" class=\"headerlink\" title=\"Intuition &amp; Algorithm\"></a>Intuition &amp; Algorithm</h1><p>Remove the last k nodes before the head node.</p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public ListNode rotateRight(ListNode head, int k) &#123;</span><br><span class=\"line\">        if(head ==null)return head;</span><br><span class=\"line\">        int n = 0;</span><br><span class=\"line\">        ListNode tail = null;</span><br><span class=\"line\">        for(ListNode i = head; i!=null;n++,tail=i,i=i.next);</span><br><span class=\"line\">        k=k%n;</span><br><span class=\"line\">        if(k==0)return head;</span><br><span class=\"line\">        ListNode pre=null;</span><br><span class=\"line\">        ListNode c=head;</span><br><span class=\"line\">        for(int i = 0 ; i &lt; n-k; i++,pre=c,c=c.next);</span><br><span class=\"line\">        tail.next = head;</span><br><span class=\"line\">        head = pre.next;</span><br><span class=\"line\">        pre.next=null;</span><br><span class=\"line\">        return head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> There are two for loop here, cost $O(n)$ time to traverse the lsit.<br><strong>Space Complexity:</strong> $O(1)$</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Intuition-amp-Algorithm\"><a href=\"#Intuition-amp-Algorithm\" class=\"headerlink\" title=\"Intuition &amp; Algorithm\"></a>Intuition &amp; Algorithm</h1><p>Remove the last k nodes before the head node.</p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public ListNode rotateRight(ListNode head, int k) &#123;</span><br><span class=\"line\">        if(head ==null)return head;</span><br><span class=\"line\">        int n = 0;</span><br><span class=\"line\">        ListNode tail = null;</span><br><span class=\"line\">        for(ListNode i = head; i!=null;n++,tail=i,i=i.next);</span><br><span class=\"line\">        k=k%n;</span><br><span class=\"line\">        if(k==0)return head;</span><br><span class=\"line\">        ListNode pre=null;</span><br><span class=\"line\">        ListNode c=head;</span><br><span class=\"line\">        for(int i = 0 ; i &lt; n-k; i++,pre=c,c=c.next);</span><br><span class=\"line\">        tail.next = head;</span><br><span class=\"line\">        head = pre.next;</span><br><span class=\"line\">        pre.next=null;</span><br><span class=\"line\">        return head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> There are two for loop here, cost $O(n)$ time to traverse the lsit.<br><strong>Space Complexity:</strong> $O(1)$</p>\n"},{"title":"86 Partition List","date":"2019-11-27T06:36:36.000Z","_content":"# Intuition\nThis question is one step of quick sort: split the list into two parts by a sentinal. We need three pointers to deal with the classifying process:\n1. One pointer denotes the right border of the smaller part, at first it's at the dummy node before head node;\n2. The other two pointers are for one goal: iterate over the entire list, move node into the smaller part or remain at its original place up to the given sentinal `x`.\n> Keep in mind we need two pointers to remove a node. The critial idea of this algorithm is to  remove a node from the list and then insert it the the right border of the smaller part(after the slow pointer).\n\n# Algorithm\nLet's look at an example below:\n> Input: head = 1->4->3->2->5->2, x = 3 <br/>\nOutput: 1->2->2->4->3->5\n\nThe three pointers stated above are denoted by`s`(slow), `f`(fast), `p`(pre, node before fast pointer).\n\n1. Initial State\n\n> -1(s,p)->1(f)->4->3->2->5->2 <br/>\n\n2. Check the first node\n\nSince `1 < 3`, we should remove fast node into smaller part, and then move fast node to next node. Here is a corner case, when fast node is right the next node of slow node, we don't need to remove it from the list.\n> -1->1(s,p)->4(f)->3->2->5->2 <br/>\n\n3. Check the second node\n\n`4>3`, so we don't move any node, just move fast pointer and pre pointer to its next place\n> -1->1(s)->4(p)->3(f)->2->5->2 <br/>\n\n4. Check the third node\n\nThe same case as the second one\n> -1->1(s)->4->3(p)->2(f)->5->2 <br/>\n\n5. Check the fourth node\n\n`2<3`, we need to remove it from the list and insert it after slow pointer and then move two pointers to its next node. Take care that we don't need to move pre pointer in this case.\n> -1->1->2(s)->4->3(p)->5(f)->2 <br/>\n\n6. Check the nodes left\n\nWe will get the list finally(`null` node after the tail node is ignored in previous diagram):\n> -1->1->2->2(s)->4->3->5(p)->null(f) <br/>\n\n# Code\n```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode partition(ListNode head, int x) {\n        ListNode dummy = new ListNode(0);\n        dummy.next = head;\n        ListNode fast = head, slow = dummy, pre = dummy;\n        while(fast != null){\n            if(fast.val < x){\n                ListNode next = fast.next;\n                if(fast != slow.next){\n                    fast.next = slow.next;\n                    pre.next = next;\n                }\n                slow.next = fast;\n                slow = fast;\n                fast = next;\n            }\n            else{\n                pre = fast;\n                fast = fast.next;\n            }\n        }\n        return dummy.next;\n    }\n}\n```\n\n# Complexity\n**Time Complexity:** $O(n)$ It's the cost of iterating over a list.\n\n**Space Complexity:** $O(1)$ Constant pointers are used.\n","source":"_posts/86-Partition-List.md","raw":"---\ntitle: 86 Partition List\ndate: 2019-11-27 14:36:36\ntags:\n- list\ncategories:\n- LeetCode\n---\n# Intuition\nThis question is one step of quick sort: split the list into two parts by a sentinal. We need three pointers to deal with the classifying process:\n1. One pointer denotes the right border of the smaller part, at first it's at the dummy node before head node;\n2. The other two pointers are for one goal: iterate over the entire list, move node into the smaller part or remain at its original place up to the given sentinal `x`.\n> Keep in mind we need two pointers to remove a node. The critial idea of this algorithm is to  remove a node from the list and then insert it the the right border of the smaller part(after the slow pointer).\n\n# Algorithm\nLet's look at an example below:\n> Input: head = 1->4->3->2->5->2, x = 3 <br/>\nOutput: 1->2->2->4->3->5\n\nThe three pointers stated above are denoted by`s`(slow), `f`(fast), `p`(pre, node before fast pointer).\n\n1. Initial State\n\n> -1(s,p)->1(f)->4->3->2->5->2 <br/>\n\n2. Check the first node\n\nSince `1 < 3`, we should remove fast node into smaller part, and then move fast node to next node. Here is a corner case, when fast node is right the next node of slow node, we don't need to remove it from the list.\n> -1->1(s,p)->4(f)->3->2->5->2 <br/>\n\n3. Check the second node\n\n`4>3`, so we don't move any node, just move fast pointer and pre pointer to its next place\n> -1->1(s)->4(p)->3(f)->2->5->2 <br/>\n\n4. Check the third node\n\nThe same case as the second one\n> -1->1(s)->4->3(p)->2(f)->5->2 <br/>\n\n5. Check the fourth node\n\n`2<3`, we need to remove it from the list and insert it after slow pointer and then move two pointers to its next node. Take care that we don't need to move pre pointer in this case.\n> -1->1->2(s)->4->3(p)->5(f)->2 <br/>\n\n6. Check the nodes left\n\nWe will get the list finally(`null` node after the tail node is ignored in previous diagram):\n> -1->1->2->2(s)->4->3->5(p)->null(f) <br/>\n\n# Code\n```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode partition(ListNode head, int x) {\n        ListNode dummy = new ListNode(0);\n        dummy.next = head;\n        ListNode fast = head, slow = dummy, pre = dummy;\n        while(fast != null){\n            if(fast.val < x){\n                ListNode next = fast.next;\n                if(fast != slow.next){\n                    fast.next = slow.next;\n                    pre.next = next;\n                }\n                slow.next = fast;\n                slow = fast;\n                fast = next;\n            }\n            else{\n                pre = fast;\n                fast = fast.next;\n            }\n        }\n        return dummy.next;\n    }\n}\n```\n\n# Complexity\n**Time Complexity:** $O(n)$ It's the cost of iterating over a list.\n\n**Space Complexity:** $O(1)$ Constant pointers are used.\n","slug":"86-Partition-List","published":1,"updated":"2019-11-27T06:38:42.972Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3gx4n1e000rtkbsnogl1iz1","content":"<h1 id=\"Intuition\"><a href=\"#Intuition\" class=\"headerlink\" title=\"Intuition\"></a>Intuition</h1><p>This question is one step of quick sort: split the list into two parts by a sentinal. We need three pointers to deal with the classifying process:</p>\n<ol>\n<li>One pointer denotes the right border of the smaller part, at first it’s at the dummy node before head node;</li>\n<li>The other two pointers are for one goal: iterate over the entire list, move node into the smaller part or remain at its original place up to the given sentinal <code>x</code>.<blockquote>\n<p>Keep in mind we need two pointers to remove a node. The critial idea of this algorithm is to  remove a node from the list and then insert it the the right border of the smaller part(after the slow pointer).</p>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h1><p>Let’s look at an example below:</p>\n<blockquote>\n<p>Input: head = 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2, x = 3 <br><br>Output: 1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5</p>\n</blockquote>\n<p>The three pointers stated above are denoted by<code>s</code>(slow), <code>f</code>(fast), <code>p</code>(pre, node before fast pointer).</p>\n<ol>\n<li>Initial State</li>\n</ol>\n<blockquote>\n<p>-1(s,p)-&gt;1(f)-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2 <br></p>\n</blockquote>\n<ol>\n<li>Check the first node</li>\n</ol>\n<p>Since <code>1 &lt; 3</code>, we should remove fast node into smaller part, and then move fast node to next node. Here is a corner case, when fast node is right the next node of slow node, we don’t need to remove it from the list.</p>\n<blockquote>\n<p>-1-&gt;1(s,p)-&gt;4(f)-&gt;3-&gt;2-&gt;5-&gt;2 <br></p>\n</blockquote>\n<ol>\n<li>Check the second node</li>\n</ol>\n<p><code>4&gt;3</code>, so we don’t move any node, just move fast pointer and pre pointer to its next place</p>\n<blockquote>\n<p>-1-&gt;1(s)-&gt;4(p)-&gt;3(f)-&gt;2-&gt;5-&gt;2 <br></p>\n</blockquote>\n<ol>\n<li>Check the third node</li>\n</ol>\n<p>The same case as the second one</p>\n<blockquote>\n<p>-1-&gt;1(s)-&gt;4-&gt;3(p)-&gt;2(f)-&gt;5-&gt;2 <br></p>\n</blockquote>\n<ol>\n<li>Check the fourth node</li>\n</ol>\n<p><code>2&lt;3</code>, we need to remove it from the list and insert it after slow pointer and then move two pointers to its next node. Take care that we don’t need to move pre pointer in this case.</p>\n<blockquote>\n<p>-1-&gt;1-&gt;2(s)-&gt;4-&gt;3(p)-&gt;5(f)-&gt;2 <br></p>\n</blockquote>\n<ol>\n<li>Check the nodes left</li>\n</ol>\n<p>We will get the list finally(<code>null</code> node after the tail node is ignored in previous diagram):</p>\n<blockquote>\n<p>-1-&gt;1-&gt;2-&gt;2(s)-&gt;4-&gt;3-&gt;5(p)-&gt;null(f) <br></p>\n</blockquote>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public ListNode partition(ListNode head, int x) &#123;</span><br><span class=\"line\">        ListNode dummy = new ListNode(0);</span><br><span class=\"line\">        dummy.next = head;</span><br><span class=\"line\">        ListNode fast = head, slow = dummy, pre = dummy;</span><br><span class=\"line\">        while(fast != null)&#123;</span><br><span class=\"line\">            if(fast.val &lt; x)&#123;</span><br><span class=\"line\">                ListNode next = fast.next;</span><br><span class=\"line\">                if(fast != slow.next)&#123;</span><br><span class=\"line\">                    fast.next = slow.next;</span><br><span class=\"line\">                    pre.next = next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                slow.next = fast;</span><br><span class=\"line\">                slow = fast;</span><br><span class=\"line\">                fast = next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else&#123;</span><br><span class=\"line\">                pre = fast;</span><br><span class=\"line\">                fast = fast.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dummy.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> $O(n)$ It’s the cost of iterating over a list.</p>\n<p><strong>Space Complexity:</strong> $O(1)$ Constant pointers are used.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Intuition\"><a href=\"#Intuition\" class=\"headerlink\" title=\"Intuition\"></a>Intuition</h1><p>This question is one step of quick sort: split the list into two parts by a sentinal. We need three pointers to deal with the classifying process:</p>\n<ol>\n<li>One pointer denotes the right border of the smaller part, at first it’s at the dummy node before head node;</li>\n<li>The other two pointers are for one goal: iterate over the entire list, move node into the smaller part or remain at its original place up to the given sentinal <code>x</code>.<blockquote>\n<p>Keep in mind we need two pointers to remove a node. The critial idea of this algorithm is to  remove a node from the list and then insert it the the right border of the smaller part(after the slow pointer).</p>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h1><p>Let’s look at an example below:</p>\n<blockquote>\n<p>Input: head = 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2, x = 3 <br><br>Output: 1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5</p>\n</blockquote>\n<p>The three pointers stated above are denoted by<code>s</code>(slow), <code>f</code>(fast), <code>p</code>(pre, node before fast pointer).</p>\n<ol>\n<li>Initial State</li>\n</ol>\n<blockquote>\n<p>-1(s,p)-&gt;1(f)-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2 <br></p>\n</blockquote>\n<ol>\n<li>Check the first node</li>\n</ol>\n<p>Since <code>1 &lt; 3</code>, we should remove fast node into smaller part, and then move fast node to next node. Here is a corner case, when fast node is right the next node of slow node, we don’t need to remove it from the list.</p>\n<blockquote>\n<p>-1-&gt;1(s,p)-&gt;4(f)-&gt;3-&gt;2-&gt;5-&gt;2 <br></p>\n</blockquote>\n<ol>\n<li>Check the second node</li>\n</ol>\n<p><code>4&gt;3</code>, so we don’t move any node, just move fast pointer and pre pointer to its next place</p>\n<blockquote>\n<p>-1-&gt;1(s)-&gt;4(p)-&gt;3(f)-&gt;2-&gt;5-&gt;2 <br></p>\n</blockquote>\n<ol>\n<li>Check the third node</li>\n</ol>\n<p>The same case as the second one</p>\n<blockquote>\n<p>-1-&gt;1(s)-&gt;4-&gt;3(p)-&gt;2(f)-&gt;5-&gt;2 <br></p>\n</blockquote>\n<ol>\n<li>Check the fourth node</li>\n</ol>\n<p><code>2&lt;3</code>, we need to remove it from the list and insert it after slow pointer and then move two pointers to its next node. Take care that we don’t need to move pre pointer in this case.</p>\n<blockquote>\n<p>-1-&gt;1-&gt;2(s)-&gt;4-&gt;3(p)-&gt;5(f)-&gt;2 <br></p>\n</blockquote>\n<ol>\n<li>Check the nodes left</li>\n</ol>\n<p>We will get the list finally(<code>null</code> node after the tail node is ignored in previous diagram):</p>\n<blockquote>\n<p>-1-&gt;1-&gt;2-&gt;2(s)-&gt;4-&gt;3-&gt;5(p)-&gt;null(f) <br></p>\n</blockquote>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public ListNode partition(ListNode head, int x) &#123;</span><br><span class=\"line\">        ListNode dummy = new ListNode(0);</span><br><span class=\"line\">        dummy.next = head;</span><br><span class=\"line\">        ListNode fast = head, slow = dummy, pre = dummy;</span><br><span class=\"line\">        while(fast != null)&#123;</span><br><span class=\"line\">            if(fast.val &lt; x)&#123;</span><br><span class=\"line\">                ListNode next = fast.next;</span><br><span class=\"line\">                if(fast != slow.next)&#123;</span><br><span class=\"line\">                    fast.next = slow.next;</span><br><span class=\"line\">                    pre.next = next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                slow.next = fast;</span><br><span class=\"line\">                slow = fast;</span><br><span class=\"line\">                fast = next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else&#123;</span><br><span class=\"line\">                pre = fast;</span><br><span class=\"line\">                fast = fast.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dummy.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> $O(n)$ It’s the cost of iterating over a list.</p>\n<p><strong>Space Complexity:</strong> $O(1)$ Constant pointers are used.</p>\n"},{"title":"24 Swap Nodes in Pairs","date":"2019-11-23T13:25:15.000Z","_content":"# Intuition & Algorithm\n>Question 25 is a more general question of this one.\n\nSuppose there are three pairs $p_0$, $p_1$ and $p_2$. We need to swap nodes in $p_1$, after that, we should reconnect it to it's adjacent pairs by:\n\n$$\np_0(1).next=p_1(0)\np_1(1).next=p_2(0)\n$$\n\nFor the first pair, $p_0(1)=null$ so we don't need the first equation and and for the last one, $p_2(0)=null$;\n# Code\n1. Recursion\n```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode swapPairs(ListNode head) {\n        return dp(head);\n    }\n    \n    private ListNode dp(ListNode head){\n        if(head == null || head.next == null)\n            return head;\n        ListNode next = head.next.next;\n        head.next.next = head;\n        head = head.next;\n        head.next.next = dp(next);\n        return head;\n    }\n}\n```\n\n2.Iteration\n```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode swapPairs(ListNode head) {\n        if(head == null || head.next == null)\n            return head;\n        ListNode gH = head;\n        ListNode gT = head.next;\n        head = gT;\n        while(gH != null && gT != null){\n            ListNode tmp = gT.next;\n            gT.next = gH;\n            if(tmp != null && tmp.next != null){\n                gH.next = tmp.next;\n                gH = tmp; gT = tmp.next;\n            }\n            else{\n                gH.next = tmp;\n                gH = tmp; gT = null;\n            }\n        }\n        return head;\n    }\n}\n```\n\n# Complexity\n**Time Complexity:** $O(n)$ becasue we iterate over the entire list\n\n**Space Complexity:** For the recursion solution, $O(\\lceil n/2 \\rceil)$ space is necessary to store all the pairs. We cost constant space $O(1)$ for the iteration method.\n","source":"_posts/24-Swap-Nodes-in-Pairs.md","raw":"---\ntitle: 24 Swap Nodes in Pairs\ndate: 2019-11-23 21:25:15\ntags:\n- list\ncategories:\n- LeetCode\n---\n# Intuition & Algorithm\n>Question 25 is a more general question of this one.\n\nSuppose there are three pairs $p_0$, $p_1$ and $p_2$. We need to swap nodes in $p_1$, after that, we should reconnect it to it's adjacent pairs by:\n\n$$\np_0(1).next=p_1(0)\np_1(1).next=p_2(0)\n$$\n\nFor the first pair, $p_0(1)=null$ so we don't need the first equation and and for the last one, $p_2(0)=null$;\n# Code\n1. Recursion\n```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode swapPairs(ListNode head) {\n        return dp(head);\n    }\n    \n    private ListNode dp(ListNode head){\n        if(head == null || head.next == null)\n            return head;\n        ListNode next = head.next.next;\n        head.next.next = head;\n        head = head.next;\n        head.next.next = dp(next);\n        return head;\n    }\n}\n```\n\n2.Iteration\n```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode swapPairs(ListNode head) {\n        if(head == null || head.next == null)\n            return head;\n        ListNode gH = head;\n        ListNode gT = head.next;\n        head = gT;\n        while(gH != null && gT != null){\n            ListNode tmp = gT.next;\n            gT.next = gH;\n            if(tmp != null && tmp.next != null){\n                gH.next = tmp.next;\n                gH = tmp; gT = tmp.next;\n            }\n            else{\n                gH.next = tmp;\n                gH = tmp; gT = null;\n            }\n        }\n        return head;\n    }\n}\n```\n\n# Complexity\n**Time Complexity:** $O(n)$ becasue we iterate over the entire list\n\n**Space Complexity:** For the recursion solution, $O(\\lceil n/2 \\rceil)$ space is necessary to store all the pairs. We cost constant space $O(1)$ for the iteration method.\n","slug":"24-Swap-Nodes-in-Pairs","published":1,"updated":"2019-11-23T13:26:37.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3gx4n1g000stkbsku7g3unk","content":"<h1 id=\"Intuition-amp-Algorithm\"><a href=\"#Intuition-amp-Algorithm\" class=\"headerlink\" title=\"Intuition &amp; Algorithm\"></a>Intuition &amp; Algorithm</h1><blockquote>\n<p>Question 25 is a more general question of this one.</p>\n</blockquote>\n<p>Suppose there are three pairs $p_0$, $p_1$ and $p_2$. We need to swap nodes in $p_1$, after that, we should reconnect it to it’s adjacent pairs by:</p>\n<script type=\"math/tex; mode=display\">\np_0(1).next=p_1(0)\np_1(1).next=p_2(0)</script><p>For the first pair, $p_0(1)=null$ so we don’t need the first equation and and for the last one, $p_2(0)=null$;</p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><ol>\n<li>Recursion<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public ListNode swapPairs(ListNode head) &#123;</span><br><span class=\"line\">        return dp(head);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private ListNode dp(ListNode head)&#123;</span><br><span class=\"line\">        if(head == null || head.next == null)</span><br><span class=\"line\">            return head;</span><br><span class=\"line\">        ListNode next = head.next.next;</span><br><span class=\"line\">        head.next.next = head;</span><br><span class=\"line\">        head = head.next;</span><br><span class=\"line\">        head.next.next = dp(next);</span><br><span class=\"line\">        return head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>2.Iteration<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public ListNode swapPairs(ListNode head) &#123;</span><br><span class=\"line\">        if(head == null || head.next == null)</span><br><span class=\"line\">            return head;</span><br><span class=\"line\">        ListNode gH = head;</span><br><span class=\"line\">        ListNode gT = head.next;</span><br><span class=\"line\">        head = gT;</span><br><span class=\"line\">        while(gH != null &amp;&amp; gT != null)&#123;</span><br><span class=\"line\">            ListNode tmp = gT.next;</span><br><span class=\"line\">            gT.next = gH;</span><br><span class=\"line\">            if(tmp != null &amp;&amp; tmp.next != null)&#123;</span><br><span class=\"line\">                gH.next = tmp.next;</span><br><span class=\"line\">                gH = tmp; gT = tmp.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else&#123;</span><br><span class=\"line\">                gH.next = tmp;</span><br><span class=\"line\">                gH = tmp; gT = null;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> $O(n)$ becasue we iterate over the entire list</p>\n<p><strong>Space Complexity:</strong> For the recursion solution, $O(\\lceil n/2 \\rceil)$ space is necessary to store all the pairs. We cost constant space $O(1)$ for the iteration method.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Intuition-amp-Algorithm\"><a href=\"#Intuition-amp-Algorithm\" class=\"headerlink\" title=\"Intuition &amp; Algorithm\"></a>Intuition &amp; Algorithm</h1><blockquote>\n<p>Question 25 is a more general question of this one.</p>\n</blockquote>\n<p>Suppose there are three pairs $p_0$, $p_1$ and $p_2$. We need to swap nodes in $p_1$, after that, we should reconnect it to it’s adjacent pairs by:</p>\n<script type=\"math/tex; mode=display\">\np_0(1).next=p_1(0)\np_1(1).next=p_2(0)</script><p>For the first pair, $p_0(1)=null$ so we don’t need the first equation and and for the last one, $p_2(0)=null$;</p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><ol>\n<li>Recursion<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public ListNode swapPairs(ListNode head) &#123;</span><br><span class=\"line\">        return dp(head);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private ListNode dp(ListNode head)&#123;</span><br><span class=\"line\">        if(head == null || head.next == null)</span><br><span class=\"line\">            return head;</span><br><span class=\"line\">        ListNode next = head.next.next;</span><br><span class=\"line\">        head.next.next = head;</span><br><span class=\"line\">        head = head.next;</span><br><span class=\"line\">        head.next.next = dp(next);</span><br><span class=\"line\">        return head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>2.Iteration<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public ListNode swapPairs(ListNode head) &#123;</span><br><span class=\"line\">        if(head == null || head.next == null)</span><br><span class=\"line\">            return head;</span><br><span class=\"line\">        ListNode gH = head;</span><br><span class=\"line\">        ListNode gT = head.next;</span><br><span class=\"line\">        head = gT;</span><br><span class=\"line\">        while(gH != null &amp;&amp; gT != null)&#123;</span><br><span class=\"line\">            ListNode tmp = gT.next;</span><br><span class=\"line\">            gT.next = gH;</span><br><span class=\"line\">            if(tmp != null &amp;&amp; tmp.next != null)&#123;</span><br><span class=\"line\">                gH.next = tmp.next;</span><br><span class=\"line\">                gH = tmp; gT = tmp.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else&#123;</span><br><span class=\"line\">                gH.next = tmp;</span><br><span class=\"line\">                gH = tmp; gT = null;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> $O(n)$ becasue we iterate over the entire list</p>\n<p><strong>Space Complexity:</strong> For the recursion solution, $O(\\lceil n/2 \\rceil)$ space is necessary to store all the pairs. We cost constant space $O(1)$ for the iteration method.</p>\n"},{"title":"82 Remove Duplicates from Sorted List II","date":"2019-11-27T06:36:08.000Z","_content":"# Intuition\nThere are several stuff to notice:\n1. Remove the duplicates, keep no one of them\n2. Find the duplicates by three pointers: pre,cur and next, indicating previous node current node and next node. When the value of next node and cur node are equal, move next node to the one that not equal to cur node, and connect it to pre node, so the duplicates are removed.\n\n# Code\n```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        ListNode cur = head;\n        ListNode dummy = new ListNode(0), pre = dummy;\n        dummy.next = head;\n        while(cur != null){\n            ListNode next = cur.next;\n            while(next!=null && next.val == cur.val){\n                next = next.next;\n            }\n            if(cur.next == next){\n                pre.next = cur;\n                cur = cur.next;\n                pre = pre.next;\n            }\n            else\n            {\n                pre.next = next;\n                cur = next;\n            }\n            \n        }\n        return dummy.next;\n    }\n}\n```\n# Complexity\n**Time Complexity:** $O(N)$ We use three pointers to iterate over the list.\n\n**Space Complexity:** $O(1)$\n","source":"_posts/82-Remove-Duplicates-from-Sorted-List-II.md","raw":"---\ntitle: 82 Remove Duplicates from Sorted List II\ndate: 2019-11-27 14:36:08\ntags:\n- list\ncategories:\n- LeetCode\n---\n# Intuition\nThere are several stuff to notice:\n1. Remove the duplicates, keep no one of them\n2. Find the duplicates by three pointers: pre,cur and next, indicating previous node current node and next node. When the value of next node and cur node are equal, move next node to the one that not equal to cur node, and connect it to pre node, so the duplicates are removed.\n\n# Code\n```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        ListNode cur = head;\n        ListNode dummy = new ListNode(0), pre = dummy;\n        dummy.next = head;\n        while(cur != null){\n            ListNode next = cur.next;\n            while(next!=null && next.val == cur.val){\n                next = next.next;\n            }\n            if(cur.next == next){\n                pre.next = cur;\n                cur = cur.next;\n                pre = pre.next;\n            }\n            else\n            {\n                pre.next = next;\n                cur = next;\n            }\n            \n        }\n        return dummy.next;\n    }\n}\n```\n# Complexity\n**Time Complexity:** $O(N)$ We use three pointers to iterate over the list.\n\n**Space Complexity:** $O(1)$\n","slug":"82-Remove-Duplicates-from-Sorted-List-II","published":1,"updated":"2019-11-27T06:38:24.020Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3gx4n1i000vtkbsijtztbtp","content":"<h1 id=\"Intuition\"><a href=\"#Intuition\" class=\"headerlink\" title=\"Intuition\"></a>Intuition</h1><p>There are several stuff to notice:</p>\n<ol>\n<li>Remove the duplicates, keep no one of them</li>\n<li>Find the duplicates by three pointers: pre,cur and next, indicating previous node current node and next node. When the value of next node and cur node are equal, move next node to the one that not equal to cur node, and connect it to pre node, so the duplicates are removed.</li>\n</ol>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public ListNode deleteDuplicates(ListNode head) &#123;</span><br><span class=\"line\">        ListNode cur = head;</span><br><span class=\"line\">        ListNode dummy = new ListNode(0), pre = dummy;</span><br><span class=\"line\">        dummy.next = head;</span><br><span class=\"line\">        while(cur != null)&#123;</span><br><span class=\"line\">            ListNode next = cur.next;</span><br><span class=\"line\">            while(next!=null &amp;&amp; next.val == cur.val)&#123;</span><br><span class=\"line\">                next = next.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if(cur.next == next)&#123;</span><br><span class=\"line\">                pre.next = cur;</span><br><span class=\"line\">                cur = cur.next;</span><br><span class=\"line\">                pre = pre.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                pre.next = next;</span><br><span class=\"line\">                cur = next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dummy.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> $O(N)$ We use three pointers to iterate over the list.</p>\n<p><strong>Space Complexity:</strong> $O(1)$</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Intuition\"><a href=\"#Intuition\" class=\"headerlink\" title=\"Intuition\"></a>Intuition</h1><p>There are several stuff to notice:</p>\n<ol>\n<li>Remove the duplicates, keep no one of them</li>\n<li>Find the duplicates by three pointers: pre,cur and next, indicating previous node current node and next node. When the value of next node and cur node are equal, move next node to the one that not equal to cur node, and connect it to pre node, so the duplicates are removed.</li>\n</ol>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public ListNode deleteDuplicates(ListNode head) &#123;</span><br><span class=\"line\">        ListNode cur = head;</span><br><span class=\"line\">        ListNode dummy = new ListNode(0), pre = dummy;</span><br><span class=\"line\">        dummy.next = head;</span><br><span class=\"line\">        while(cur != null)&#123;</span><br><span class=\"line\">            ListNode next = cur.next;</span><br><span class=\"line\">            while(next!=null &amp;&amp; next.val == cur.val)&#123;</span><br><span class=\"line\">                next = next.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if(cur.next == next)&#123;</span><br><span class=\"line\">                pre.next = cur;</span><br><span class=\"line\">                cur = cur.next;</span><br><span class=\"line\">                pre = pre.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                pre.next = next;</span><br><span class=\"line\">                cur = next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dummy.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> $O(N)$ We use three pointers to iterate over the list.</p>\n<p><strong>Space Complexity:</strong> $O(1)$</p>\n"},{"title":"87 Scramble String","date":"2019-11-06T10:34:07.000Z","comments":1,"_content":"# Intuition\nThis is a ***dynamic programming*** problem. Given two string `S1(1,2,3,...,n)` and `S2(1,2,3,...,n)`, they are scramble if and only if:\n1. `S1(1,2,3,...,i) and S2(1,2,3,...,i) are scramble` and `S1( i+1,...,n) and S2(i+1,...,n) are scramble`\n> For `abb` and `bab`, they can be seperated into two parts: `ab` and `ba` are scramble , `b` and `b`\nare scramble.\n2. `S1(1,2,3,...,i) and S2(n-i+1,n-i+2,...,n) are scramble` and `S1( i+1,...,n) and S2(1,2,...,n-i) are scamble`\n> In the above cases, `ab` and `ba` are scramble because they can be seperated into two parts, `a` and `b`, `b` and `a`, the left part of the first string equals the right part of the second string, the right part of the left equals the left part of the second, they are symmetric.\n\nThe termination condition for this recursion solution is two strings are equal.\n\n# Algorithm\n###### Recusion\n\n*Termination Condition:* If two strings are equal, then they are also scramble.\n\n*Recursion Process:* For `S1(1,2,3,...,n)`,  `S2(1,2,3,...,n)` and a specified substring size `i` ranging from 1 to n, we need to split the strings into two parts, and check if the substrings are scramble according to the illustration stated before.\n\n*Trick:* We can do a precheck before recusion process, it's much less time consumping than recusion. We can store how many times each character appears in both strings, if they are not equal, these two strings can never be scamble. Say `afbihuifafaf` and `ghuiigafsafh`, if we donot have this precheck process, we have to compare:\n\n> `a` and `g`, `fbihuifafaf` and `huiigafsafh` <br/>\n> `a` and `h`, `fbihuifafaf` and `ghuiigafsaf`<br/>\n>`af` and `gh`, `bihuifafaf` and `uiigafsafh` <br/>\n> ...\n\nThat's a huge workload!\n###### Iteration\n\n*State Transition:* dp[n][n][n+1] is state matrix, dp[i][j][k] denotes if substring `S1(i, i+1, ..., i+k-1)` and `S2(j, j+1, ..., j+k-1)` are scramble. So dp[0][0][n] is our final answer. According to above analysis, state transition equation should be:\n```\ndp[i][j][k] = (dp[i][j][p] && dp[i+p][j+p][k-p])||(dp[i][j+k-p][p] && dp[i+p][j][k-p]) p={1,2,...,k-1}\n```\n\n# Code\n###### Recusion\n```\nclass Solution {\n    public boolean isScramble(String s1, String s2) {\n        if(s1.equals(s2))\n            return true;\n        if(s1.length() == 1 && !s1.equals(s2))\n            return false;\n        int[] letters = new int[26];\n        for (int i=0; i<s1.length(); i++) {\n            letters[s1.charAt(i)-'a']++;\n            letters[s2.charAt(i)-'a']--;\n        }\n        for (int i=0; i<26; i++) if (letters[i]!=0) return false;\n        \n        for(int i = 1; i < s1.length(); i++){\n            String s1_left = s1.substring(0, i);\n            String s2_left = s2.substring(0, i);\n            String s1_right = s1.substring(i);\n            String s2_right = s2.substring(i);\n            if(isScramble(s1_left, s2_left) && \n                isScramble(s1_right, s2_right))return true;\n            if(isScramble(s1.substring(0, i), s2.substring(s2.length()-i, s2.length())) && \n                isScramble(s1.substring(i, s1.length()), s2.substring(0, s1.length()-i)))return true;\n        }\n        return false;\n    }\n}\n```\n\n###### Iteration\n```\nclass Solution {\n    public boolean isScramble(String s1, String s2) {\n        if(s1.equals(s2))return true; //include corner case:  \"\" and \"\" \n        int n = s1.length(); // the question statement has clarified s1.length() == s2.length()\n        boolean[][][] dp = new boolean[n][n][n+1];\n        for(int k = 1; k <= n; k++){\n            for(int i = 0; i <= n-k; i++){\n                for(int j = 0; j <= n - k; j++){\n                    if(k == 1){\n                        dp[i][j][k] = s1.substring(i, i+1).equals(s2.substring(j, j+1));\n                    }\n                    else{\n                        dp[i][j][k] = false;\n                        for(int p = 1 ; p < k; p++){\n                            if( (dp[i][j][p]&&dp[i+p][j+p][k-p]) || (dp[i][j+k-p][p]&&dp[i+p][j][k-p]))\n                            {\n                                dp[i][j][k] = true;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0][n];\n    }\n}\n```\n# Complexity\n\n###### Recursion\n\n***Time Complexity:*** O(2^n)\n\n***Space Complexity:** *O(2^n), See the blog [here](http://n00tc0d3r.blogspot.com/2013/05/scramble-string.html)\n\n###### Iteration\n***Time Comlexity:*** For the iteration solution, it's easy to figure out the approximate time complexity, since we have four for loop, it costs O(n^4). The accurate analysis is more complicated, you can refer to discussions [here](https://leetcode.com/problems/scramble-string/discuss/29387/Accepted-Java-solution) or the [blog](http://n00tc0d3r.blogspot.com/2013/05/scramble-string.html).\n\n***Space Complexity:*** O(n^3), costs for the array`dp[n][n][n+1]`\n","source":"_posts/87-Scramble-String.md","raw":"---\ntitle: 87 Scramble String\ndate: 2019-11-06 18:34:07\ncategories:\n- LeetCode\ncomments: true\ntags:\n- dynamic programming\n---\n# Intuition\nThis is a ***dynamic programming*** problem. Given two string `S1(1,2,3,...,n)` and `S2(1,2,3,...,n)`, they are scramble if and only if:\n1. `S1(1,2,3,...,i) and S2(1,2,3,...,i) are scramble` and `S1( i+1,...,n) and S2(i+1,...,n) are scramble`\n> For `abb` and `bab`, they can be seperated into two parts: `ab` and `ba` are scramble , `b` and `b`\nare scramble.\n2. `S1(1,2,3,...,i) and S2(n-i+1,n-i+2,...,n) are scramble` and `S1( i+1,...,n) and S2(1,2,...,n-i) are scamble`\n> In the above cases, `ab` and `ba` are scramble because they can be seperated into two parts, `a` and `b`, `b` and `a`, the left part of the first string equals the right part of the second string, the right part of the left equals the left part of the second, they are symmetric.\n\nThe termination condition for this recursion solution is two strings are equal.\n\n# Algorithm\n###### Recusion\n\n*Termination Condition:* If two strings are equal, then they are also scramble.\n\n*Recursion Process:* For `S1(1,2,3,...,n)`,  `S2(1,2,3,...,n)` and a specified substring size `i` ranging from 1 to n, we need to split the strings into two parts, and check if the substrings are scramble according to the illustration stated before.\n\n*Trick:* We can do a precheck before recusion process, it's much less time consumping than recusion. We can store how many times each character appears in both strings, if they are not equal, these two strings can never be scamble. Say `afbihuifafaf` and `ghuiigafsafh`, if we donot have this precheck process, we have to compare:\n\n> `a` and `g`, `fbihuifafaf` and `huiigafsafh` <br/>\n> `a` and `h`, `fbihuifafaf` and `ghuiigafsaf`<br/>\n>`af` and `gh`, `bihuifafaf` and `uiigafsafh` <br/>\n> ...\n\nThat's a huge workload!\n###### Iteration\n\n*State Transition:* dp[n][n][n+1] is state matrix, dp[i][j][k] denotes if substring `S1(i, i+1, ..., i+k-1)` and `S2(j, j+1, ..., j+k-1)` are scramble. So dp[0][0][n] is our final answer. According to above analysis, state transition equation should be:\n```\ndp[i][j][k] = (dp[i][j][p] && dp[i+p][j+p][k-p])||(dp[i][j+k-p][p] && dp[i+p][j][k-p]) p={1,2,...,k-1}\n```\n\n# Code\n###### Recusion\n```\nclass Solution {\n    public boolean isScramble(String s1, String s2) {\n        if(s1.equals(s2))\n            return true;\n        if(s1.length() == 1 && !s1.equals(s2))\n            return false;\n        int[] letters = new int[26];\n        for (int i=0; i<s1.length(); i++) {\n            letters[s1.charAt(i)-'a']++;\n            letters[s2.charAt(i)-'a']--;\n        }\n        for (int i=0; i<26; i++) if (letters[i]!=0) return false;\n        \n        for(int i = 1; i < s1.length(); i++){\n            String s1_left = s1.substring(0, i);\n            String s2_left = s2.substring(0, i);\n            String s1_right = s1.substring(i);\n            String s2_right = s2.substring(i);\n            if(isScramble(s1_left, s2_left) && \n                isScramble(s1_right, s2_right))return true;\n            if(isScramble(s1.substring(0, i), s2.substring(s2.length()-i, s2.length())) && \n                isScramble(s1.substring(i, s1.length()), s2.substring(0, s1.length()-i)))return true;\n        }\n        return false;\n    }\n}\n```\n\n###### Iteration\n```\nclass Solution {\n    public boolean isScramble(String s1, String s2) {\n        if(s1.equals(s2))return true; //include corner case:  \"\" and \"\" \n        int n = s1.length(); // the question statement has clarified s1.length() == s2.length()\n        boolean[][][] dp = new boolean[n][n][n+1];\n        for(int k = 1; k <= n; k++){\n            for(int i = 0; i <= n-k; i++){\n                for(int j = 0; j <= n - k; j++){\n                    if(k == 1){\n                        dp[i][j][k] = s1.substring(i, i+1).equals(s2.substring(j, j+1));\n                    }\n                    else{\n                        dp[i][j][k] = false;\n                        for(int p = 1 ; p < k; p++){\n                            if( (dp[i][j][p]&&dp[i+p][j+p][k-p]) || (dp[i][j+k-p][p]&&dp[i+p][j][k-p]))\n                            {\n                                dp[i][j][k] = true;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0][n];\n    }\n}\n```\n# Complexity\n\n###### Recursion\n\n***Time Complexity:*** O(2^n)\n\n***Space Complexity:** *O(2^n), See the blog [here](http://n00tc0d3r.blogspot.com/2013/05/scramble-string.html)\n\n###### Iteration\n***Time Comlexity:*** For the iteration solution, it's easy to figure out the approximate time complexity, since we have four for loop, it costs O(n^4). The accurate analysis is more complicated, you can refer to discussions [here](https://leetcode.com/problems/scramble-string/discuss/29387/Accepted-Java-solution) or the [blog](http://n00tc0d3r.blogspot.com/2013/05/scramble-string.html).\n\n***Space Complexity:*** O(n^3), costs for the array`dp[n][n][n+1]`\n","slug":"87-Scramble-String","published":1,"updated":"2019-11-07T04:52:45.102Z","layout":"post","photos":[],"link":"","_id":"ck3gx4n1k000wtkbsi8wlkzgk","content":"<h1 id=\"Intuition\"><a href=\"#Intuition\" class=\"headerlink\" title=\"Intuition\"></a>Intuition</h1><p>This is a <strong><em>dynamic programming</em></strong> problem. Given two string <code>S1(1,2,3,...,n)</code> and <code>S2(1,2,3,...,n)</code>, they are scramble if and only if:</p>\n<ol>\n<li><code>S1(1,2,3,...,i) and S2(1,2,3,...,i) are scramble</code> and <code>S1( i+1,...,n) and S2(i+1,...,n) are scramble</code><blockquote>\n<p>For <code>abb</code> and <code>bab</code>, they can be seperated into two parts: <code>ab</code> and <code>ba</code> are scramble , <code>b</code> and <code>b</code><br>are scramble.</p>\n</blockquote>\n</li>\n<li><code>S1(1,2,3,...,i) and S2(n-i+1,n-i+2,...,n) are scramble</code> and <code>S1( i+1,...,n) and S2(1,2,...,n-i) are scamble</code><blockquote>\n<p>In the above cases, <code>ab</code> and <code>ba</code> are scramble because they can be seperated into two parts, <code>a</code> and <code>b</code>, <code>b</code> and <code>a</code>, the left part of the first string equals the right part of the second string, the right part of the left equals the left part of the second, they are symmetric.</p>\n</blockquote>\n</li>\n</ol>\n<p>The termination condition for this recursion solution is two strings are equal.</p>\n<h1 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h1><h6 id=\"Recusion\"><a href=\"#Recusion\" class=\"headerlink\" title=\"Recusion\"></a>Recusion</h6><p><em>Termination Condition:</em> If two strings are equal, then they are also scramble.</p>\n<p><em>Recursion Process:</em> For <code>S1(1,2,3,...,n)</code>,  <code>S2(1,2,3,...,n)</code> and a specified substring size <code>i</code> ranging from 1 to n, we need to split the strings into two parts, and check if the substrings are scramble according to the illustration stated before.</p>\n<p><em>Trick:</em> We can do a precheck before recusion process, it’s much less time consumping than recusion. We can store how many times each character appears in both strings, if they are not equal, these two strings can never be scamble. Say <code>afbihuifafaf</code> and <code>ghuiigafsafh</code>, if we donot have this precheck process, we have to compare:</p>\n<blockquote>\n<p><code>a</code> and <code>g</code>, <code>fbihuifafaf</code> and <code>huiigafsafh</code> <br><br><code>a</code> and <code>h</code>, <code>fbihuifafaf</code> and <code>ghuiigafsaf</code><br><br><code>af</code> and <code>gh</code>, <code>bihuifafaf</code> and <code>uiigafsafh</code> <br><br>…</p>\n</blockquote>\n<p>That’s a huge workload!</p>\n<h6 id=\"Iteration\"><a href=\"#Iteration\" class=\"headerlink\" title=\"Iteration\"></a>Iteration</h6><p><em>State Transition:</em> dp[n][n][n+1] is state matrix, dp[i][j][k] denotes if substring <code>S1(i, i+1, ..., i+k-1)</code> and <code>S2(j, j+1, ..., j+k-1)</code> are scramble. So dp[0][0][n] is our final answer. According to above analysis, state transition equation should be:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dp[i][j][k] = (dp[i][j][p] &amp;&amp; dp[i+p][j+p][k-p])||(dp[i][j+k-p][p] &amp;&amp; dp[i+p][j][k-p]) p=&#123;1,2,...,k-1&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><h6 id=\"Recusion-1\"><a href=\"#Recusion-1\" class=\"headerlink\" title=\"Recusion\"></a>Recusion</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public boolean isScramble(String s1, String s2) &#123;</span><br><span class=\"line\">        if(s1.equals(s2))</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        if(s1.length() == 1 &amp;&amp; !s1.equals(s2))</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        int[] letters = new int[26];</span><br><span class=\"line\">        for (int i=0; i&lt;s1.length(); i++) &#123;</span><br><span class=\"line\">            letters[s1.charAt(i)-&apos;a&apos;]++;</span><br><span class=\"line\">            letters[s2.charAt(i)-&apos;a&apos;]--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for (int i=0; i&lt;26; i++) if (letters[i]!=0) return false;</span><br><span class=\"line\">        </span><br><span class=\"line\">        for(int i = 1; i &lt; s1.length(); i++)&#123;</span><br><span class=\"line\">            String s1_left = s1.substring(0, i);</span><br><span class=\"line\">            String s2_left = s2.substring(0, i);</span><br><span class=\"line\">            String s1_right = s1.substring(i);</span><br><span class=\"line\">            String s2_right = s2.substring(i);</span><br><span class=\"line\">            if(isScramble(s1_left, s2_left) &amp;&amp; </span><br><span class=\"line\">                isScramble(s1_right, s2_right))return true;</span><br><span class=\"line\">            if(isScramble(s1.substring(0, i), s2.substring(s2.length()-i, s2.length())) &amp;&amp; </span><br><span class=\"line\">                isScramble(s1.substring(i, s1.length()), s2.substring(0, s1.length()-i)))return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"Iteration-1\"><a href=\"#Iteration-1\" class=\"headerlink\" title=\"Iteration\"></a>Iteration</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public boolean isScramble(String s1, String s2) &#123;</span><br><span class=\"line\">        if(s1.equals(s2))return true; //include corner case:  &quot;&quot; and &quot;&quot; </span><br><span class=\"line\">        int n = s1.length(); // the question statement has clarified s1.length() == s2.length()</span><br><span class=\"line\">        boolean[][][] dp = new boolean[n][n][n+1];</span><br><span class=\"line\">        for(int k = 1; k &lt;= n; k++)&#123;</span><br><span class=\"line\">            for(int i = 0; i &lt;= n-k; i++)&#123;</span><br><span class=\"line\">                for(int j = 0; j &lt;= n - k; j++)&#123;</span><br><span class=\"line\">                    if(k == 1)&#123;</span><br><span class=\"line\">                        dp[i][j][k] = s1.substring(i, i+1).equals(s2.substring(j, j+1));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    else&#123;</span><br><span class=\"line\">                        dp[i][j][k] = false;</span><br><span class=\"line\">                        for(int p = 1 ; p &lt; k; p++)&#123;</span><br><span class=\"line\">                            if( (dp[i][j][p]&amp;&amp;dp[i+p][j+p][k-p]) || (dp[i][j+k-p][p]&amp;&amp;dp[i+p][j][k-p]))</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                dp[i][j][k] = true;</span><br><span class=\"line\">                                break;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dp[0][0][n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><h6 id=\"Recursion\"><a href=\"#Recursion\" class=\"headerlink\" title=\"Recursion\"></a>Recursion</h6><p><strong><em>Time Complexity:</em></strong> O(2^n)</p>\n<p><strong>*Space Complexity:</strong> *O(2^n), See the blog <a href=\"http://n00tc0d3r.blogspot.com/2013/05/scramble-string.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">here</a></p>\n<h6 id=\"Iteration-2\"><a href=\"#Iteration-2\" class=\"headerlink\" title=\"Iteration\"></a>Iteration</h6><p><strong><em>Time Comlexity:</em></strong> For the iteration solution, it’s easy to figure out the approximate time complexity, since we have four for loop, it costs O(n^4). The accurate analysis is more complicated, you can refer to discussions <a href=\"https://leetcode.com/problems/scramble-string/discuss/29387/Accepted-Java-solution\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">here</a> or the <a href=\"http://n00tc0d3r.blogspot.com/2013/05/scramble-string.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">blog</a>.</p>\n<p><strong><em>Space Complexity:</em></strong> O(n^3), costs for the array<code>dp[n][n][n+1]</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Intuition\"><a href=\"#Intuition\" class=\"headerlink\" title=\"Intuition\"></a>Intuition</h1><p>This is a <strong><em>dynamic programming</em></strong> problem. Given two string <code>S1(1,2,3,...,n)</code> and <code>S2(1,2,3,...,n)</code>, they are scramble if and only if:</p>\n<ol>\n<li><code>S1(1,2,3,...,i) and S2(1,2,3,...,i) are scramble</code> and <code>S1( i+1,...,n) and S2(i+1,...,n) are scramble</code><blockquote>\n<p>For <code>abb</code> and <code>bab</code>, they can be seperated into two parts: <code>ab</code> and <code>ba</code> are scramble , <code>b</code> and <code>b</code><br>are scramble.</p>\n</blockquote>\n</li>\n<li><code>S1(1,2,3,...,i) and S2(n-i+1,n-i+2,...,n) are scramble</code> and <code>S1( i+1,...,n) and S2(1,2,...,n-i) are scamble</code><blockquote>\n<p>In the above cases, <code>ab</code> and <code>ba</code> are scramble because they can be seperated into two parts, <code>a</code> and <code>b</code>, <code>b</code> and <code>a</code>, the left part of the first string equals the right part of the second string, the right part of the left equals the left part of the second, they are symmetric.</p>\n</blockquote>\n</li>\n</ol>\n<p>The termination condition for this recursion solution is two strings are equal.</p>\n<h1 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h1><h6 id=\"Recusion\"><a href=\"#Recusion\" class=\"headerlink\" title=\"Recusion\"></a>Recusion</h6><p><em>Termination Condition:</em> If two strings are equal, then they are also scramble.</p>\n<p><em>Recursion Process:</em> For <code>S1(1,2,3,...,n)</code>,  <code>S2(1,2,3,...,n)</code> and a specified substring size <code>i</code> ranging from 1 to n, we need to split the strings into two parts, and check if the substrings are scramble according to the illustration stated before.</p>\n<p><em>Trick:</em> We can do a precheck before recusion process, it’s much less time consumping than recusion. We can store how many times each character appears in both strings, if they are not equal, these two strings can never be scamble. Say <code>afbihuifafaf</code> and <code>ghuiigafsafh</code>, if we donot have this precheck process, we have to compare:</p>\n<blockquote>\n<p><code>a</code> and <code>g</code>, <code>fbihuifafaf</code> and <code>huiigafsafh</code> <br><br><code>a</code> and <code>h</code>, <code>fbihuifafaf</code> and <code>ghuiigafsaf</code><br><br><code>af</code> and <code>gh</code>, <code>bihuifafaf</code> and <code>uiigafsafh</code> <br><br>…</p>\n</blockquote>\n<p>That’s a huge workload!</p>\n<h6 id=\"Iteration\"><a href=\"#Iteration\" class=\"headerlink\" title=\"Iteration\"></a>Iteration</h6><p><em>State Transition:</em> dp[n][n][n+1] is state matrix, dp[i][j][k] denotes if substring <code>S1(i, i+1, ..., i+k-1)</code> and <code>S2(j, j+1, ..., j+k-1)</code> are scramble. So dp[0][0][n] is our final answer. According to above analysis, state transition equation should be:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dp[i][j][k] = (dp[i][j][p] &amp;&amp; dp[i+p][j+p][k-p])||(dp[i][j+k-p][p] &amp;&amp; dp[i+p][j][k-p]) p=&#123;1,2,...,k-1&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><h6 id=\"Recusion-1\"><a href=\"#Recusion-1\" class=\"headerlink\" title=\"Recusion\"></a>Recusion</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public boolean isScramble(String s1, String s2) &#123;</span><br><span class=\"line\">        if(s1.equals(s2))</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        if(s1.length() == 1 &amp;&amp; !s1.equals(s2))</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        int[] letters = new int[26];</span><br><span class=\"line\">        for (int i=0; i&lt;s1.length(); i++) &#123;</span><br><span class=\"line\">            letters[s1.charAt(i)-&apos;a&apos;]++;</span><br><span class=\"line\">            letters[s2.charAt(i)-&apos;a&apos;]--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for (int i=0; i&lt;26; i++) if (letters[i]!=0) return false;</span><br><span class=\"line\">        </span><br><span class=\"line\">        for(int i = 1; i &lt; s1.length(); i++)&#123;</span><br><span class=\"line\">            String s1_left = s1.substring(0, i);</span><br><span class=\"line\">            String s2_left = s2.substring(0, i);</span><br><span class=\"line\">            String s1_right = s1.substring(i);</span><br><span class=\"line\">            String s2_right = s2.substring(i);</span><br><span class=\"line\">            if(isScramble(s1_left, s2_left) &amp;&amp; </span><br><span class=\"line\">                isScramble(s1_right, s2_right))return true;</span><br><span class=\"line\">            if(isScramble(s1.substring(0, i), s2.substring(s2.length()-i, s2.length())) &amp;&amp; </span><br><span class=\"line\">                isScramble(s1.substring(i, s1.length()), s2.substring(0, s1.length()-i)))return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"Iteration-1\"><a href=\"#Iteration-1\" class=\"headerlink\" title=\"Iteration\"></a>Iteration</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public boolean isScramble(String s1, String s2) &#123;</span><br><span class=\"line\">        if(s1.equals(s2))return true; //include corner case:  &quot;&quot; and &quot;&quot; </span><br><span class=\"line\">        int n = s1.length(); // the question statement has clarified s1.length() == s2.length()</span><br><span class=\"line\">        boolean[][][] dp = new boolean[n][n][n+1];</span><br><span class=\"line\">        for(int k = 1; k &lt;= n; k++)&#123;</span><br><span class=\"line\">            for(int i = 0; i &lt;= n-k; i++)&#123;</span><br><span class=\"line\">                for(int j = 0; j &lt;= n - k; j++)&#123;</span><br><span class=\"line\">                    if(k == 1)&#123;</span><br><span class=\"line\">                        dp[i][j][k] = s1.substring(i, i+1).equals(s2.substring(j, j+1));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    else&#123;</span><br><span class=\"line\">                        dp[i][j][k] = false;</span><br><span class=\"line\">                        for(int p = 1 ; p &lt; k; p++)&#123;</span><br><span class=\"line\">                            if( (dp[i][j][p]&amp;&amp;dp[i+p][j+p][k-p]) || (dp[i][j+k-p][p]&amp;&amp;dp[i+p][j][k-p]))</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                dp[i][j][k] = true;</span><br><span class=\"line\">                                break;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dp[0][0][n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><h6 id=\"Recursion\"><a href=\"#Recursion\" class=\"headerlink\" title=\"Recursion\"></a>Recursion</h6><p><strong><em>Time Complexity:</em></strong> O(2^n)</p>\n<p><strong>*Space Complexity:</strong> *O(2^n), See the blog <a href=\"http://n00tc0d3r.blogspot.com/2013/05/scramble-string.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">here</a></p>\n<h6 id=\"Iteration-2\"><a href=\"#Iteration-2\" class=\"headerlink\" title=\"Iteration\"></a>Iteration</h6><p><strong><em>Time Comlexity:</em></strong> For the iteration solution, it’s easy to figure out the approximate time complexity, since we have four for loop, it costs O(n^4). The accurate analysis is more complicated, you can refer to discussions <a href=\"https://leetcode.com/problems/scramble-string/discuss/29387/Accepted-Java-solution\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">here</a> or the <a href=\"http://n00tc0d3r.blogspot.com/2013/05/scramble-string.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">blog</a>.</p>\n<p><strong><em>Space Complexity:</em></strong> O(n^3), costs for the array<code>dp[n][n][n+1]</code></p>\n"},{"title":"99 Recover Binary Search Tree","date":"2019-11-04T16:08:35.000Z","comments":1,"_content":"## Intuition & Algorithm\nAccording to the location of the two nodes being exchanged, it can be divided into five cases, assuming that the original sequence is 1，2，3，4，5，6，7，the two node locations exchanged arei, j\n\n1. The two elements of the exchange are in the middle of the sequence, without the situation on both sides, say 2,6,  then\n    * Before Exchange   `a[i-1] < a[i] < a[i+1]` `a[j-1] < a[j] < a[j+1]`\n    * After Exchange  &nbsp; `a[i-1] < a[i] > a[i+1]` `a[j-1] > a[j] < a[j+1]`\n    * Different Part &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;` a[i] > a[i+1]` `a[j-1] > a[j]`\n2. The smaller element is in the first place, the larger element is in the middle of the sequence, such as 1,5, then\n    * Before Exchange   `a[i] < a[i+1]` `a[j-1] < a[j] < a[j+1]`\n    * After Exchange   &nbsp; `a[i] > a[i+1]` `a[j-1] > a[j] < a[j+1]`\n    * Different Part &nbsp;&nbsp;&nbsp;&nbsp; ` a[i] > a[i+1]` `a[j-1] > a[j]`\n3. The smaller element is in the middle of the sequence, the larger element is at the end, such as 3, 7, then\n    * Before Exchange   `a[i-1] < a[i] < a[i+1]` `a[j-1] < a[j]`\n    * After Exchange &nbsp;  `a[i-1] < a[i] > a[i+1]` `a[j-1] > a[j]`\n    * Different Part &nbsp;&nbsp;&nbsp;&nbsp; ` a[i] > a[i+1]` &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;`a[j-1] > a[j]`\n4. The smaller elements are at the top of the sequence, and the larger ones are at the end, ie 1,7,  then:\n    * Before Exchange   ` a[i] < a[i+1]` `a[j-1] < a[j]`\n    * After Exchange   ` a[i] > a[i+1]` `a[j-1] > a[j]`\n    * Different Part &nbsp;&nbsp;&nbsp; ` a[i] > a[i+1]` `a[j-1] > a[j]`\n5. adjacent elements， say 3 and 7， then\n    * Before Exchange   ` a[i] < a[i+1]` \n    * After Exchange   ` a[i] > a[i+1]` \n    * Different Part&nbsp;&nbsp;&nbsp; ` a[i] > a[i+1]` \n\nTherefore, by detecting the anomaly, the two elements exchanged can be found. The anomaly can be summarized as one case: ` a[k] > a[k+1]`. In the case of an exception, the kth point and k+1th point can both be the exchange position, depending on the number of occurrence of the anomaly. If it is the first time an exception occurs, it must be that the larger element is changed to the front, so k is the abnormal point. If it is the second time, it must be that the  smaller element is changed to the back, so k+1 is the abnormal point, and there is an adjacent case, that is, the exception only appears once, and can be assumed by the **The two positions of the secondary anomaly are all abnormal points, and if a second exception occurs, the smaller abnormal points are overlayed.**.\n\nThe Java code is as follows, it should be noted that\n- The value of the two nodes is directly exchanged in the code. It is also very simple to exchange two nodes.\n- `A solution using O(n) space is pretty straight forward.` this narrative should refer to `using an array with length n to store the binary tree after the traversal, and then find the location of the two exceptions.` This algorithm is easy to implement, and the solution in the constant space should be referred to use constant space except traversal. Or think so, to find the two exchanged points we  must traverse over all the nodes, so the consumption of traversing the tree is inevitable.\n\n# Complexity\n**Time complexity: ** Detecting anomalies requires traversing all nodes, so it is O(N)\n\n**Spatial complexity** See the analysis in the previous section. Strictly consider the consumption of the stack in recursion is O(logN)\n```\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    TreeNode pre, small, large;\n    public void recoverTree(TreeNode root) {\n        inTraverse(root);\n        int v1 = small.val;\n        small.val = large.val;\n        large.val = v1;\n    }\n    \n    void inTraverse(TreeNode root){\n        if(root == null)return;\n        inTraverse(root.left);\n        if(pre == null){// 第一个节点\n            pre  = root;\n        }\n        else{\n            if(root.val < pre.val){\n                if(large == null){\n                    large = pre;\n                    small = root;\n                }\n                else\n                    small = root;\n            }\n            pre = root;\n        }\n        inTraverse(root.right);\n    }\n    \n}\n```\n\n","source":"_posts/99-Recover-Binary-Search-Tree.md","raw":"---\ntitle: 99 Recover Binary Search Tree\ndate: 2019-11-05 00:08:35\ncategories:\n- LeetCode\ncomments: true\ntags:\n- binary tree\n---\n## Intuition & Algorithm\nAccording to the location of the two nodes being exchanged, it can be divided into five cases, assuming that the original sequence is 1，2，3，4，5，6，7，the two node locations exchanged arei, j\n\n1. The two elements of the exchange are in the middle of the sequence, without the situation on both sides, say 2,6,  then\n    * Before Exchange   `a[i-1] < a[i] < a[i+1]` `a[j-1] < a[j] < a[j+1]`\n    * After Exchange  &nbsp; `a[i-1] < a[i] > a[i+1]` `a[j-1] > a[j] < a[j+1]`\n    * Different Part &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;` a[i] > a[i+1]` `a[j-1] > a[j]`\n2. The smaller element is in the first place, the larger element is in the middle of the sequence, such as 1,5, then\n    * Before Exchange   `a[i] < a[i+1]` `a[j-1] < a[j] < a[j+1]`\n    * After Exchange   &nbsp; `a[i] > a[i+1]` `a[j-1] > a[j] < a[j+1]`\n    * Different Part &nbsp;&nbsp;&nbsp;&nbsp; ` a[i] > a[i+1]` `a[j-1] > a[j]`\n3. The smaller element is in the middle of the sequence, the larger element is at the end, such as 3, 7, then\n    * Before Exchange   `a[i-1] < a[i] < a[i+1]` `a[j-1] < a[j]`\n    * After Exchange &nbsp;  `a[i-1] < a[i] > a[i+1]` `a[j-1] > a[j]`\n    * Different Part &nbsp;&nbsp;&nbsp;&nbsp; ` a[i] > a[i+1]` &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;`a[j-1] > a[j]`\n4. The smaller elements are at the top of the sequence, and the larger ones are at the end, ie 1,7,  then:\n    * Before Exchange   ` a[i] < a[i+1]` `a[j-1] < a[j]`\n    * After Exchange   ` a[i] > a[i+1]` `a[j-1] > a[j]`\n    * Different Part &nbsp;&nbsp;&nbsp; ` a[i] > a[i+1]` `a[j-1] > a[j]`\n5. adjacent elements， say 3 and 7， then\n    * Before Exchange   ` a[i] < a[i+1]` \n    * After Exchange   ` a[i] > a[i+1]` \n    * Different Part&nbsp;&nbsp;&nbsp; ` a[i] > a[i+1]` \n\nTherefore, by detecting the anomaly, the two elements exchanged can be found. The anomaly can be summarized as one case: ` a[k] > a[k+1]`. In the case of an exception, the kth point and k+1th point can both be the exchange position, depending on the number of occurrence of the anomaly. If it is the first time an exception occurs, it must be that the larger element is changed to the front, so k is the abnormal point. If it is the second time, it must be that the  smaller element is changed to the back, so k+1 is the abnormal point, and there is an adjacent case, that is, the exception only appears once, and can be assumed by the **The two positions of the secondary anomaly are all abnormal points, and if a second exception occurs, the smaller abnormal points are overlayed.**.\n\nThe Java code is as follows, it should be noted that\n- The value of the two nodes is directly exchanged in the code. It is also very simple to exchange two nodes.\n- `A solution using O(n) space is pretty straight forward.` this narrative should refer to `using an array with length n to store the binary tree after the traversal, and then find the location of the two exceptions.` This algorithm is easy to implement, and the solution in the constant space should be referred to use constant space except traversal. Or think so, to find the two exchanged points we  must traverse over all the nodes, so the consumption of traversing the tree is inevitable.\n\n# Complexity\n**Time complexity: ** Detecting anomalies requires traversing all nodes, so it is O(N)\n\n**Spatial complexity** See the analysis in the previous section. Strictly consider the consumption of the stack in recursion is O(logN)\n```\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    TreeNode pre, small, large;\n    public void recoverTree(TreeNode root) {\n        inTraverse(root);\n        int v1 = small.val;\n        small.val = large.val;\n        large.val = v1;\n    }\n    \n    void inTraverse(TreeNode root){\n        if(root == null)return;\n        inTraverse(root.left);\n        if(pre == null){// 第一个节点\n            pre  = root;\n        }\n        else{\n            if(root.val < pre.val){\n                if(large == null){\n                    large = pre;\n                    small = root;\n                }\n                else\n                    small = root;\n            }\n            pre = root;\n        }\n        inTraverse(root.right);\n    }\n    \n}\n```\n\n","slug":"99-Recover-Binary-Search-Tree","published":1,"updated":"2019-11-06T10:35:26.387Z","layout":"post","photos":[],"link":"","_id":"ck3gx4n1m000ztkbs8bdldcst","content":"<h2 id=\"Intuition-amp-Algorithm\"><a href=\"#Intuition-amp-Algorithm\" class=\"headerlink\" title=\"Intuition &amp; Algorithm\"></a>Intuition &amp; Algorithm</h2><p>According to the location of the two nodes being exchanged, it can be divided into five cases, assuming that the original sequence is 1，2，3，4，5，6，7，the two node locations exchanged arei, j</p>\n<ol>\n<li>The two elements of the exchange are in the middle of the sequence, without the situation on both sides, say 2,6,  then<ul>\n<li>Before Exchange   <code>a[i-1] &lt; a[i] &lt; a[i+1]</code> <code>a[j-1] &lt; a[j] &lt; a[j+1]</code></li>\n<li>After Exchange  &nbsp; <code>a[i-1] &lt; a[i] &gt; a[i+1]</code> <code>a[j-1] &gt; a[j] &lt; a[j+1]</code></li>\n<li>Different Part &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>a[i] &gt; a[i+1]</code> <code>a[j-1] &gt; a[j]</code></li>\n</ul>\n</li>\n<li>The smaller element is in the first place, the larger element is in the middle of the sequence, such as 1,5, then<ul>\n<li>Before Exchange   <code>a[i] &lt; a[i+1]</code> <code>a[j-1] &lt; a[j] &lt; a[j+1]</code></li>\n<li>After Exchange   &nbsp; <code>a[i] &gt; a[i+1]</code> <code>a[j-1] &gt; a[j] &lt; a[j+1]</code></li>\n<li>Different Part &nbsp;&nbsp;&nbsp;&nbsp; <code>a[i] &gt; a[i+1]</code> <code>a[j-1] &gt; a[j]</code></li>\n</ul>\n</li>\n<li>The smaller element is in the middle of the sequence, the larger element is at the end, such as 3, 7, then<ul>\n<li>Before Exchange   <code>a[i-1] &lt; a[i] &lt; a[i+1]</code> <code>a[j-1] &lt; a[j]</code></li>\n<li>After Exchange &nbsp;  <code>a[i-1] &lt; a[i] &gt; a[i+1]</code> <code>a[j-1] &gt; a[j]</code></li>\n<li>Different Part &nbsp;&nbsp;&nbsp;&nbsp; <code>a[i] &gt; a[i+1]</code> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;<code>a[j-1] &gt; a[j]</code></li>\n</ul>\n</li>\n<li>The smaller elements are at the top of the sequence, and the larger ones are at the end, ie 1,7,  then:<ul>\n<li>Before Exchange   <code>a[i] &lt; a[i+1]</code> <code>a[j-1] &lt; a[j]</code></li>\n<li>After Exchange   <code>a[i] &gt; a[i+1]</code> <code>a[j-1] &gt; a[j]</code></li>\n<li>Different Part &nbsp;&nbsp;&nbsp; <code>a[i] &gt; a[i+1]</code> <code>a[j-1] &gt; a[j]</code></li>\n</ul>\n</li>\n<li>adjacent elements， say 3 and 7， then<ul>\n<li>Before Exchange   <code>a[i] &lt; a[i+1]</code> </li>\n<li>After Exchange   <code>a[i] &gt; a[i+1]</code> </li>\n<li>Different Part&nbsp;&nbsp;&nbsp; <code>a[i] &gt; a[i+1]</code> </li>\n</ul>\n</li>\n</ol>\n<p>Therefore, by detecting the anomaly, the two elements exchanged can be found. The anomaly can be summarized as one case: <code>a[k] &gt; a[k+1]</code>. In the case of an exception, the kth point and k+1th point can both be the exchange position, depending on the number of occurrence of the anomaly. If it is the first time an exception occurs, it must be that the larger element is changed to the front, so k is the abnormal point. If it is the second time, it must be that the  smaller element is changed to the back, so k+1 is the abnormal point, and there is an adjacent case, that is, the exception only appears once, and can be assumed by the <strong>The two positions of the secondary anomaly are all abnormal points, and if a second exception occurs, the smaller abnormal points are overlayed.</strong>.</p>\n<p>The Java code is as follows, it should be noted that</p>\n<ul>\n<li>The value of the two nodes is directly exchanged in the code. It is also very simple to exchange two nodes.</li>\n<li><code>A solution using O(n) space is pretty straight forward.</code> this narrative should refer to <code>using an array with length n to store the binary tree after the traversal, and then find the location of the two exceptions.</code> This algorithm is easy to implement, and the solution in the constant space should be referred to use constant space except traversal. Or think so, to find the two exchanged points we  must traverse over all the nodes, so the consumption of traversing the tree is inevitable.</li>\n</ul>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time complexity: </strong> Detecting anomalies requires traversing all nodes, so it is O(N)</p>\n<p><strong>Spatial complexity</strong> See the analysis in the previous section. Strictly consider the consumption of the stack in recursion is O(logN)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for a binary tree node.</span><br><span class=\"line\"> * public class TreeNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     TreeNode left;</span><br><span class=\"line\"> *     TreeNode right;</span><br><span class=\"line\"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    TreeNode pre, small, large;</span><br><span class=\"line\">    public void recoverTree(TreeNode root) &#123;</span><br><span class=\"line\">        inTraverse(root);</span><br><span class=\"line\">        int v1 = small.val;</span><br><span class=\"line\">        small.val = large.val;</span><br><span class=\"line\">        large.val = v1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    void inTraverse(TreeNode root)&#123;</span><br><span class=\"line\">        if(root == null)return;</span><br><span class=\"line\">        inTraverse(root.left);</span><br><span class=\"line\">        if(pre == null)&#123;// 第一个节点</span><br><span class=\"line\">            pre  = root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else&#123;</span><br><span class=\"line\">            if(root.val &lt; pre.val)&#123;</span><br><span class=\"line\">                if(large == null)&#123;</span><br><span class=\"line\">                    large = pre;</span><br><span class=\"line\">                    small = root;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else</span><br><span class=\"line\">                    small = root;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            pre = root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        inTraverse(root.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Intuition-amp-Algorithm\"><a href=\"#Intuition-amp-Algorithm\" class=\"headerlink\" title=\"Intuition &amp; Algorithm\"></a>Intuition &amp; Algorithm</h2><p>According to the location of the two nodes being exchanged, it can be divided into five cases, assuming that the original sequence is 1，2，3，4，5，6，7，the two node locations exchanged arei, j</p>\n<ol>\n<li>The two elements of the exchange are in the middle of the sequence, without the situation on both sides, say 2,6,  then<ul>\n<li>Before Exchange   <code>a[i-1] &lt; a[i] &lt; a[i+1]</code> <code>a[j-1] &lt; a[j] &lt; a[j+1]</code></li>\n<li>After Exchange  &nbsp; <code>a[i-1] &lt; a[i] &gt; a[i+1]</code> <code>a[j-1] &gt; a[j] &lt; a[j+1]</code></li>\n<li>Different Part &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>a[i] &gt; a[i+1]</code> <code>a[j-1] &gt; a[j]</code></li>\n</ul>\n</li>\n<li>The smaller element is in the first place, the larger element is in the middle of the sequence, such as 1,5, then<ul>\n<li>Before Exchange   <code>a[i] &lt; a[i+1]</code> <code>a[j-1] &lt; a[j] &lt; a[j+1]</code></li>\n<li>After Exchange   &nbsp; <code>a[i] &gt; a[i+1]</code> <code>a[j-1] &gt; a[j] &lt; a[j+1]</code></li>\n<li>Different Part &nbsp;&nbsp;&nbsp;&nbsp; <code>a[i] &gt; a[i+1]</code> <code>a[j-1] &gt; a[j]</code></li>\n</ul>\n</li>\n<li>The smaller element is in the middle of the sequence, the larger element is at the end, such as 3, 7, then<ul>\n<li>Before Exchange   <code>a[i-1] &lt; a[i] &lt; a[i+1]</code> <code>a[j-1] &lt; a[j]</code></li>\n<li>After Exchange &nbsp;  <code>a[i-1] &lt; a[i] &gt; a[i+1]</code> <code>a[j-1] &gt; a[j]</code></li>\n<li>Different Part &nbsp;&nbsp;&nbsp;&nbsp; <code>a[i] &gt; a[i+1]</code> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;<code>a[j-1] &gt; a[j]</code></li>\n</ul>\n</li>\n<li>The smaller elements are at the top of the sequence, and the larger ones are at the end, ie 1,7,  then:<ul>\n<li>Before Exchange   <code>a[i] &lt; a[i+1]</code> <code>a[j-1] &lt; a[j]</code></li>\n<li>After Exchange   <code>a[i] &gt; a[i+1]</code> <code>a[j-1] &gt; a[j]</code></li>\n<li>Different Part &nbsp;&nbsp;&nbsp; <code>a[i] &gt; a[i+1]</code> <code>a[j-1] &gt; a[j]</code></li>\n</ul>\n</li>\n<li>adjacent elements， say 3 and 7， then<ul>\n<li>Before Exchange   <code>a[i] &lt; a[i+1]</code> </li>\n<li>After Exchange   <code>a[i] &gt; a[i+1]</code> </li>\n<li>Different Part&nbsp;&nbsp;&nbsp; <code>a[i] &gt; a[i+1]</code> </li>\n</ul>\n</li>\n</ol>\n<p>Therefore, by detecting the anomaly, the two elements exchanged can be found. The anomaly can be summarized as one case: <code>a[k] &gt; a[k+1]</code>. In the case of an exception, the kth point and k+1th point can both be the exchange position, depending on the number of occurrence of the anomaly. If it is the first time an exception occurs, it must be that the larger element is changed to the front, so k is the abnormal point. If it is the second time, it must be that the  smaller element is changed to the back, so k+1 is the abnormal point, and there is an adjacent case, that is, the exception only appears once, and can be assumed by the <strong>The two positions of the secondary anomaly are all abnormal points, and if a second exception occurs, the smaller abnormal points are overlayed.</strong>.</p>\n<p>The Java code is as follows, it should be noted that</p>\n<ul>\n<li>The value of the two nodes is directly exchanged in the code. It is also very simple to exchange two nodes.</li>\n<li><code>A solution using O(n) space is pretty straight forward.</code> this narrative should refer to <code>using an array with length n to store the binary tree after the traversal, and then find the location of the two exceptions.</code> This algorithm is easy to implement, and the solution in the constant space should be referred to use constant space except traversal. Or think so, to find the two exchanged points we  must traverse over all the nodes, so the consumption of traversing the tree is inevitable.</li>\n</ul>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time complexity: </strong> Detecting anomalies requires traversing all nodes, so it is O(N)</p>\n<p><strong>Spatial complexity</strong> See the analysis in the previous section. Strictly consider the consumption of the stack in recursion is O(logN)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for a binary tree node.</span><br><span class=\"line\"> * public class TreeNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     TreeNode left;</span><br><span class=\"line\"> *     TreeNode right;</span><br><span class=\"line\"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    TreeNode pre, small, large;</span><br><span class=\"line\">    public void recoverTree(TreeNode root) &#123;</span><br><span class=\"line\">        inTraverse(root);</span><br><span class=\"line\">        int v1 = small.val;</span><br><span class=\"line\">        small.val = large.val;</span><br><span class=\"line\">        large.val = v1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    void inTraverse(TreeNode root)&#123;</span><br><span class=\"line\">        if(root == null)return;</span><br><span class=\"line\">        inTraverse(root.left);</span><br><span class=\"line\">        if(pre == null)&#123;// 第一个节点</span><br><span class=\"line\">            pre  = root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else&#123;</span><br><span class=\"line\">            if(root.val &lt; pre.val)&#123;</span><br><span class=\"line\">                if(large == null)&#123;</span><br><span class=\"line\">                    large = pre;</span><br><span class=\"line\">                    small = root;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else</span><br><span class=\"line\">                    small = root;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            pre = root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        inTraverse(root.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"25 Reverse Nodes in k-Group","date":"2019-11-23T13:25:25.000Z","_content":"# Intuition & Algorithm\nThe very intuitive method to solve this problem is:\n1. splice the List into k nodes a group\n2. reverse the group list\n3. reconnect groups\n\nA simple implementation is recursion, first reverse the last group, return its head, and then reverse the group before the last one, set its tail to last group's head and return current group head. The whole process goes until the first group is reversed and its tail is set, head is the final answer. The iteration version of this method is using a stack to store each group's head, the algorithm goes similar.\n\nAnother algorithm not so straight-forward I call it forward iteration. Because we don't reverse the group from the last one to the first one, we reverse the first group and record it's tail and next group's head, and then connect them together.\n# Code\n1. Forward Iteration \n```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode reverseKGroup(ListNode head, int k) {\n        ListNode dummy = new ListNode(0);\n        dummy.next = head;\n        int n = 0;\n        ListNode c = head;\n        while(c!=null){\n            n++;c=c.next;\n        }\n        ListNode pre = dummy, tail = head;\n        while(n>=k){a\n            for(int i = 1 ; i < k; i++){\n                ListNode next = tail.next.next;\n                tail.next.next = pre.next;\n                pre.next = tail.next;\n                tail.next = next;\n            }\n            pre = tail;\n            tail = tail.next;\n            n-=k;\n        }\n        return dummy.next;\n    }\n}\n```\n2. Backward Recursion\n```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n   public ListNode reverseKGroup(ListNode head, int k) {\n    ListNode curr = head;\n    int count = 0;\n    while (curr != null && count != k) {\n        curr = curr.next;\n        count++;\n    }\n    if (count == k) { \n        curr = reverseKGroup(curr, k); \n        while (count-- > 0) { \n            ListNode tmp = head.next; \n            head.next = curr;  \n            curr = head; \n            head = tmp; \n        }\n        head = curr;\n    }\n    return head;\n}\n}\n```\n3. Backward Iteration\n```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode reverseKGroup(ListNode head, int k) {\n        // If less than k nodes, return directly\n        if(k<=1)return head;\n        List<ListNode> stack = new LinkedList<>();\n        int count = 0;\n        ListNode cur = head, lastHead = null;\n        int start = 0;\n        while(cur != null){\n            count++;\n            if(count % k == 1)stack.add(cur);\n            cur = cur.next;\n        }\n        start = stack.size()-1;\n        if(count < k)return head;\n        if(count % k != 0)\n        {\n            lastHead = stack.get(start--);\n        }\n        for(int i = start; i>=0; i--){\n            lastHead = reverseGroup(stack.get(i), lastHead, k);\n        }\n        return lastHead;\n    }\n    private ListNode reverseGroup(ListNode head, ListNode lastHead, int k){\n        ListNode cur = head, next = head.next;\n        while(k-- > 0){\n            cur.next = lastHead;\n            lastHead = cur;\n            cur = next;\n            if(cur != null)\n            next = cur.next;\n        }\n        return lastHead;\n    }\n    \n}\n```\n\n# Complexity\n\n**Time Complexity:** $O(n)$ All the solutions are linear since we have to traverse over the entire list.\n\n**Space Complexity:** For the forward iteration solution it's $O(1)$, for the other two, we need $O(\\lceil n/k \\rceil)$ to store the head node of all groups.\n\n","source":"_posts/25-Reverse-Nodes-in-k-Group.md","raw":"---\ntitle: 25 Reverse Nodes in k-Group\ndate: 2019-11-23 21:25:25\ntags:\n- list\ncategories:\n- LeetCode\n---\n# Intuition & Algorithm\nThe very intuitive method to solve this problem is:\n1. splice the List into k nodes a group\n2. reverse the group list\n3. reconnect groups\n\nA simple implementation is recursion, first reverse the last group, return its head, and then reverse the group before the last one, set its tail to last group's head and return current group head. The whole process goes until the first group is reversed and its tail is set, head is the final answer. The iteration version of this method is using a stack to store each group's head, the algorithm goes similar.\n\nAnother algorithm not so straight-forward I call it forward iteration. Because we don't reverse the group from the last one to the first one, we reverse the first group and record it's tail and next group's head, and then connect them together.\n# Code\n1. Forward Iteration \n```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode reverseKGroup(ListNode head, int k) {\n        ListNode dummy = new ListNode(0);\n        dummy.next = head;\n        int n = 0;\n        ListNode c = head;\n        while(c!=null){\n            n++;c=c.next;\n        }\n        ListNode pre = dummy, tail = head;\n        while(n>=k){a\n            for(int i = 1 ; i < k; i++){\n                ListNode next = tail.next.next;\n                tail.next.next = pre.next;\n                pre.next = tail.next;\n                tail.next = next;\n            }\n            pre = tail;\n            tail = tail.next;\n            n-=k;\n        }\n        return dummy.next;\n    }\n}\n```\n2. Backward Recursion\n```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n   public ListNode reverseKGroup(ListNode head, int k) {\n    ListNode curr = head;\n    int count = 0;\n    while (curr != null && count != k) {\n        curr = curr.next;\n        count++;\n    }\n    if (count == k) { \n        curr = reverseKGroup(curr, k); \n        while (count-- > 0) { \n            ListNode tmp = head.next; \n            head.next = curr;  \n            curr = head; \n            head = tmp; \n        }\n        head = curr;\n    }\n    return head;\n}\n}\n```\n3. Backward Iteration\n```\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode reverseKGroup(ListNode head, int k) {\n        // If less than k nodes, return directly\n        if(k<=1)return head;\n        List<ListNode> stack = new LinkedList<>();\n        int count = 0;\n        ListNode cur = head, lastHead = null;\n        int start = 0;\n        while(cur != null){\n            count++;\n            if(count % k == 1)stack.add(cur);\n            cur = cur.next;\n        }\n        start = stack.size()-1;\n        if(count < k)return head;\n        if(count % k != 0)\n        {\n            lastHead = stack.get(start--);\n        }\n        for(int i = start; i>=0; i--){\n            lastHead = reverseGroup(stack.get(i), lastHead, k);\n        }\n        return lastHead;\n    }\n    private ListNode reverseGroup(ListNode head, ListNode lastHead, int k){\n        ListNode cur = head, next = head.next;\n        while(k-- > 0){\n            cur.next = lastHead;\n            lastHead = cur;\n            cur = next;\n            if(cur != null)\n            next = cur.next;\n        }\n        return lastHead;\n    }\n    \n}\n```\n\n# Complexity\n\n**Time Complexity:** $O(n)$ All the solutions are linear since we have to traverse over the entire list.\n\n**Space Complexity:** For the forward iteration solution it's $O(1)$, for the other two, we need $O(\\lceil n/k \\rceil)$ to store the head node of all groups.\n\n","slug":"25-Reverse-Nodes-in-k-Group","published":1,"updated":"2019-11-23T13:27:25.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3gx4n1n0010tkbst27ofn3w","content":"<h1 id=\"Intuition-amp-Algorithm\"><a href=\"#Intuition-amp-Algorithm\" class=\"headerlink\" title=\"Intuition &amp; Algorithm\"></a>Intuition &amp; Algorithm</h1><p>The very intuitive method to solve this problem is:</p>\n<ol>\n<li>splice the List into k nodes a group</li>\n<li>reverse the group list</li>\n<li>reconnect groups</li>\n</ol>\n<p>A simple implementation is recursion, first reverse the last group, return its head, and then reverse the group before the last one, set its tail to last group’s head and return current group head. The whole process goes until the first group is reversed and its tail is set, head is the final answer. The iteration version of this method is using a stack to store each group’s head, the algorithm goes similar.</p>\n<p>Another algorithm not so straight-forward I call it forward iteration. Because we don’t reverse the group from the last one to the first one, we reverse the first group and record it’s tail and next group’s head, and then connect them together.</p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><ol>\n<li><p>Forward Iteration </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public ListNode reverseKGroup(ListNode head, int k) &#123;</span><br><span class=\"line\">        ListNode dummy = new ListNode(0);</span><br><span class=\"line\">        dummy.next = head;</span><br><span class=\"line\">        int n = 0;</span><br><span class=\"line\">        ListNode c = head;</span><br><span class=\"line\">        while(c!=null)&#123;</span><br><span class=\"line\">            n++;c=c.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode pre = dummy, tail = head;</span><br><span class=\"line\">        while(n&gt;=k)&#123;a</span><br><span class=\"line\">            for(int i = 1 ; i &lt; k; i++)&#123;</span><br><span class=\"line\">                ListNode next = tail.next.next;</span><br><span class=\"line\">                tail.next.next = pre.next;</span><br><span class=\"line\">                pre.next = tail.next;</span><br><span class=\"line\">                tail.next = next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            pre = tail;</span><br><span class=\"line\">            tail = tail.next;</span><br><span class=\"line\">            n-=k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dummy.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Backward Recursion</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">   public ListNode reverseKGroup(ListNode head, int k) &#123;</span><br><span class=\"line\">    ListNode curr = head;</span><br><span class=\"line\">    int count = 0;</span><br><span class=\"line\">    while (curr != null &amp;&amp; count != k) &#123;</span><br><span class=\"line\">        curr = curr.next;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (count == k) &#123; </span><br><span class=\"line\">        curr = reverseKGroup(curr, k); </span><br><span class=\"line\">        while (count-- &gt; 0) &#123; </span><br><span class=\"line\">            ListNode tmp = head.next; </span><br><span class=\"line\">            head.next = curr;  </span><br><span class=\"line\">            curr = head; </span><br><span class=\"line\">            head = tmp; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        head = curr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return head;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Backward Iteration</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public ListNode reverseKGroup(ListNode head, int k) &#123;</span><br><span class=\"line\">        // If less than k nodes, return directly</span><br><span class=\"line\">        if(k&lt;=1)return head;</span><br><span class=\"line\">        List&lt;ListNode&gt; stack = new LinkedList&lt;&gt;();</span><br><span class=\"line\">        int count = 0;</span><br><span class=\"line\">        ListNode cur = head, lastHead = null;</span><br><span class=\"line\">        int start = 0;</span><br><span class=\"line\">        while(cur != null)&#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            if(count % k == 1)stack.add(cur);</span><br><span class=\"line\">            cur = cur.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        start = stack.size()-1;</span><br><span class=\"line\">        if(count &lt; k)return head;</span><br><span class=\"line\">        if(count % k != 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            lastHead = stack.get(start--);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for(int i = start; i&gt;=0; i--)&#123;</span><br><span class=\"line\">            lastHead = reverseGroup(stack.get(i), lastHead, k);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return lastHead;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private ListNode reverseGroup(ListNode head, ListNode lastHead, int k)&#123;</span><br><span class=\"line\">        ListNode cur = head, next = head.next;</span><br><span class=\"line\">        while(k-- &gt; 0)&#123;</span><br><span class=\"line\">            cur.next = lastHead;</span><br><span class=\"line\">            lastHead = cur;</span><br><span class=\"line\">            cur = next;</span><br><span class=\"line\">            if(cur != null)</span><br><span class=\"line\">            next = cur.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return lastHead;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> $O(n)$ All the solutions are linear since we have to traverse over the entire list.</p>\n<p><strong>Space Complexity:</strong> For the forward iteration solution it’s $O(1)$, for the other two, we need $O(\\lceil n/k \\rceil)$ to store the head node of all groups.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Intuition-amp-Algorithm\"><a href=\"#Intuition-amp-Algorithm\" class=\"headerlink\" title=\"Intuition &amp; Algorithm\"></a>Intuition &amp; Algorithm</h1><p>The very intuitive method to solve this problem is:</p>\n<ol>\n<li>splice the List into k nodes a group</li>\n<li>reverse the group list</li>\n<li>reconnect groups</li>\n</ol>\n<p>A simple implementation is recursion, first reverse the last group, return its head, and then reverse the group before the last one, set its tail to last group’s head and return current group head. The whole process goes until the first group is reversed and its tail is set, head is the final answer. The iteration version of this method is using a stack to store each group’s head, the algorithm goes similar.</p>\n<p>Another algorithm not so straight-forward I call it forward iteration. Because we don’t reverse the group from the last one to the first one, we reverse the first group and record it’s tail and next group’s head, and then connect them together.</p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><ol>\n<li><p>Forward Iteration </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public ListNode reverseKGroup(ListNode head, int k) &#123;</span><br><span class=\"line\">        ListNode dummy = new ListNode(0);</span><br><span class=\"line\">        dummy.next = head;</span><br><span class=\"line\">        int n = 0;</span><br><span class=\"line\">        ListNode c = head;</span><br><span class=\"line\">        while(c!=null)&#123;</span><br><span class=\"line\">            n++;c=c.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode pre = dummy, tail = head;</span><br><span class=\"line\">        while(n&gt;=k)&#123;a</span><br><span class=\"line\">            for(int i = 1 ; i &lt; k; i++)&#123;</span><br><span class=\"line\">                ListNode next = tail.next.next;</span><br><span class=\"line\">                tail.next.next = pre.next;</span><br><span class=\"line\">                pre.next = tail.next;</span><br><span class=\"line\">                tail.next = next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            pre = tail;</span><br><span class=\"line\">            tail = tail.next;</span><br><span class=\"line\">            n-=k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dummy.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Backward Recursion</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">   public ListNode reverseKGroup(ListNode head, int k) &#123;</span><br><span class=\"line\">    ListNode curr = head;</span><br><span class=\"line\">    int count = 0;</span><br><span class=\"line\">    while (curr != null &amp;&amp; count != k) &#123;</span><br><span class=\"line\">        curr = curr.next;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (count == k) &#123; </span><br><span class=\"line\">        curr = reverseKGroup(curr, k); </span><br><span class=\"line\">        while (count-- &gt; 0) &#123; </span><br><span class=\"line\">            ListNode tmp = head.next; </span><br><span class=\"line\">            head.next = curr;  </span><br><span class=\"line\">            curr = head; </span><br><span class=\"line\">            head = tmp; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        head = curr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return head;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Backward Iteration</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public ListNode reverseKGroup(ListNode head, int k) &#123;</span><br><span class=\"line\">        // If less than k nodes, return directly</span><br><span class=\"line\">        if(k&lt;=1)return head;</span><br><span class=\"line\">        List&lt;ListNode&gt; stack = new LinkedList&lt;&gt;();</span><br><span class=\"line\">        int count = 0;</span><br><span class=\"line\">        ListNode cur = head, lastHead = null;</span><br><span class=\"line\">        int start = 0;</span><br><span class=\"line\">        while(cur != null)&#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            if(count % k == 1)stack.add(cur);</span><br><span class=\"line\">            cur = cur.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        start = stack.size()-1;</span><br><span class=\"line\">        if(count &lt; k)return head;</span><br><span class=\"line\">        if(count % k != 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            lastHead = stack.get(start--);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for(int i = start; i&gt;=0; i--)&#123;</span><br><span class=\"line\">            lastHead = reverseGroup(stack.get(i), lastHead, k);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return lastHead;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private ListNode reverseGroup(ListNode head, ListNode lastHead, int k)&#123;</span><br><span class=\"line\">        ListNode cur = head, next = head.next;</span><br><span class=\"line\">        while(k-- &gt; 0)&#123;</span><br><span class=\"line\">            cur.next = lastHead;</span><br><span class=\"line\">            lastHead = cur;</span><br><span class=\"line\">            cur = next;</span><br><span class=\"line\">            if(cur != null)</span><br><span class=\"line\">            next = cur.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return lastHead;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> $O(n)$ All the solutions are linear since we have to traverse over the entire list.</p>\n<p><strong>Space Complexity:</strong> For the forward iteration solution it’s $O(1)$, for the other two, we need $O(\\lceil n/k \\rceil)$ to store the head node of all groups.</p>\n"},{"title":"Https","date":"2019-08-01T05:59:39.000Z","comments":1,"_content":"# How does HTTPS provide security\nThe primitive promotion of HTTPS over http is security. Messages are transferred nakedly in http which may be utilized by an eavesdropper.\nIt's pretty natural to think that we can encrypt the plain text with a key. There are two kinds of encrytion with different\ncombinations of keys.\n- Symmetric Encryption : public key\n- Asymmetric Encryption : public key + private key\n\nIn symmetric encryption, both the server and the client use public key for encryption and decryption. The client can encrypt message with public key and then send it to the server where the encrypted message is decrypted with the same public key, and vice versa.\nThings becomes differrent in asymmetric encryption, we can not decrypt the encrypted message with public key in above cases. A private key is needed for decryption. The basic steps for data transmission are:\n1. the client encrypt message with public key\n2. encrypted message is transferred to the server\n3. the server get the raw message by decryption with private key\n\nThe public key and private key pair is one to one, for example, private key is a pair of very large prime number, and public key is their product.\n\n# Vulnerability\nWe haven't metion how does the server/client side get the public/private key yet. The private key is very easy to implement, both the server and the client can appoint the private key themselves and do not transfer it to the other one by internet while the public key has to be visible to the other one. The vulnerability happens in the procedure of public key transmission. \n\nIn the symmetric encryption algorithm, if a third party intercept your public key he can decrypt any message from client or server!\n> Imaging you're using a public wifi in market, all your infomation is exposed to the wifi owner\n\nThe problem comes from the transmission of public key. It's plain text! The asymmetric encryption can solve this problem by a private key, the third party can get the public key but he cannot decrypt the message without private key. But there is a limitation for asmmetric encryption, it's one-way transmission! Only the side with private key can read the message, and another side just have public key to encrypt message.\n> Maybe we can use two pairs of public+private key for asymmetric encryption?\n\n# TLS\nTLS(Transfer Layer Security) is the underlying implementation for HTTPS. It's kernel priciple is pretty similar the above:\n- At first, The server has a pair of public+private key (Suppose they are prime numbers and their product) and \nthe client has nothing.\n- The client sends a HTTPS request to the server, and the server gives the public key to the client.\n- The client generates a key refferd as `pre-master key` which is a private key, and then transfer it to the server after\nencrypting it with the public key. \n\n> Note that pre-master key is still a private key because we transferred the encrypted key,\nif a third party get the message he will never know the pre-master key without private key from the server side.\n\n- The server decrypt the message and get the pre-master key.\n- Now both the client and the server have pre-master key, which means we can use symmetric encryption from now on. This symmetric encryption is quite different from the above, because we use a private key (pre-master key) for encryption, it's invisible from third part.\n\nThings to note:\n1. In the above procedure, the public key is known as digital certification.(You can find it on the left side of url field of your browser.)\n2. The server-side private key is top secrete, it can never be exposed to anyone else.\n3. Actually in TLS, we encrypt pre-master key with two another random number(public key) generated by the client and the server to get the final `session key`. As you can guess from the literal, `pre-master key` is a material private key for the final `session key` and the `session key` is unique for each session because we used two random number.\n\n# Summary\nSymmetric encryption with private key is the most secure way for encryption. In order to share the private key(`pre-master key`), we use asymmetric encryption. \n\n# Gossip\nPublic key and private key certification is usually published by CA institute, they are the only one who knows your secrete private key except yourself. The bank does not believe CA institute so usually they use their own certification on their own server and let CDN prividers get public key from their private server.\n\n\n\n# Referrence\n[How does HTTPS provide security?](https://stackoverflow.com/a/3968260/4332095)\n\n[TLS](https://itimetraveler.github.io/2018/10/30/HTTPS%E5%8E%9F%E7%90%86%E4%B8%8E%E8%AF%81%E4%B9%A6/#%E5%BA%94%E7%94%A8%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93)\n","source":"_posts/Https.md","raw":"---\ntitle: Https\ndate: 2019-08-01 13:59:39\ntags:\n- https\ncategories:\n- Computer Network\ncomments: true\n---\n# How does HTTPS provide security\nThe primitive promotion of HTTPS over http is security. Messages are transferred nakedly in http which may be utilized by an eavesdropper.\nIt's pretty natural to think that we can encrypt the plain text with a key. There are two kinds of encrytion with different\ncombinations of keys.\n- Symmetric Encryption : public key\n- Asymmetric Encryption : public key + private key\n\nIn symmetric encryption, both the server and the client use public key for encryption and decryption. The client can encrypt message with public key and then send it to the server where the encrypted message is decrypted with the same public key, and vice versa.\nThings becomes differrent in asymmetric encryption, we can not decrypt the encrypted message with public key in above cases. A private key is needed for decryption. The basic steps for data transmission are:\n1. the client encrypt message with public key\n2. encrypted message is transferred to the server\n3. the server get the raw message by decryption with private key\n\nThe public key and private key pair is one to one, for example, private key is a pair of very large prime number, and public key is their product.\n\n# Vulnerability\nWe haven't metion how does the server/client side get the public/private key yet. The private key is very easy to implement, both the server and the client can appoint the private key themselves and do not transfer it to the other one by internet while the public key has to be visible to the other one. The vulnerability happens in the procedure of public key transmission. \n\nIn the symmetric encryption algorithm, if a third party intercept your public key he can decrypt any message from client or server!\n> Imaging you're using a public wifi in market, all your infomation is exposed to the wifi owner\n\nThe problem comes from the transmission of public key. It's plain text! The asymmetric encryption can solve this problem by a private key, the third party can get the public key but he cannot decrypt the message without private key. But there is a limitation for asmmetric encryption, it's one-way transmission! Only the side with private key can read the message, and another side just have public key to encrypt message.\n> Maybe we can use two pairs of public+private key for asymmetric encryption?\n\n# TLS\nTLS(Transfer Layer Security) is the underlying implementation for HTTPS. It's kernel priciple is pretty similar the above:\n- At first, The server has a pair of public+private key (Suppose they are prime numbers and their product) and \nthe client has nothing.\n- The client sends a HTTPS request to the server, and the server gives the public key to the client.\n- The client generates a key refferd as `pre-master key` which is a private key, and then transfer it to the server after\nencrypting it with the public key. \n\n> Note that pre-master key is still a private key because we transferred the encrypted key,\nif a third party get the message he will never know the pre-master key without private key from the server side.\n\n- The server decrypt the message and get the pre-master key.\n- Now both the client and the server have pre-master key, which means we can use symmetric encryption from now on. This symmetric encryption is quite different from the above, because we use a private key (pre-master key) for encryption, it's invisible from third part.\n\nThings to note:\n1. In the above procedure, the public key is known as digital certification.(You can find it on the left side of url field of your browser.)\n2. The server-side private key is top secrete, it can never be exposed to anyone else.\n3. Actually in TLS, we encrypt pre-master key with two another random number(public key) generated by the client and the server to get the final `session key`. As you can guess from the literal, `pre-master key` is a material private key for the final `session key` and the `session key` is unique for each session because we used two random number.\n\n# Summary\nSymmetric encryption with private key is the most secure way for encryption. In order to share the private key(`pre-master key`), we use asymmetric encryption. \n\n# Gossip\nPublic key and private key certification is usually published by CA institute, they are the only one who knows your secrete private key except yourself. The bank does not believe CA institute so usually they use their own certification on their own server and let CDN prividers get public key from their private server.\n\n\n\n# Referrence\n[How does HTTPS provide security?](https://stackoverflow.com/a/3968260/4332095)\n\n[TLS](https://itimetraveler.github.io/2018/10/30/HTTPS%E5%8E%9F%E7%90%86%E4%B8%8E%E8%AF%81%E4%B9%A6/#%E5%BA%94%E7%94%A8%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93)\n","slug":"Https","published":1,"updated":"2019-09-21T05:46:00.563Z","layout":"post","photos":[],"link":"","_id":"ck3gx4n1p0012tkbs4l2lb1dy","content":"<h1 id=\"How-does-HTTPS-provide-security\"><a href=\"#How-does-HTTPS-provide-security\" class=\"headerlink\" title=\"How does HTTPS provide security\"></a>How does HTTPS provide security</h1><p>The primitive promotion of HTTPS over http is security. Messages are transferred nakedly in http which may be utilized by an eavesdropper.<br>It’s pretty natural to think that we can encrypt the plain text with a key. There are two kinds of encrytion with different<br>combinations of keys.</p>\n<ul>\n<li>Symmetric Encryption : public key</li>\n<li>Asymmetric Encryption : public key + private key</li>\n</ul>\n<p>In symmetric encryption, both the server and the client use public key for encryption and decryption. The client can encrypt message with public key and then send it to the server where the encrypted message is decrypted with the same public key, and vice versa.<br>Things becomes differrent in asymmetric encryption, we can not decrypt the encrypted message with public key in above cases. A private key is needed for decryption. The basic steps for data transmission are:</p>\n<ol>\n<li>the client encrypt message with public key</li>\n<li>encrypted message is transferred to the server</li>\n<li>the server get the raw message by decryption with private key</li>\n</ol>\n<p>The public key and private key pair is one to one, for example, private key is a pair of very large prime number, and public key is their product.</p>\n<h1 id=\"Vulnerability\"><a href=\"#Vulnerability\" class=\"headerlink\" title=\"Vulnerability\"></a>Vulnerability</h1><p>We haven’t metion how does the server/client side get the public/private key yet. The private key is very easy to implement, both the server and the client can appoint the private key themselves and do not transfer it to the other one by internet while the public key has to be visible to the other one. The vulnerability happens in the procedure of public key transmission. </p>\n<p>In the symmetric encryption algorithm, if a third party intercept your public key he can decrypt any message from client or server!</p>\n<blockquote>\n<p>Imaging you’re using a public wifi in market, all your infomation is exposed to the wifi owner</p>\n</blockquote>\n<p>The problem comes from the transmission of public key. It’s plain text! The asymmetric encryption can solve this problem by a private key, the third party can get the public key but he cannot decrypt the message without private key. But there is a limitation for asmmetric encryption, it’s one-way transmission! Only the side with private key can read the message, and another side just have public key to encrypt message.</p>\n<blockquote>\n<p>Maybe we can use two pairs of public+private key for asymmetric encryption?</p>\n</blockquote>\n<h1 id=\"TLS\"><a href=\"#TLS\" class=\"headerlink\" title=\"TLS\"></a>TLS</h1><p>TLS(Transfer Layer Security) is the underlying implementation for HTTPS. It’s kernel priciple is pretty similar the above:</p>\n<ul>\n<li>At first, The server has a pair of public+private key (Suppose they are prime numbers and their product) and<br>the client has nothing.</li>\n<li>The client sends a HTTPS request to the server, and the server gives the public key to the client.</li>\n<li>The client generates a key refferd as <code>pre-master key</code> which is a private key, and then transfer it to the server after<br>encrypting it with the public key. </li>\n</ul>\n<blockquote>\n<p>Note that pre-master key is still a private key because we transferred the encrypted key,<br>if a third party get the message he will never know the pre-master key without private key from the server side.</p>\n</blockquote>\n<ul>\n<li>The server decrypt the message and get the pre-master key.</li>\n<li>Now both the client and the server have pre-master key, which means we can use symmetric encryption from now on. This symmetric encryption is quite different from the above, because we use a private key (pre-master key) for encryption, it’s invisible from third part.</li>\n</ul>\n<p>Things to note:</p>\n<ol>\n<li>In the above procedure, the public key is known as digital certification.(You can find it on the left side of url field of your browser.)</li>\n<li>The server-side private key is top secrete, it can never be exposed to anyone else.</li>\n<li>Actually in TLS, we encrypt pre-master key with two another random number(public key) generated by the client and the server to get the final <code>session key</code>. As you can guess from the literal, <code>pre-master key</code> is a material private key for the final <code>session key</code> and the <code>session key</code> is unique for each session because we used two random number.</li>\n</ol>\n<h1 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h1><p>Symmetric encryption with private key is the most secure way for encryption. In order to share the private key(<code>pre-master key</code>), we use asymmetric encryption. </p>\n<h1 id=\"Gossip\"><a href=\"#Gossip\" class=\"headerlink\" title=\"Gossip\"></a>Gossip</h1><p>Public key and private key certification is usually published by CA institute, they are the only one who knows your secrete private key except yourself. The bank does not believe CA institute so usually they use their own certification on their own server and let CDN prividers get public key from their private server.</p>\n<h1 id=\"Referrence\"><a href=\"#Referrence\" class=\"headerlink\" title=\"Referrence\"></a>Referrence</h1><p><a href=\"https://stackoverflow.com/a/3968260/4332095\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">How does HTTPS provide security?</a></p>\n<p><a href=\"https://itimetraveler.github.io/2018/10/30/HTTPS%E5%8E%9F%E7%90%86%E4%B8%8E%E8%AF%81%E4%B9%A6/#%E5%BA%94%E7%94%A8%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">TLS</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"How-does-HTTPS-provide-security\"><a href=\"#How-does-HTTPS-provide-security\" class=\"headerlink\" title=\"How does HTTPS provide security\"></a>How does HTTPS provide security</h1><p>The primitive promotion of HTTPS over http is security. Messages are transferred nakedly in http which may be utilized by an eavesdropper.<br>It’s pretty natural to think that we can encrypt the plain text with a key. There are two kinds of encrytion with different<br>combinations of keys.</p>\n<ul>\n<li>Symmetric Encryption : public key</li>\n<li>Asymmetric Encryption : public key + private key</li>\n</ul>\n<p>In symmetric encryption, both the server and the client use public key for encryption and decryption. The client can encrypt message with public key and then send it to the server where the encrypted message is decrypted with the same public key, and vice versa.<br>Things becomes differrent in asymmetric encryption, we can not decrypt the encrypted message with public key in above cases. A private key is needed for decryption. The basic steps for data transmission are:</p>\n<ol>\n<li>the client encrypt message with public key</li>\n<li>encrypted message is transferred to the server</li>\n<li>the server get the raw message by decryption with private key</li>\n</ol>\n<p>The public key and private key pair is one to one, for example, private key is a pair of very large prime number, and public key is their product.</p>\n<h1 id=\"Vulnerability\"><a href=\"#Vulnerability\" class=\"headerlink\" title=\"Vulnerability\"></a>Vulnerability</h1><p>We haven’t metion how does the server/client side get the public/private key yet. The private key is very easy to implement, both the server and the client can appoint the private key themselves and do not transfer it to the other one by internet while the public key has to be visible to the other one. The vulnerability happens in the procedure of public key transmission. </p>\n<p>In the symmetric encryption algorithm, if a third party intercept your public key he can decrypt any message from client or server!</p>\n<blockquote>\n<p>Imaging you’re using a public wifi in market, all your infomation is exposed to the wifi owner</p>\n</blockquote>\n<p>The problem comes from the transmission of public key. It’s plain text! The asymmetric encryption can solve this problem by a private key, the third party can get the public key but he cannot decrypt the message without private key. But there is a limitation for asmmetric encryption, it’s one-way transmission! Only the side with private key can read the message, and another side just have public key to encrypt message.</p>\n<blockquote>\n<p>Maybe we can use two pairs of public+private key for asymmetric encryption?</p>\n</blockquote>\n<h1 id=\"TLS\"><a href=\"#TLS\" class=\"headerlink\" title=\"TLS\"></a>TLS</h1><p>TLS(Transfer Layer Security) is the underlying implementation for HTTPS. It’s kernel priciple is pretty similar the above:</p>\n<ul>\n<li>At first, The server has a pair of public+private key (Suppose they are prime numbers and their product) and<br>the client has nothing.</li>\n<li>The client sends a HTTPS request to the server, and the server gives the public key to the client.</li>\n<li>The client generates a key refferd as <code>pre-master key</code> which is a private key, and then transfer it to the server after<br>encrypting it with the public key. </li>\n</ul>\n<blockquote>\n<p>Note that pre-master key is still a private key because we transferred the encrypted key,<br>if a third party get the message he will never know the pre-master key without private key from the server side.</p>\n</blockquote>\n<ul>\n<li>The server decrypt the message and get the pre-master key.</li>\n<li>Now both the client and the server have pre-master key, which means we can use symmetric encryption from now on. This symmetric encryption is quite different from the above, because we use a private key (pre-master key) for encryption, it’s invisible from third part.</li>\n</ul>\n<p>Things to note:</p>\n<ol>\n<li>In the above procedure, the public key is known as digital certification.(You can find it on the left side of url field of your browser.)</li>\n<li>The server-side private key is top secrete, it can never be exposed to anyone else.</li>\n<li>Actually in TLS, we encrypt pre-master key with two another random number(public key) generated by the client and the server to get the final <code>session key</code>. As you can guess from the literal, <code>pre-master key</code> is a material private key for the final <code>session key</code> and the <code>session key</code> is unique for each session because we used two random number.</li>\n</ol>\n<h1 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h1><p>Symmetric encryption with private key is the most secure way for encryption. In order to share the private key(<code>pre-master key</code>), we use asymmetric encryption. </p>\n<h1 id=\"Gossip\"><a href=\"#Gossip\" class=\"headerlink\" title=\"Gossip\"></a>Gossip</h1><p>Public key and private key certification is usually published by CA institute, they are the only one who knows your secrete private key except yourself. The bank does not believe CA institute so usually they use their own certification on their own server and let CDN prividers get public key from their private server.</p>\n<h1 id=\"Referrence\"><a href=\"#Referrence\" class=\"headerlink\" title=\"Referrence\"></a>Referrence</h1><p><a href=\"https://stackoverflow.com/a/3968260/4332095\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">How does HTTPS provide security?</a></p>\n<p><a href=\"https://itimetraveler.github.io/2018/10/30/HTTPS%E5%8E%9F%E7%90%86%E4%B8%8E%E8%AF%81%E4%B9%A6/#%E5%BA%94%E7%94%A8%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">TLS</a></p>\n"},{"title":"MySQL ACID","date":"2019-09-25T08:45:58.000Z","_content":"# MySQL ACID\n![ACID](/images/MySQL_ACID.png)\n\n> 本文所有内容仅仅是对MySQL[官方文档](https://dev.mysql.com/doc/refman/8.0/en/mysql-acid.html)稍作整理，增加一些作者自己的理解。\n\n\n随着业务数据和任务需求的增长，可靠性成了MySQL数据库的重要诉求(Redis早期仅有单句的增删改查，事务是随着业务需求变得复杂才增加的)。ACID正是实现MySQL可靠性的设计原则。\n\n下文以InnoDB存储引擎为例简述了MySQL中如何体现ACID设计原则。\n\nA(原子性), C(一致性), D(持久化)事实上都基于系统崩溃或者断电等导致数据库突然不可用的情况来考虑。I(隔离性)考虑并发情况下事务应当访问到何种数据。\n\n\n- A: atomicity \n\n    原子性，一个事务(包括单句增删改查操作)要么完成，要么失败，不存在修改一半的情况。这点通过事务的提交机制和回滚机制来保证。其中undolog起到了关键性作用，它记录了每条命令相反的命令，如果事务未提交完成遇到了失败，下次数据库重启时调用undolog回滚部分完成的事务。\n\n- C: consistency.\n\n    一致性。一致性的概念与下文中持久化关联非常紧密。官方文档中说明MySQL一致性体现在双写缓存和灾难恢复机制，而二者实际上也可以体现在持久化的原则中。持久化与一致性可以理解为因果关系，因为在机器正常运行的时候做了持久化的工作，才能在宕机之后根据持久化的文件(doublewrite buffer, redolog等)对数据库表空间(实际数据存储的地方)进行修复，以达到与宕机前数据库状态的一致性。\n\n    一致性只是一个设计原则，并不是数据库的某种机制，同样持久化也只是设计原则，而具体的机制如doublewrite buffer, redolog 被宕机这个时间点分成了两部分，宕机之前体现了持久化，宕机之后用作灾难恢复机制体现了一致性。因此也可以任务一致性和持久性并不是平行的设计原则，持久化保证了一致性。\n\n    > 实际上可以认为A,I,D三者共同保证了一致性。其中，原子性保证了数据库从一个状态转移到另一个状态，可能成功，可能失败，操作的结果与我们预期是一致的，隔离性保证了多个操作的顺序不影响数据库的最终状态，也就是无论事务操作的顺序如何，最终状态都是一致的，持久性保证了在宕机这段时间前后，数据库的状态一致。\n- I: isolation.\n\n    隔离性。四种隔离级别以及底层的InnoDB锁保证了MySQL事务之间可以做到某种级别的不干扰。\n\n- D: durability.\n\n    持久性。持久化是将内存中的MySQL页刷盘到磁盘中存储起来。\n\n    如果不做持久化处理，宕机后内存中的已经修改的MySQL页都将丢失。redolog 记录了对每个页的哪些偏移位置处做了何种修改。因此每次提交操作都写入redolog可以最大程度的保证数据的完整性，即使是没有提交的事务也可以恢复，因为redolog在每次操作的时候都会刷盘(因为redolog是连续存储的，所以刷盘影响不大)。\n    \n    如果内存中的MySQL页往磁盘中写入一半的时候宕机了，则某些页可能写入错误，而重启的时候无法发现。redolog在刷盘的时候不存在此问题，因为每条redolog只占一个WORD，可以保证传输的原子性(UPS等备用电源机制可以保证即使断电也可以保证CPU指令的原子性)。doublewrite buffer解决了页部分写入的错误，具体实现也非常简单，首先将内存中数据页写入磁盘中的double write缓存，在这第一个写过程中即使宕机也不影响原始数据库的数据，然后再将doublewritebuffer内容写入到真正的表空间，在第二个写过程中即使宕机，因为doublewrite buffer是在磁盘上的且完整的，只需要重写一遍就可以了。\n\n\n\n\n","source":"_posts/MySQL-ACID.md","raw":"---\ntitle: MySQL ACID\ndate: 2019-09-25 16:45:58\ntags:\n- MySQL\n- ACID\ncategories:\n- 中文\n- Database\n---\n# MySQL ACID\n![ACID](/images/MySQL_ACID.png)\n\n> 本文所有内容仅仅是对MySQL[官方文档](https://dev.mysql.com/doc/refman/8.0/en/mysql-acid.html)稍作整理，增加一些作者自己的理解。\n\n\n随着业务数据和任务需求的增长，可靠性成了MySQL数据库的重要诉求(Redis早期仅有单句的增删改查，事务是随着业务需求变得复杂才增加的)。ACID正是实现MySQL可靠性的设计原则。\n\n下文以InnoDB存储引擎为例简述了MySQL中如何体现ACID设计原则。\n\nA(原子性), C(一致性), D(持久化)事实上都基于系统崩溃或者断电等导致数据库突然不可用的情况来考虑。I(隔离性)考虑并发情况下事务应当访问到何种数据。\n\n\n- A: atomicity \n\n    原子性，一个事务(包括单句增删改查操作)要么完成，要么失败，不存在修改一半的情况。这点通过事务的提交机制和回滚机制来保证。其中undolog起到了关键性作用，它记录了每条命令相反的命令，如果事务未提交完成遇到了失败，下次数据库重启时调用undolog回滚部分完成的事务。\n\n- C: consistency.\n\n    一致性。一致性的概念与下文中持久化关联非常紧密。官方文档中说明MySQL一致性体现在双写缓存和灾难恢复机制，而二者实际上也可以体现在持久化的原则中。持久化与一致性可以理解为因果关系，因为在机器正常运行的时候做了持久化的工作，才能在宕机之后根据持久化的文件(doublewrite buffer, redolog等)对数据库表空间(实际数据存储的地方)进行修复，以达到与宕机前数据库状态的一致性。\n\n    一致性只是一个设计原则，并不是数据库的某种机制，同样持久化也只是设计原则，而具体的机制如doublewrite buffer, redolog 被宕机这个时间点分成了两部分，宕机之前体现了持久化，宕机之后用作灾难恢复机制体现了一致性。因此也可以任务一致性和持久性并不是平行的设计原则，持久化保证了一致性。\n\n    > 实际上可以认为A,I,D三者共同保证了一致性。其中，原子性保证了数据库从一个状态转移到另一个状态，可能成功，可能失败，操作的结果与我们预期是一致的，隔离性保证了多个操作的顺序不影响数据库的最终状态，也就是无论事务操作的顺序如何，最终状态都是一致的，持久性保证了在宕机这段时间前后，数据库的状态一致。\n- I: isolation.\n\n    隔离性。四种隔离级别以及底层的InnoDB锁保证了MySQL事务之间可以做到某种级别的不干扰。\n\n- D: durability.\n\n    持久性。持久化是将内存中的MySQL页刷盘到磁盘中存储起来。\n\n    如果不做持久化处理，宕机后内存中的已经修改的MySQL页都将丢失。redolog 记录了对每个页的哪些偏移位置处做了何种修改。因此每次提交操作都写入redolog可以最大程度的保证数据的完整性，即使是没有提交的事务也可以恢复，因为redolog在每次操作的时候都会刷盘(因为redolog是连续存储的，所以刷盘影响不大)。\n    \n    如果内存中的MySQL页往磁盘中写入一半的时候宕机了，则某些页可能写入错误，而重启的时候无法发现。redolog在刷盘的时候不存在此问题，因为每条redolog只占一个WORD，可以保证传输的原子性(UPS等备用电源机制可以保证即使断电也可以保证CPU指令的原子性)。doublewrite buffer解决了页部分写入的错误，具体实现也非常简单，首先将内存中数据页写入磁盘中的double write缓存，在这第一个写过程中即使宕机也不影响原始数据库的数据，然后再将doublewritebuffer内容写入到真正的表空间，在第二个写过程中即使宕机，因为doublewrite buffer是在磁盘上的且完整的，只需要重写一遍就可以了。\n\n\n\n\n","slug":"MySQL-ACID","published":1,"updated":"2019-10-04T13:14:55.378Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3gx4n1r0014tkbsb4weo7lv","content":"<h1 id=\"MySQL-ACID\"><a href=\"#MySQL-ACID\" class=\"headerlink\" title=\"MySQL ACID\"></a>MySQL ACID</h1><p><img src=\"/images/MySQL_ACID.png\" alt=\"ACID\"></p>\n<blockquote>\n<p>本文所有内容仅仅是对MySQL<a href=\"https://dev.mysql.com/doc/refman/8.0/en/mysql-acid.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">官方文档</a>稍作整理，增加一些作者自己的理解。</p>\n</blockquote>\n<p>随着业务数据和任务需求的增长，可靠性成了MySQL数据库的重要诉求(Redis早期仅有单句的增删改查，事务是随着业务需求变得复杂才增加的)。ACID正是实现MySQL可靠性的设计原则。</p>\n<p>下文以InnoDB存储引擎为例简述了MySQL中如何体现ACID设计原则。</p>\n<p>A(原子性), C(一致性), D(持久化)事实上都基于系统崩溃或者断电等导致数据库突然不可用的情况来考虑。I(隔离性)考虑并发情况下事务应当访问到何种数据。</p>\n<ul>\n<li><p>A: atomicity </p>\n<p>  原子性，一个事务(包括单句增删改查操作)要么完成，要么失败，不存在修改一半的情况。这点通过事务的提交机制和回滚机制来保证。其中undolog起到了关键性作用，它记录了每条命令相反的命令，如果事务未提交完成遇到了失败，下次数据库重启时调用undolog回滚部分完成的事务。</p>\n</li>\n<li><p>C: consistency.</p>\n<p>  一致性。一致性的概念与下文中持久化关联非常紧密。官方文档中说明MySQL一致性体现在双写缓存和灾难恢复机制，而二者实际上也可以体现在持久化的原则中。持久化与一致性可以理解为因果关系，因为在机器正常运行的时候做了持久化的工作，才能在宕机之后根据持久化的文件(doublewrite buffer, redolog等)对数据库表空间(实际数据存储的地方)进行修复，以达到与宕机前数据库状态的一致性。</p>\n<p>  一致性只是一个设计原则，并不是数据库的某种机制，同样持久化也只是设计原则，而具体的机制如doublewrite buffer, redolog 被宕机这个时间点分成了两部分，宕机之前体现了持久化，宕机之后用作灾难恢复机制体现了一致性。因此也可以任务一致性和持久性并不是平行的设计原则，持久化保证了一致性。</p>\n<blockquote>\n<p>实际上可以认为A,I,D三者共同保证了一致性。其中，原子性保证了数据库从一个状态转移到另一个状态，可能成功，可能失败，操作的结果与我们预期是一致的，隔离性保证了多个操作的顺序不影响数据库的最终状态，也就是无论事务操作的顺序如何，最终状态都是一致的，持久性保证了在宕机这段时间前后，数据库的状态一致。</p>\n</blockquote>\n</li>\n<li><p>I: isolation.</p>\n<p>  隔离性。四种隔离级别以及底层的InnoDB锁保证了MySQL事务之间可以做到某种级别的不干扰。</p>\n</li>\n<li><p>D: durability.</p>\n<p>  持久性。持久化是将内存中的MySQL页刷盘到磁盘中存储起来。</p>\n<p>  如果不做持久化处理，宕机后内存中的已经修改的MySQL页都将丢失。redolog 记录了对每个页的哪些偏移位置处做了何种修改。因此每次提交操作都写入redolog可以最大程度的保证数据的完整性，即使是没有提交的事务也可以恢复，因为redolog在每次操作的时候都会刷盘(因为redolog是连续存储的，所以刷盘影响不大)。</p>\n<p>  如果内存中的MySQL页往磁盘中写入一半的时候宕机了，则某些页可能写入错误，而重启的时候无法发现。redolog在刷盘的时候不存在此问题，因为每条redolog只占一个WORD，可以保证传输的原子性(UPS等备用电源机制可以保证即使断电也可以保证CPU指令的原子性)。doublewrite buffer解决了页部分写入的错误，具体实现也非常简单，首先将内存中数据页写入磁盘中的double write缓存，在这第一个写过程中即使宕机也不影响原始数据库的数据，然后再将doublewritebuffer内容写入到真正的表空间，在第二个写过程中即使宕机，因为doublewrite buffer是在磁盘上的且完整的，只需要重写一遍就可以了。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"MySQL-ACID\"><a href=\"#MySQL-ACID\" class=\"headerlink\" title=\"MySQL ACID\"></a>MySQL ACID</h1><p><img src=\"/images/MySQL_ACID.png\" alt=\"ACID\"></p>\n<blockquote>\n<p>本文所有内容仅仅是对MySQL<a href=\"https://dev.mysql.com/doc/refman/8.0/en/mysql-acid.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">官方文档</a>稍作整理，增加一些作者自己的理解。</p>\n</blockquote>\n<p>随着业务数据和任务需求的增长，可靠性成了MySQL数据库的重要诉求(Redis早期仅有单句的增删改查，事务是随着业务需求变得复杂才增加的)。ACID正是实现MySQL可靠性的设计原则。</p>\n<p>下文以InnoDB存储引擎为例简述了MySQL中如何体现ACID设计原则。</p>\n<p>A(原子性), C(一致性), D(持久化)事实上都基于系统崩溃或者断电等导致数据库突然不可用的情况来考虑。I(隔离性)考虑并发情况下事务应当访问到何种数据。</p>\n<ul>\n<li><p>A: atomicity </p>\n<p>  原子性，一个事务(包括单句增删改查操作)要么完成，要么失败，不存在修改一半的情况。这点通过事务的提交机制和回滚机制来保证。其中undolog起到了关键性作用，它记录了每条命令相反的命令，如果事务未提交完成遇到了失败，下次数据库重启时调用undolog回滚部分完成的事务。</p>\n</li>\n<li><p>C: consistency.</p>\n<p>  一致性。一致性的概念与下文中持久化关联非常紧密。官方文档中说明MySQL一致性体现在双写缓存和灾难恢复机制，而二者实际上也可以体现在持久化的原则中。持久化与一致性可以理解为因果关系，因为在机器正常运行的时候做了持久化的工作，才能在宕机之后根据持久化的文件(doublewrite buffer, redolog等)对数据库表空间(实际数据存储的地方)进行修复，以达到与宕机前数据库状态的一致性。</p>\n<p>  一致性只是一个设计原则，并不是数据库的某种机制，同样持久化也只是设计原则，而具体的机制如doublewrite buffer, redolog 被宕机这个时间点分成了两部分，宕机之前体现了持久化，宕机之后用作灾难恢复机制体现了一致性。因此也可以任务一致性和持久性并不是平行的设计原则，持久化保证了一致性。</p>\n<blockquote>\n<p>实际上可以认为A,I,D三者共同保证了一致性。其中，原子性保证了数据库从一个状态转移到另一个状态，可能成功，可能失败，操作的结果与我们预期是一致的，隔离性保证了多个操作的顺序不影响数据库的最终状态，也就是无论事务操作的顺序如何，最终状态都是一致的，持久性保证了在宕机这段时间前后，数据库的状态一致。</p>\n</blockquote>\n</li>\n<li><p>I: isolation.</p>\n<p>  隔离性。四种隔离级别以及底层的InnoDB锁保证了MySQL事务之间可以做到某种级别的不干扰。</p>\n</li>\n<li><p>D: durability.</p>\n<p>  持久性。持久化是将内存中的MySQL页刷盘到磁盘中存储起来。</p>\n<p>  如果不做持久化处理，宕机后内存中的已经修改的MySQL页都将丢失。redolog 记录了对每个页的哪些偏移位置处做了何种修改。因此每次提交操作都写入redolog可以最大程度的保证数据的完整性，即使是没有提交的事务也可以恢复，因为redolog在每次操作的时候都会刷盘(因为redolog是连续存储的，所以刷盘影响不大)。</p>\n<p>  如果内存中的MySQL页往磁盘中写入一半的时候宕机了，则某些页可能写入错误，而重启的时候无法发现。redolog在刷盘的时候不存在此问题，因为每条redolog只占一个WORD，可以保证传输的原子性(UPS等备用电源机制可以保证即使断电也可以保证CPU指令的原子性)。doublewrite buffer解决了页部分写入的错误，具体实现也非常简单，首先将内存中数据页写入磁盘中的double write缓存，在这第一个写过程中即使宕机也不影响原始数据库的数据，然后再将doublewritebuffer内容写入到真正的表空间，在第二个写过程中即使宕机，因为doublewrite buffer是在磁盘上的且完整的，只需要重写一遍就可以了。</p>\n</li>\n</ul>\n"},{"title":"Java","date":"2019-09-28T13:11:59.000Z","_content":"# Java基础\n## 编译和解释 (待补充)\n![Java程序运行过程](https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/Java%20%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B.png)\n\nC/C++ 编译器将源代码最终编译为机器指令，因此如果要在不同机器上运行程序需要重新编译源码。Java使用另一种方式实现跨平台，即Java虚拟机(JVM)。首先Java编译器(javac, java compiler)将源代码编译为.class文件，当我们需要将程序运行到其他机器上只需要拷贝.class文件运行即可(假设机器都已经安装JVM), JVM会根据具体的CPU指令集架构规范将.class翻译为机器指令。\n\n> 常见的.jar(Java ARchive)是 .class文件的压缩包\n\n## 术语\n- JDK, Java Development Kit, Oracla公司针对Solaris, Linux, Windows, macOS等系统发布的Java软件开发包，包括常用的java开发组件：\n  - javac: 编译器，将后缀名为.java的源码编译成后缀名为\".class\"的字节码\n  - java: 运行工具，运行.class字节码\n  - jar: 打包工具，将相关的类文件打包成一个文件\n  - javadoc: 文档生成器，从源码注释中提取文档，注释需匹配规范\n  - **jdb debugger: 调试工具**\n  - jps: 显示当前java程序运行的进程状态\n  - javap: 反编译程序\n  - javah: 从Java类生成C头文件和源文件。\n  - ***JRE:***  包括一个Java虚拟机（Java Virtual Machine，JVM）以及一些标准的类别函数库（Class Library）\n \n - **Java SE = Standard Edition** 最主要的Java编程平台，包括所有的Java库和API(java.lang, java.io, java.math, java.net, java.util, etc...).\n - **Java EE = Enterprise Edition** 企业版本，添加了容错，分布式等功能\n - **Java ME = Micro Edition** 针对移动设备和嵌入式设备推出的版本，从Java SE中削减了一些功能，并且添加了一些针对移动设备的库\n \n ## JVM 架构\n ![jvm](https://static.javatpoint.com/images/jvm-architecture.png)\n - Class Loader: 类加载器，加载`.class`文件，包括库文件和源码文件，主要由三个内置的加载器构成:\n  - Bootstrap Loader 加载`rt.jar`文件，该文件包含了Java SE 中所有的`.class`文件，如java.lang package classes, java.net package classes, java.util package classes, java.io package classes, java.sql package classes.\n  - Extension ClassLoader: 加载 `$JAVA_HOME/jre/lib/ext`目录中的扩展文件.\n  - System/Application ClassLoader: 加载环境变量`classpath`中的文件，默认为当前工作目录. 可以使用\"-cp\"或者\"-classpath\"改变此路径. \n ```\n public class ClassLoaderExample  \n{  \n    public static void main(String[] args)  \n    {  \n        Class c=ClassLoaderExample.class; \n        // \n        System.out.println(c.getClassLoader());\n        // String在内置库中，因此有Bootstrap Loader加载，返回null\n        System.out.println(String.class.getClassLoader());  \n    }  \n}\n/*\njdk.internal.loader.ClassLoaders$AppClassLoader@1de0aca6\nnull\n*/\n\n- Class(Method) Area   存储运行时常量池，属性，方法数据，方法代码\n- Heap 堆，运行时分配的内存\n- Stack 栈，\n  \n ```\n ## 参考链接\n - [编译模型](https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/Java基础知识.md#jvm)\n - [Java Edition](https://stackoverflow.com/a/33908729)\n - [Java 简介](https://www.javatpoint.com/internal-details-of-jvm)\n\n","source":"_posts/Java.md","raw":"---\ntitle: Java\ndate: 2019-09-28 21:11:59\ntags:\n- Java\n- Java基础\ncategories:\n- 中文\n- Java\n---\n# Java基础\n## 编译和解释 (待补充)\n![Java程序运行过程](https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/Java%20%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B.png)\n\nC/C++ 编译器将源代码最终编译为机器指令，因此如果要在不同机器上运行程序需要重新编译源码。Java使用另一种方式实现跨平台，即Java虚拟机(JVM)。首先Java编译器(javac, java compiler)将源代码编译为.class文件，当我们需要将程序运行到其他机器上只需要拷贝.class文件运行即可(假设机器都已经安装JVM), JVM会根据具体的CPU指令集架构规范将.class翻译为机器指令。\n\n> 常见的.jar(Java ARchive)是 .class文件的压缩包\n\n## 术语\n- JDK, Java Development Kit, Oracla公司针对Solaris, Linux, Windows, macOS等系统发布的Java软件开发包，包括常用的java开发组件：\n  - javac: 编译器，将后缀名为.java的源码编译成后缀名为\".class\"的字节码\n  - java: 运行工具，运行.class字节码\n  - jar: 打包工具，将相关的类文件打包成一个文件\n  - javadoc: 文档生成器，从源码注释中提取文档，注释需匹配规范\n  - **jdb debugger: 调试工具**\n  - jps: 显示当前java程序运行的进程状态\n  - javap: 反编译程序\n  - javah: 从Java类生成C头文件和源文件。\n  - ***JRE:***  包括一个Java虚拟机（Java Virtual Machine，JVM）以及一些标准的类别函数库（Class Library）\n \n - **Java SE = Standard Edition** 最主要的Java编程平台，包括所有的Java库和API(java.lang, java.io, java.math, java.net, java.util, etc...).\n - **Java EE = Enterprise Edition** 企业版本，添加了容错，分布式等功能\n - **Java ME = Micro Edition** 针对移动设备和嵌入式设备推出的版本，从Java SE中削减了一些功能，并且添加了一些针对移动设备的库\n \n ## JVM 架构\n ![jvm](https://static.javatpoint.com/images/jvm-architecture.png)\n - Class Loader: 类加载器，加载`.class`文件，包括库文件和源码文件，主要由三个内置的加载器构成:\n  - Bootstrap Loader 加载`rt.jar`文件，该文件包含了Java SE 中所有的`.class`文件，如java.lang package classes, java.net package classes, java.util package classes, java.io package classes, java.sql package classes.\n  - Extension ClassLoader: 加载 `$JAVA_HOME/jre/lib/ext`目录中的扩展文件.\n  - System/Application ClassLoader: 加载环境变量`classpath`中的文件，默认为当前工作目录. 可以使用\"-cp\"或者\"-classpath\"改变此路径. \n ```\n public class ClassLoaderExample  \n{  \n    public static void main(String[] args)  \n    {  \n        Class c=ClassLoaderExample.class; \n        // \n        System.out.println(c.getClassLoader());\n        // String在内置库中，因此有Bootstrap Loader加载，返回null\n        System.out.println(String.class.getClassLoader());  \n    }  \n}\n/*\njdk.internal.loader.ClassLoaders$AppClassLoader@1de0aca6\nnull\n*/\n\n- Class(Method) Area   存储运行时常量池，属性，方法数据，方法代码\n- Heap 堆，运行时分配的内存\n- Stack 栈，\n  \n ```\n ## 参考链接\n - [编译模型](https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/Java基础知识.md#jvm)\n - [Java Edition](https://stackoverflow.com/a/33908729)\n - [Java 简介](https://www.javatpoint.com/internal-details-of-jvm)\n\n","slug":"Java","published":1,"updated":"2019-10-04T13:14:52.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3gx4n1t0016tkbszhmpttfw","content":"<h1 id=\"Java基础\"><a href=\"#Java基础\" class=\"headerlink\" title=\"Java基础\"></a>Java基础</h1><h2 id=\"编译和解释-待补充\"><a href=\"#编译和解释-待补充\" class=\"headerlink\" title=\"编译和解释 (待补充)\"></a>编译和解释 (待补充)</h2><p><img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/Java%20%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B.png\" alt=\"Java程序运行过程\"></p>\n<p>C/C++ 编译器将源代码最终编译为机器指令，因此如果要在不同机器上运行程序需要重新编译源码。Java使用另一种方式实现跨平台，即Java虚拟机(JVM)。首先Java编译器(javac, java compiler)将源代码编译为.class文件，当我们需要将程序运行到其他机器上只需要拷贝.class文件运行即可(假设机器都已经安装JVM), JVM会根据具体的CPU指令集架构规范将.class翻译为机器指令。</p>\n<blockquote>\n<p>常见的.jar(Java ARchive)是 .class文件的压缩包</p>\n</blockquote>\n<h2 id=\"术语\"><a href=\"#术语\" class=\"headerlink\" title=\"术语\"></a>术语</h2><ul>\n<li><p>JDK, Java Development Kit, Oracla公司针对Solaris, Linux, Windows, macOS等系统发布的Java软件开发包，包括常用的java开发组件：</p>\n<ul>\n<li>javac: 编译器，将后缀名为.java的源码编译成后缀名为”.class”的字节码</li>\n<li>java: 运行工具，运行.class字节码</li>\n<li>jar: 打包工具，将相关的类文件打包成一个文件</li>\n<li>javadoc: 文档生成器，从源码注释中提取文档，注释需匹配规范</li>\n<li><strong>jdb debugger: 调试工具</strong></li>\n<li>jps: 显示当前java程序运行的进程状态</li>\n<li>javap: 反编译程序</li>\n<li>javah: 从Java类生成C头文件和源文件。</li>\n<li><p><strong><em>JRE:</em></strong>  包括一个Java虚拟机（Java Virtual Machine，JVM）以及一些标准的类别函数库（Class Library）</p>\n</li>\n<li><p><strong>Java SE = Standard Edition</strong> 最主要的Java编程平台，包括所有的Java库和API(java.lang, java.io, java.math, java.net, java.util, etc…).</p>\n</li>\n<li><strong>Java EE = Enterprise Edition</strong> 企业版本，添加了容错，分布式等功能</li>\n<li><strong>Java ME = Micro Edition</strong> 针对移动设备和嵌入式设备推出的版本，从Java SE中削减了一些功能，并且添加了一些针对移动设备的库</li>\n</ul>\n<h2 id=\"JVM-架构\"><a href=\"#JVM-架构\" class=\"headerlink\" title=\"JVM 架构\"></a>JVM 架构</h2><p><img src=\"https://static.javatpoint.com/images/jvm-architecture.png\" alt=\"jvm\"></p>\n<ul>\n<li>Class Loader: 类加载器，加载<code>.class</code>文件，包括库文件和源码文件，主要由三个内置的加载器构成:</li>\n<li>Bootstrap Loader 加载<code>rt.jar</code>文件，该文件包含了Java SE 中所有的<code>.class</code>文件，如java.lang package classes, java.net package classes, java.util package classes, java.io package classes, java.sql package classes.</li>\n<li>Extension ClassLoader: 加载 <code>$JAVA_HOME/jre/lib/ext</code>目录中的扩展文件.</li>\n<li>System/Application ClassLoader: 加载环境变量<code>classpath</code>中的文件，默认为当前工作目录. 可以使用”-cp”或者”-classpath”改变此路径. <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> public class ClassLoaderExample  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    public static void main(String[] args)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        Class c=ClassLoaderExample.class; </span><br><span class=\"line\">        // </span><br><span class=\"line\">        System.out.println(c.getClassLoader());</span><br><span class=\"line\">        // String在内置库中，因此有Bootstrap Loader加载，返回null</span><br><span class=\"line\">        System.out.println(String.class.getClassLoader());  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/*</span><br><span class=\"line\">jdk.internal.loader.ClassLoaders$AppClassLoader@1de0aca6</span><br><span class=\"line\">null</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">- Class(Method) Area   存储运行时常量池，属性，方法数据，方法代码</span><br><span class=\"line\">- Heap 堆，运行时分配的内存</span><br><span class=\"line\">- Stack 栈，</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/Java基础知识.md#jvm\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">编译模型</a></li>\n<li><a href=\"https://stackoverflow.com/a/33908729\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">Java Edition</a></li>\n<li><a href=\"https://www.javatpoint.com/internal-details-of-jvm\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">Java 简介</a></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Java基础\"><a href=\"#Java基础\" class=\"headerlink\" title=\"Java基础\"></a>Java基础</h1><h2 id=\"编译和解释-待补充\"><a href=\"#编译和解释-待补充\" class=\"headerlink\" title=\"编译和解释 (待补充)\"></a>编译和解释 (待补充)</h2><p><img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/Java%20%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B.png\" alt=\"Java程序运行过程\"></p>\n<p>C/C++ 编译器将源代码最终编译为机器指令，因此如果要在不同机器上运行程序需要重新编译源码。Java使用另一种方式实现跨平台，即Java虚拟机(JVM)。首先Java编译器(javac, java compiler)将源代码编译为.class文件，当我们需要将程序运行到其他机器上只需要拷贝.class文件运行即可(假设机器都已经安装JVM), JVM会根据具体的CPU指令集架构规范将.class翻译为机器指令。</p>\n<blockquote>\n<p>常见的.jar(Java ARchive)是 .class文件的压缩包</p>\n</blockquote>\n<h2 id=\"术语\"><a href=\"#术语\" class=\"headerlink\" title=\"术语\"></a>术语</h2><ul>\n<li><p>JDK, Java Development Kit, Oracla公司针对Solaris, Linux, Windows, macOS等系统发布的Java软件开发包，包括常用的java开发组件：</p>\n<ul>\n<li>javac: 编译器，将后缀名为.java的源码编译成后缀名为”.class”的字节码</li>\n<li>java: 运行工具，运行.class字节码</li>\n<li>jar: 打包工具，将相关的类文件打包成一个文件</li>\n<li>javadoc: 文档生成器，从源码注释中提取文档，注释需匹配规范</li>\n<li><strong>jdb debugger: 调试工具</strong></li>\n<li>jps: 显示当前java程序运行的进程状态</li>\n<li>javap: 反编译程序</li>\n<li>javah: 从Java类生成C头文件和源文件。</li>\n<li><p><strong><em>JRE:</em></strong>  包括一个Java虚拟机（Java Virtual Machine，JVM）以及一些标准的类别函数库（Class Library）</p>\n</li>\n<li><p><strong>Java SE = Standard Edition</strong> 最主要的Java编程平台，包括所有的Java库和API(java.lang, java.io, java.math, java.net, java.util, etc…).</p>\n</li>\n<li><strong>Java EE = Enterprise Edition</strong> 企业版本，添加了容错，分布式等功能</li>\n<li><strong>Java ME = Micro Edition</strong> 针对移动设备和嵌入式设备推出的版本，从Java SE中削减了一些功能，并且添加了一些针对移动设备的库</li>\n</ul>\n<h2 id=\"JVM-架构\"><a href=\"#JVM-架构\" class=\"headerlink\" title=\"JVM 架构\"></a>JVM 架构</h2><p><img src=\"https://static.javatpoint.com/images/jvm-architecture.png\" alt=\"jvm\"></p>\n<ul>\n<li>Class Loader: 类加载器，加载<code>.class</code>文件，包括库文件和源码文件，主要由三个内置的加载器构成:</li>\n<li>Bootstrap Loader 加载<code>rt.jar</code>文件，该文件包含了Java SE 中所有的<code>.class</code>文件，如java.lang package classes, java.net package classes, java.util package classes, java.io package classes, java.sql package classes.</li>\n<li>Extension ClassLoader: 加载 <code>$JAVA_HOME/jre/lib/ext</code>目录中的扩展文件.</li>\n<li>System/Application ClassLoader: 加载环境变量<code>classpath</code>中的文件，默认为当前工作目录. 可以使用”-cp”或者”-classpath”改变此路径. <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> public class ClassLoaderExample  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    public static void main(String[] args)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        Class c=ClassLoaderExample.class; </span><br><span class=\"line\">        // </span><br><span class=\"line\">        System.out.println(c.getClassLoader());</span><br><span class=\"line\">        // String在内置库中，因此有Bootstrap Loader加载，返回null</span><br><span class=\"line\">        System.out.println(String.class.getClassLoader());  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/*</span><br><span class=\"line\">jdk.internal.loader.ClassLoaders$AppClassLoader@1de0aca6</span><br><span class=\"line\">null</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">- Class(Method) Area   存储运行时常量池，属性，方法数据，方法代码</span><br><span class=\"line\">- Heap 堆，运行时分配的内存</span><br><span class=\"line\">- Stack 栈，</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/Java基础知识.md#jvm\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">编译模型</a></li>\n<li><a href=\"https://stackoverflow.com/a/33908729\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">Java Edition</a></li>\n<li><a href=\"https://www.javatpoint.com/internal-details-of-jvm\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">Java 简介</a></li>\n</ul>\n</li>\n</ul>\n"},{"title":"ReentrantLock","date":"2019-09-11T05:30:58.000Z","_content":"# Data Structure \n![basic structure](/images/reentrantlock1.png)\nAs shown in above picture, `ReentrantLock` has only one property: `sync` of type `Sync`, which extends from `AbstracQueueSynchronizer`, `AQS` in brief. `AQS` is a synchronzier for many classes in J.U.C, allowing programmers implementing their own Lock without dealing with the detail of maintainning a synchronizing queue.\n\n# AbstractQueueSynchronizer\n`AQS` maintains a `FIFO` queue ,  a `int` and a `Thread` type properties inside. The `state` is set to be `0` when no one owns the synchronizer. Every thread try to get the ownership of synchronizer by an atomic instruction `CAS` provided by CPU. Threads will try to set  `state` to `1` by `unsafe.compareAndSwapInt(this, stateOffset, 0, 1);`, the first and second parameters together make the address of `state`, the third parameter `0` indicates the old value of `state`, and the last indicates the value we'd like to set. If `state` is not `0`, this function won't set it to `1` and returns false, otherwise it returns ture. This operation is atomic so only one thread can set `state` successfully, and it will set the ownership of the synchronizer by `exclusiveOwnerThread = Thread.currentThread();`.\n\nBy far, we have make clear how a thread get the ownership of the synchronizer sucessfully, but what will the most threads that fails in the competition do? They just wrap themseleves up as a `Node` and append to the waiting queue in the synchronizer, and then they will choose to spin themselves or sleep.\n\n`spin` is actually a infinite loop with an operation in it. Here is an example:\n\n```\nfor(;;)\nif(compareAndSetState(0,1))break;\n```\n\nThe thread tries to set state again and again if they fails. It works well if the competition of threads is not too fierce. Nevertheless, think about one thread holds the synchronizer for a long time, and during that time, other threads have to spin again and again, it's a waste of CPU resource! So only the thread next to head node in the waiting queue will do so. All others threads will invoke `LockSupport.park()` to sleep themselves until the thread before it wake them up by `LockSupport.unpark(thread)`(in the queue, they are predecessor node and sucessor node).\n\n# ReentrantLock\n`AQS` has done most jobs for `ReentranLock`:\n- the mutex: `state`\n- how to get the mutex: `CAS`\n- what will a thread do after fails to get the mutex: wrap it up as `Node` , push it into the waiting queue, and then choose to spin or sleep.\n- what will the thread do after get the mutex: wrap it up as a `Node`, set itself as the head node of waiting queue. When it finishes its task, it will set the `state` to `0` and wake the successor `Node` up in the waiting queue. \n\n`ReentrantLock` means a thread can get the synchronizer many times. The crutial part is it overrided the method for acquire `state` in `AQS`. After fails to set `state` from 0 to 1, the current thread will check if `exclusiveOwnerThread == Thread.currentThread()`. If so, increament `state` by 1, and decrease it after one thread finished its task and try to release the synchronizer.","source":"_posts/ReentrantLock.md","raw":"---\ntitle: ReentrantLock\ndate: 2019-09-11 13:30:58\ntags:\n- ReentrantLock\n- J.U.C\n- Concurrency\ncategories:\n- Concurrency\n---\n# Data Structure \n![basic structure](/images/reentrantlock1.png)\nAs shown in above picture, `ReentrantLock` has only one property: `sync` of type `Sync`, which extends from `AbstracQueueSynchronizer`, `AQS` in brief. `AQS` is a synchronzier for many classes in J.U.C, allowing programmers implementing their own Lock without dealing with the detail of maintainning a synchronizing queue.\n\n# AbstractQueueSynchronizer\n`AQS` maintains a `FIFO` queue ,  a `int` and a `Thread` type properties inside. The `state` is set to be `0` when no one owns the synchronizer. Every thread try to get the ownership of synchronizer by an atomic instruction `CAS` provided by CPU. Threads will try to set  `state` to `1` by `unsafe.compareAndSwapInt(this, stateOffset, 0, 1);`, the first and second parameters together make the address of `state`, the third parameter `0` indicates the old value of `state`, and the last indicates the value we'd like to set. If `state` is not `0`, this function won't set it to `1` and returns false, otherwise it returns ture. This operation is atomic so only one thread can set `state` successfully, and it will set the ownership of the synchronizer by `exclusiveOwnerThread = Thread.currentThread();`.\n\nBy far, we have make clear how a thread get the ownership of the synchronizer sucessfully, but what will the most threads that fails in the competition do? They just wrap themseleves up as a `Node` and append to the waiting queue in the synchronizer, and then they will choose to spin themselves or sleep.\n\n`spin` is actually a infinite loop with an operation in it. Here is an example:\n\n```\nfor(;;)\nif(compareAndSetState(0,1))break;\n```\n\nThe thread tries to set state again and again if they fails. It works well if the competition of threads is not too fierce. Nevertheless, think about one thread holds the synchronizer for a long time, and during that time, other threads have to spin again and again, it's a waste of CPU resource! So only the thread next to head node in the waiting queue will do so. All others threads will invoke `LockSupport.park()` to sleep themselves until the thread before it wake them up by `LockSupport.unpark(thread)`(in the queue, they are predecessor node and sucessor node).\n\n# ReentrantLock\n`AQS` has done most jobs for `ReentranLock`:\n- the mutex: `state`\n- how to get the mutex: `CAS`\n- what will a thread do after fails to get the mutex: wrap it up as `Node` , push it into the waiting queue, and then choose to spin or sleep.\n- what will the thread do after get the mutex: wrap it up as a `Node`, set itself as the head node of waiting queue. When it finishes its task, it will set the `state` to `0` and wake the successor `Node` up in the waiting queue. \n\n`ReentrantLock` means a thread can get the synchronizer many times. The crutial part is it overrided the method for acquire `state` in `AQS`. After fails to set `state` from 0 to 1, the current thread will check if `exclusiveOwnerThread == Thread.currentThread()`. If so, increament `state` by 1, and decrease it after one thread finished its task and try to release the synchronizer.","slug":"ReentrantLock","published":1,"updated":"2019-09-21T06:58:11.711Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3gx4n1v0018tkbshumlnd61","content":"<h1 id=\"Data-Structure\"><a href=\"#Data-Structure\" class=\"headerlink\" title=\"Data Structure\"></a>Data Structure</h1><p><img src=\"/images/reentrantlock1.png\" alt=\"basic structure\"><br>As shown in above picture, <code>ReentrantLock</code> has only one property: <code>sync</code> of type <code>Sync</code>, which extends from <code>AbstracQueueSynchronizer</code>, <code>AQS</code> in brief. <code>AQS</code> is a synchronzier for many classes in J.U.C, allowing programmers implementing their own Lock without dealing with the detail of maintainning a synchronizing queue.</p>\n<h1 id=\"AbstractQueueSynchronizer\"><a href=\"#AbstractQueueSynchronizer\" class=\"headerlink\" title=\"AbstractQueueSynchronizer\"></a>AbstractQueueSynchronizer</h1><p><code>AQS</code> maintains a <code>FIFO</code> queue ,  a <code>int</code> and a <code>Thread</code> type properties inside. The <code>state</code> is set to be <code>0</code> when no one owns the synchronizer. Every thread try to get the ownership of synchronizer by an atomic instruction <code>CAS</code> provided by CPU. Threads will try to set  <code>state</code> to <code>1</code> by <code>unsafe.compareAndSwapInt(this, stateOffset, 0, 1);</code>, the first and second parameters together make the address of <code>state</code>, the third parameter <code>0</code> indicates the old value of <code>state</code>, and the last indicates the value we’d like to set. If <code>state</code> is not <code>0</code>, this function won’t set it to <code>1</code> and returns false, otherwise it returns ture. This operation is atomic so only one thread can set <code>state</code> successfully, and it will set the ownership of the synchronizer by <code>exclusiveOwnerThread = Thread.currentThread();</code>.</p>\n<p>By far, we have make clear how a thread get the ownership of the synchronizer sucessfully, but what will the most threads that fails in the competition do? They just wrap themseleves up as a <code>Node</code> and append to the waiting queue in the synchronizer, and then they will choose to spin themselves or sleep.</p>\n<p><code>spin</code> is actually a infinite loop with an operation in it. Here is an example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(;;)</span><br><span class=\"line\">if(compareAndSetState(0,1))break;</span><br></pre></td></tr></table></figure>\n<p>The thread tries to set state again and again if they fails. It works well if the competition of threads is not too fierce. Nevertheless, think about one thread holds the synchronizer for a long time, and during that time, other threads have to spin again and again, it’s a waste of CPU resource! So only the thread next to head node in the waiting queue will do so. All others threads will invoke <code>LockSupport.park()</code> to sleep themselves until the thread before it wake them up by <code>LockSupport.unpark(thread)</code>(in the queue, they are predecessor node and sucessor node).</p>\n<h1 id=\"ReentrantLock\"><a href=\"#ReentrantLock\" class=\"headerlink\" title=\"ReentrantLock\"></a>ReentrantLock</h1><p><code>AQS</code> has done most jobs for <code>ReentranLock</code>:</p>\n<ul>\n<li>the mutex: <code>state</code></li>\n<li>how to get the mutex: <code>CAS</code></li>\n<li>what will a thread do after fails to get the mutex: wrap it up as <code>Node</code> , push it into the waiting queue, and then choose to spin or sleep.</li>\n<li>what will the thread do after get the mutex: wrap it up as a <code>Node</code>, set itself as the head node of waiting queue. When it finishes its task, it will set the <code>state</code> to <code>0</code> and wake the successor <code>Node</code> up in the waiting queue. </li>\n</ul>\n<p><code>ReentrantLock</code> means a thread can get the synchronizer many times. The crutial part is it overrided the method for acquire <code>state</code> in <code>AQS</code>. After fails to set <code>state</code> from 0 to 1, the current thread will check if <code>exclusiveOwnerThread == Thread.currentThread()</code>. If so, increament <code>state</code> by 1, and decrease it after one thread finished its task and try to release the synchronizer.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Data-Structure\"><a href=\"#Data-Structure\" class=\"headerlink\" title=\"Data Structure\"></a>Data Structure</h1><p><img src=\"/images/reentrantlock1.png\" alt=\"basic structure\"><br>As shown in above picture, <code>ReentrantLock</code> has only one property: <code>sync</code> of type <code>Sync</code>, which extends from <code>AbstracQueueSynchronizer</code>, <code>AQS</code> in brief. <code>AQS</code> is a synchronzier for many classes in J.U.C, allowing programmers implementing their own Lock without dealing with the detail of maintainning a synchronizing queue.</p>\n<h1 id=\"AbstractQueueSynchronizer\"><a href=\"#AbstractQueueSynchronizer\" class=\"headerlink\" title=\"AbstractQueueSynchronizer\"></a>AbstractQueueSynchronizer</h1><p><code>AQS</code> maintains a <code>FIFO</code> queue ,  a <code>int</code> and a <code>Thread</code> type properties inside. The <code>state</code> is set to be <code>0</code> when no one owns the synchronizer. Every thread try to get the ownership of synchronizer by an atomic instruction <code>CAS</code> provided by CPU. Threads will try to set  <code>state</code> to <code>1</code> by <code>unsafe.compareAndSwapInt(this, stateOffset, 0, 1);</code>, the first and second parameters together make the address of <code>state</code>, the third parameter <code>0</code> indicates the old value of <code>state</code>, and the last indicates the value we’d like to set. If <code>state</code> is not <code>0</code>, this function won’t set it to <code>1</code> and returns false, otherwise it returns ture. This operation is atomic so only one thread can set <code>state</code> successfully, and it will set the ownership of the synchronizer by <code>exclusiveOwnerThread = Thread.currentThread();</code>.</p>\n<p>By far, we have make clear how a thread get the ownership of the synchronizer sucessfully, but what will the most threads that fails in the competition do? They just wrap themseleves up as a <code>Node</code> and append to the waiting queue in the synchronizer, and then they will choose to spin themselves or sleep.</p>\n<p><code>spin</code> is actually a infinite loop with an operation in it. Here is an example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(;;)</span><br><span class=\"line\">if(compareAndSetState(0,1))break;</span><br></pre></td></tr></table></figure>\n<p>The thread tries to set state again and again if they fails. It works well if the competition of threads is not too fierce. Nevertheless, think about one thread holds the synchronizer for a long time, and during that time, other threads have to spin again and again, it’s a waste of CPU resource! So only the thread next to head node in the waiting queue will do so. All others threads will invoke <code>LockSupport.park()</code> to sleep themselves until the thread before it wake them up by <code>LockSupport.unpark(thread)</code>(in the queue, they are predecessor node and sucessor node).</p>\n<h1 id=\"ReentrantLock\"><a href=\"#ReentrantLock\" class=\"headerlink\" title=\"ReentrantLock\"></a>ReentrantLock</h1><p><code>AQS</code> has done most jobs for <code>ReentranLock</code>:</p>\n<ul>\n<li>the mutex: <code>state</code></li>\n<li>how to get the mutex: <code>CAS</code></li>\n<li>what will a thread do after fails to get the mutex: wrap it up as <code>Node</code> , push it into the waiting queue, and then choose to spin or sleep.</li>\n<li>what will the thread do after get the mutex: wrap it up as a <code>Node</code>, set itself as the head node of waiting queue. When it finishes its task, it will set the <code>state</code> to <code>0</code> and wake the successor <code>Node</code> up in the waiting queue. </li>\n</ul>\n<p><code>ReentrantLock</code> means a thread can get the synchronizer many times. The crutial part is it overrided the method for acquire <code>state</code> in <code>AQS</code>. After fails to set <code>state</code> from 0 to 1, the current thread will check if <code>exclusiveOwnerThread == Thread.currentThread()</code>. If so, increament <code>state</code> by 1, and decrease it after one thread finished its task and try to release the synchronizer.</p>\n"},{"title":"40 Combination Sum II","date":"2019-11-20T05:42:13.000Z","comments":1,"_content":"# Intuition & Algorithm\nI think it's better to compare this question with last question [39 Combination Sum](https://racla.github.io/39-Combination-Sum/). Their difference is:\n\n> One number can appears multiple times, but can only be used once. In last qestion, one number appears once but can be used multiple times.\n\nThe constraints of this question is still duplicate combinations is not allowed.Similar to last question, we should focus on how to guarentee unique solution path while using dfs method. Let's see a example below:\n> [1,1,1,2,2], target=4\n\nAfter we add first `1` into our path, can we add the second `1`? The answer is yes, because there is no `1`s between these two `1`s, so another path can't contain other `1`s, there will be no duplicates. But what if the third `1`, can we add it to the path? The answer is no, because there may be another path containing the second `1` and does contain the third `1`, this will cause duplication.  So the crucial part is add `1`s one by one, if previous `1` are not added, we can't add current `1`.\n\n# Code\n```\nclass Solution {\n    private List<Integer> path = new LinkedList<Integer>();\n    private List<List<Integer>> ans = new LinkedList<>();\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        Arrays.sort(candidates);\n        dfs(candidates, target, 0);\n        return ans;\n    }\n    private void dfs(int[] cand, int target, int start){\n        if(target < 0)return;\n        if(target ==0 ){\n            ans.add(new ArrayList(path));\n            return;\n        }\n        for(int i = start; i < cand.length ;i++){\n            if(i > start && cand[i]==cand[i-1])continue;\n            if(cand[i] > target)break;\n            path.add(cand[i]);\n            dfs(cand, target - cand[i], i+1);\n            path.remove(path.size()-1);\n        }\n    }\n}\n```\n# Complexity\n**Time Complexity:** $O(n^{target})$\n\n**Space Complexity:** $O(target)$\n\nSee detailed explanations [here](https://racla.github.io/39-Combination-Sum/)\n\n","source":"_posts/40-Combination-Sum-II.md","raw":"---\ntitle: 40 Combination Sum II\ndate: 2019-11-20 13:42:13\ntags:\n- dfs\ncategories:\n- LeetCode\ncomments: true\n---\n# Intuition & Algorithm\nI think it's better to compare this question with last question [39 Combination Sum](https://racla.github.io/39-Combination-Sum/). Their difference is:\n\n> One number can appears multiple times, but can only be used once. In last qestion, one number appears once but can be used multiple times.\n\nThe constraints of this question is still duplicate combinations is not allowed.Similar to last question, we should focus on how to guarentee unique solution path while using dfs method. Let's see a example below:\n> [1,1,1,2,2], target=4\n\nAfter we add first `1` into our path, can we add the second `1`? The answer is yes, because there is no `1`s between these two `1`s, so another path can't contain other `1`s, there will be no duplicates. But what if the third `1`, can we add it to the path? The answer is no, because there may be another path containing the second `1` and does contain the third `1`, this will cause duplication.  So the crucial part is add `1`s one by one, if previous `1` are not added, we can't add current `1`.\n\n# Code\n```\nclass Solution {\n    private List<Integer> path = new LinkedList<Integer>();\n    private List<List<Integer>> ans = new LinkedList<>();\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        Arrays.sort(candidates);\n        dfs(candidates, target, 0);\n        return ans;\n    }\n    private void dfs(int[] cand, int target, int start){\n        if(target < 0)return;\n        if(target ==0 ){\n            ans.add(new ArrayList(path));\n            return;\n        }\n        for(int i = start; i < cand.length ;i++){\n            if(i > start && cand[i]==cand[i-1])continue;\n            if(cand[i] > target)break;\n            path.add(cand[i]);\n            dfs(cand, target - cand[i], i+1);\n            path.remove(path.size()-1);\n        }\n    }\n}\n```\n# Complexity\n**Time Complexity:** $O(n^{target})$\n\n**Space Complexity:** $O(target)$\n\nSee detailed explanations [here](https://racla.github.io/39-Combination-Sum/)\n\n","slug":"40-Combination-Sum-II","published":1,"updated":"2019-11-20T05:43:44.541Z","layout":"post","photos":[],"link":"","_id":"ck3gx4n1x001atkbsfqyybxhk","content":"<h1 id=\"Intuition-amp-Algorithm\"><a href=\"#Intuition-amp-Algorithm\" class=\"headerlink\" title=\"Intuition &amp; Algorithm\"></a>Intuition &amp; Algorithm</h1><p>I think it’s better to compare this question with last question <a href=\"https://racla.github.io/39-Combination-Sum/\">39 Combination Sum</a>. Their difference is:</p>\n<blockquote>\n<p>One number can appears multiple times, but can only be used once. In last qestion, one number appears once but can be used multiple times.</p>\n</blockquote>\n<p>The constraints of this question is still duplicate combinations is not allowed.Similar to last question, we should focus on how to guarentee unique solution path while using dfs method. Let’s see a example below:</p>\n<blockquote>\n<p>[1,1,1,2,2], target=4</p>\n</blockquote>\n<p>After we add first <code>1</code> into our path, can we add the second <code>1</code>? The answer is yes, because there is no <code>1</code>s between these two <code>1</code>s, so another path can’t contain other <code>1</code>s, there will be no duplicates. But what if the third <code>1</code>, can we add it to the path? The answer is no, because there may be another path containing the second <code>1</code> and does contain the third <code>1</code>, this will cause duplication.  So the crucial part is add <code>1</code>s one by one, if previous <code>1</code> are not added, we can’t add current <code>1</code>.</p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    private List&lt;Integer&gt; path = new LinkedList&lt;Integer&gt;();</span><br><span class=\"line\">    private List&lt;List&lt;Integer&gt;&gt; ans = new LinkedList&lt;&gt;();</span><br><span class=\"line\">    public List&lt;List&lt;Integer&gt;&gt; combinationSum2(int[] candidates, int target) &#123;</span><br><span class=\"line\">        Arrays.sort(candidates);</span><br><span class=\"line\">        dfs(candidates, target, 0);</span><br><span class=\"line\">        return ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private void dfs(int[] cand, int target, int start)&#123;</span><br><span class=\"line\">        if(target &lt; 0)return;</span><br><span class=\"line\">        if(target ==0 )&#123;</span><br><span class=\"line\">            ans.add(new ArrayList(path));</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for(int i = start; i &lt; cand.length ;i++)&#123;</span><br><span class=\"line\">            if(i &gt; start &amp;&amp; cand[i]==cand[i-1])continue;</span><br><span class=\"line\">            if(cand[i] &gt; target)break;</span><br><span class=\"line\">            path.add(cand[i]);</span><br><span class=\"line\">            dfs(cand, target - cand[i], i+1);</span><br><span class=\"line\">            path.remove(path.size()-1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> $O(n^{target})$</p>\n<p><strong>Space Complexity:</strong> $O(target)$</p>\n<p>See detailed explanations <a href=\"https://racla.github.io/39-Combination-Sum/\">here</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Intuition-amp-Algorithm\"><a href=\"#Intuition-amp-Algorithm\" class=\"headerlink\" title=\"Intuition &amp; Algorithm\"></a>Intuition &amp; Algorithm</h1><p>I think it’s better to compare this question with last question <a href=\"https://racla.github.io/39-Combination-Sum/\">39 Combination Sum</a>. Their difference is:</p>\n<blockquote>\n<p>One number can appears multiple times, but can only be used once. In last qestion, one number appears once but can be used multiple times.</p>\n</blockquote>\n<p>The constraints of this question is still duplicate combinations is not allowed.Similar to last question, we should focus on how to guarentee unique solution path while using dfs method. Let’s see a example below:</p>\n<blockquote>\n<p>[1,1,1,2,2], target=4</p>\n</blockquote>\n<p>After we add first <code>1</code> into our path, can we add the second <code>1</code>? The answer is yes, because there is no <code>1</code>s between these two <code>1</code>s, so another path can’t contain other <code>1</code>s, there will be no duplicates. But what if the third <code>1</code>, can we add it to the path? The answer is no, because there may be another path containing the second <code>1</code> and does contain the third <code>1</code>, this will cause duplication.  So the crucial part is add <code>1</code>s one by one, if previous <code>1</code> are not added, we can’t add current <code>1</code>.</p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    private List&lt;Integer&gt; path = new LinkedList&lt;Integer&gt;();</span><br><span class=\"line\">    private List&lt;List&lt;Integer&gt;&gt; ans = new LinkedList&lt;&gt;();</span><br><span class=\"line\">    public List&lt;List&lt;Integer&gt;&gt; combinationSum2(int[] candidates, int target) &#123;</span><br><span class=\"line\">        Arrays.sort(candidates);</span><br><span class=\"line\">        dfs(candidates, target, 0);</span><br><span class=\"line\">        return ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private void dfs(int[] cand, int target, int start)&#123;</span><br><span class=\"line\">        if(target &lt; 0)return;</span><br><span class=\"line\">        if(target ==0 )&#123;</span><br><span class=\"line\">            ans.add(new ArrayList(path));</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for(int i = start; i &lt; cand.length ;i++)&#123;</span><br><span class=\"line\">            if(i &gt; start &amp;&amp; cand[i]==cand[i-1])continue;</span><br><span class=\"line\">            if(cand[i] &gt; target)break;</span><br><span class=\"line\">            path.add(cand[i]);</span><br><span class=\"line\">            dfs(cand, target - cand[i], i+1);</span><br><span class=\"line\">            path.remove(path.size()-1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h1><p><strong>Time Complexity:</strong> $O(n^{target})$</p>\n<p><strong>Space Complexity:</strong> $O(target)$</p>\n<p>See detailed explanations <a href=\"https://racla.github.io/39-Combination-Sum/\">here</a></p>\n"},{"title":"92 Reverse Linked List II","date":"2019-11-27T06:36:54.000Z","_content":"","source":"_posts/92-Reverse-Linked-List-II.md","raw":"---\ntitle: 92 Reverse Linked List II\ndate: 2019-11-27 14:36:54\ntags:\n---\n","slug":"92-Reverse-Linked-List-II","published":1,"updated":"2019-11-27T06:36:54.252Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3gx4n44001ttkbstkf9symi","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[{"post_id":"ck3gx4myk0001tkbso3l1x1xl","category_id":"ck3gx4n0t000dtkbsv51zmv2u","_id":"ck3gx4n43001rtkbsmqwg7rs7"},{"post_id":"ck3gx4myr0003tkbs5vpioxg4","category_id":"ck3gx4n0t000dtkbsv51zmv2u","_id":"ck3gx4n46001vtkbs6w80f4pu"},{"post_id":"ck3gx4myt0004tkbscxfbj48r","category_id":"ck3gx4n0t000dtkbsv51zmv2u","_id":"ck3gx4n46001xtkbsn5r1olyq"},{"post_id":"ck3gx4myv0005tkbsj3rx2d1p","category_id":"ck3gx4n0t000dtkbsv51zmv2u","_id":"ck3gx4n480021tkbs9mhnqegk"},{"post_id":"ck3gx4myx0006tkbsg21kmle3","category_id":"ck3gx4n0t000dtkbsv51zmv2u","_id":"ck3gx4n480023tkbsey0d6qyz"},{"post_id":"ck3gx4myz0007tkbsvedlxjge","category_id":"ck3gx4n0t000dtkbsv51zmv2u","_id":"ck3gx4n4a0027tkbslfbrme1m"},{"post_id":"ck3gx4mz00008tkbsrz858xei","category_id":"ck3gx4n0t000dtkbsv51zmv2u","_id":"ck3gx4n4a0029tkbs5nnmzrry"},{"post_id":"ck3gx4mz20009tkbsr4rp9936","category_id":"ck3gx4n0t000dtkbsv51zmv2u","_id":"ck3gx4n4b002dtkbsqevzip0k"},{"post_id":"ck3gx4mz4000atkbs24rlh99i","category_id":"ck3gx4n0t000dtkbsv51zmv2u","_id":"ck3gx4n4c002ftkbs21ddd9h7"},{"post_id":"ck3gx4mz8000btkbsaex5w4r2","category_id":"ck3gx4n0t000dtkbsv51zmv2u","_id":"ck3gx4n4d002itkbsb8tpgfm6"},{"post_id":"ck3gx4mzb000ctkbsda3mx7a3","category_id":"ck3gx4n0t000dtkbsv51zmv2u","_id":"ck3gx4n4d002ktkbskmlcqcae"},{"post_id":"ck3gx4n11000gtkbs2677pldo","category_id":"ck3gx4n0t000dtkbsv51zmv2u","_id":"ck3gx4n4e002ntkbss4va0dfk"},{"post_id":"ck3gx4n14000itkbsht89kjjv","category_id":"ck3gx4n0t000dtkbsv51zmv2u","_id":"ck3gx4n4f002ptkbszanrj8j6"},{"post_id":"ck3gx4n17000ktkbsdjltld5s","category_id":"ck3gx4n0t000dtkbsv51zmv2u","_id":"ck3gx4n4f002rtkbs8tkz96x8"},{"post_id":"ck3gx4n1a000ntkbsfc4riwk5","category_id":"ck3gx4n0t000dtkbsv51zmv2u","_id":"ck3gx4n4g002utkbs87hk8wgw"},{"post_id":"ck3gx4n1c000otkbs7fqsxf3h","category_id":"ck3gx4n0t000dtkbsv51zmv2u","_id":"ck3gx4n4g002wtkbsx7dhtmeg"},{"post_id":"ck3gx4n1e000rtkbsnogl1iz1","category_id":"ck3gx4n0t000dtkbsv51zmv2u","_id":"ck3gx4n4h002ztkbs8b99he5l"},{"post_id":"ck3gx4n1g000stkbsku7g3unk","category_id":"ck3gx4n0t000dtkbsv51zmv2u","_id":"ck3gx4n4h0031tkbs3xpmt4ba"},{"post_id":"ck3gx4n1i000vtkbsijtztbtp","category_id":"ck3gx4n0t000dtkbsv51zmv2u","_id":"ck3gx4n4i0034tkbsfwc9e2sw"},{"post_id":"ck3gx4n1k000wtkbsi8wlkzgk","category_id":"ck3gx4n0t000dtkbsv51zmv2u","_id":"ck3gx4n4i0036tkbs8yxea1dd"},{"post_id":"ck3gx4n1m000ztkbs8bdldcst","category_id":"ck3gx4n0t000dtkbsv51zmv2u","_id":"ck3gx4n4j0039tkbsrulw99w6"},{"post_id":"ck3gx4n1n0010tkbst27ofn3w","category_id":"ck3gx4n0t000dtkbsv51zmv2u","_id":"ck3gx4n4j003btkbs8kzzseyf"},{"post_id":"ck3gx4n1x001atkbsfqyybxhk","category_id":"ck3gx4n0t000dtkbsv51zmv2u","_id":"ck3gx4n4j003dtkbs3pxt43l0"},{"post_id":"ck3gx4n1p0012tkbs4l2lb1dy","category_id":"ck3gx4n43001qtkbscmabj74s","_id":"ck3gx4nac003ltkbszxxcyi9o"},{"post_id":"ck3gx4n1v0018tkbshumlnd61","category_id":"ck3gx4n4b002btkbs59rfwhrx","_id":"ck3gx4nad003ntkbsyxml3pw6"},{"post_id":"ck3gx4n1r0014tkbsb4weo7lv","category_id":"ck3gx4n47001ztkbsiu133l51","_id":"ck3gx4ncg0041tkbsrz9tc4nx"},{"post_id":"ck3gx4n1r0014tkbsb4weo7lv","category_id":"ck3gx4nac003ktkbstxvdgv56","_id":"ck3gx4nch0042tkbst4h1zgp7"},{"post_id":"ck3gx4n1t0016tkbszhmpttfw","category_id":"ck3gx4n47001ztkbsiu133l51","_id":"ck3gx4nch0043tkbsa03o0d7h"},{"post_id":"ck3gx4n1t0016tkbszhmpttfw","category_id":"ck3gx4nad003ptkbs8md32928","_id":"ck3gx4nch0044tkbsdg2mnw5a"}],"PostTag":[{"post_id":"ck3gx4myk0001tkbso3l1x1xl","tag_id":"ck3gx4n10000etkbsgcdjb391","_id":"ck3gx4n42001otkbsyv3arb3j"},{"post_id":"ck3gx4myk0001tkbso3l1x1xl","tag_id":"ck3gx4n19000mtkbsyoyqcgob","_id":"ck3gx4n45001utkbs9b2h0zjq"},{"post_id":"ck3gx4myr0003tkbs5vpioxg4","tag_id":"ck3gx4n1e000qtkbsva4x0pkn","_id":"ck3gx4n46001wtkbsmertic64"},{"post_id":"ck3gx4myr0003tkbs5vpioxg4","tag_id":"ck3gx4n1i000utkbsy7r7oujf","_id":"ck3gx4n470020tkbsy3hgpkdq"},{"post_id":"ck3gx4myr0003tkbs5vpioxg4","tag_id":"ck3gx4n1m000ytkbsxxhaccb9","_id":"ck3gx4n480022tkbs2az660kd"},{"post_id":"ck3gx4myt0004tkbscxfbj48r","tag_id":"ck3gx4n1e000qtkbsva4x0pkn","_id":"ck3gx4n4a0026tkbsynjwvmib"},{"post_id":"ck3gx4myt0004tkbscxfbj48r","tag_id":"ck3gx4n1m000ytkbsxxhaccb9","_id":"ck3gx4n4a0028tkbsitc1h010"},{"post_id":"ck3gx4myv0005tkbsj3rx2d1p","tag_id":"ck3gx4n1z001btkbs25mrrhv2","_id":"ck3gx4n4b002ctkbsgxvvxk2z"},{"post_id":"ck3gx4myx0006tkbsg21kmle3","tag_id":"ck3gx4n1e000qtkbsva4x0pkn","_id":"ck3gx4n4c002etkbsyyea0gwf"},{"post_id":"ck3gx4myz0007tkbsvedlxjge","tag_id":"ck3gx4n1e000qtkbsva4x0pkn","_id":"ck3gx4n4c002htkbs4l5v7kpw"},{"post_id":"ck3gx4myz0007tkbsvedlxjge","tag_id":"ck3gx4n1m000ytkbsxxhaccb9","_id":"ck3gx4n4d002jtkbsvq4xinfr"},{"post_id":"ck3gx4mz00008tkbsrz858xei","tag_id":"ck3gx4n1e000qtkbsva4x0pkn","_id":"ck3gx4n4e002ltkbserktii3u"},{"post_id":"ck3gx4mz20009tkbsr4rp9936","tag_id":"ck3gx4n25001jtkbsnfpj4381","_id":"ck3gx4n4e002otkbsjqgvnqrx"},{"post_id":"ck3gx4mz4000atkbs24rlh99i","tag_id":"ck3gx4n25001ktkbse8zl6lxi","_id":"ck3gx4n4f002qtkbs3dl1bkm3"},{"post_id":"ck3gx4mz8000btkbsaex5w4r2","tag_id":"ck3gx4n25001ktkbse8zl6lxi","_id":"ck3gx4n4g002ttkbs70ztx9be"},{"post_id":"ck3gx4mz8000btkbsaex5w4r2","tag_id":"ck3gx4n25001jtkbsnfpj4381","_id":"ck3gx4n4g002vtkbs9cg0zalc"},{"post_id":"ck3gx4mzb000ctkbsda3mx7a3","tag_id":"ck3gx4n25001jtkbsnfpj4381","_id":"ck3gx4n4h002ytkbsul856qyr"},{"post_id":"ck3gx4n1a000ntkbsfc4riwk5","tag_id":"ck3gx4n25001jtkbsnfpj4381","_id":"ck3gx4n4h0030tkbsubuawlxa"},{"post_id":"ck3gx4n1c000otkbs7fqsxf3h","tag_id":"ck3gx4n1e000qtkbsva4x0pkn","_id":"ck3gx4n4i0033tkbsab0yl1gx"},{"post_id":"ck3gx4n1e000rtkbsnogl1iz1","tag_id":"ck3gx4n1e000qtkbsva4x0pkn","_id":"ck3gx4n4i0035tkbsj6ujemhh"},{"post_id":"ck3gx4n1g000stkbsku7g3unk","tag_id":"ck3gx4n1e000qtkbsva4x0pkn","_id":"ck3gx4n4i0037tkbs6e6ltwwb"},{"post_id":"ck3gx4n1i000vtkbsijtztbtp","tag_id":"ck3gx4n1e000qtkbsva4x0pkn","_id":"ck3gx4n4j003atkbsb8k4zboi"},{"post_id":"ck3gx4n1k000wtkbsi8wlkzgk","tag_id":"ck3gx4n25001jtkbsnfpj4381","_id":"ck3gx4n4j003ctkbs88g3hmzd"},{"post_id":"ck3gx4n1m000ztkbs8bdldcst","tag_id":"ck3gx4n1z001btkbs25mrrhv2","_id":"ck3gx4n4k003ftkbss43xcz2z"},{"post_id":"ck3gx4n1n0010tkbst27ofn3w","tag_id":"ck3gx4n1e000qtkbsva4x0pkn","_id":"ck3gx4n4l003gtkbsgmi1hfo3"},{"post_id":"ck3gx4n1x001atkbsfqyybxhk","tag_id":"ck3gx4n25001ktkbse8zl6lxi","_id":"ck3gx4n4m003itkbst0rmni6e"},{"post_id":"ck3gx4n11000gtkbs2677pldo","tag_id":"ck3gx4n42001ptkbskivfjblf","_id":"ck3gx4nac003jtkbsiwr4dcdf"},{"post_id":"ck3gx4n11000gtkbs2677pldo","tag_id":"ck3gx4n25001jtkbsnfpj4381","_id":"ck3gx4nad003mtkbs1xc8uism"},{"post_id":"ck3gx4n11000gtkbs2677pldo","tag_id":"ck3gx4n46001ytkbs1awvn65g","_id":"ck3gx4nad003otkbs2514158b"},{"post_id":"ck3gx4n14000itkbsht89kjjv","tag_id":"ck3gx4n42001ptkbskivfjblf","_id":"ck3gx4nad003qtkbsoh3zvd87"},{"post_id":"ck3gx4n14000itkbsht89kjjv","tag_id":"ck3gx4n25001jtkbsnfpj4381","_id":"ck3gx4nae003rtkbsj2yrk4jd"},{"post_id":"ck3gx4n17000ktkbsdjltld5s","tag_id":"ck3gx4n4b002atkbs2e628dhd","_id":"ck3gx4nae003stkbs0vwem6lx"},{"post_id":"ck3gx4n1p0012tkbs4l2lb1dy","tag_id":"ck3gx4n4c002gtkbsrxayynea","_id":"ck3gx4nae003ttkbs0n8aoltc"},{"post_id":"ck3gx4n1r0014tkbsb4weo7lv","tag_id":"ck3gx4n4e002mtkbsp7p71dep","_id":"ck3gx4nae003utkbszx93em7t"},{"post_id":"ck3gx4n1r0014tkbsb4weo7lv","tag_id":"ck3gx4n4f002stkbsdalx4oo7","_id":"ck3gx4naf003vtkbs0imaui20"},{"post_id":"ck3gx4n1t0016tkbszhmpttfw","tag_id":"ck3gx4n4g002xtkbsza4kqlei","_id":"ck3gx4naf003wtkbsnsg3qxuf"},{"post_id":"ck3gx4n1t0016tkbszhmpttfw","tag_id":"ck3gx4n4h0032tkbsa40qdi3f","_id":"ck3gx4naf003xtkbschj1ufrc"},{"post_id":"ck3gx4n1v0018tkbshumlnd61","tag_id":"ck3gx4n4j0038tkbs119t0lyb","_id":"ck3gx4nag003ytkbsvxtngdky"},{"post_id":"ck3gx4n1v0018tkbshumlnd61","tag_id":"ck3gx4n4j003etkbsvovffym2","_id":"ck3gx4nag003ztkbstfyxhsmv"},{"post_id":"ck3gx4n1v0018tkbshumlnd61","tag_id":"ck3gx4n4l003htkbsh6oag705","_id":"ck3gx4nag0040tkbsl3bwjdta"}],"Tag":[{"name":"Kanade's Algorithm","_id":"ck3gx4n10000etkbsgcdjb391"},{"name":"Subarray","_id":"ck3gx4n19000mtkbsyoyqcgob"},{"name":"list","_id":"ck3gx4n1e000qtkbsva4x0pkn"},{"name":"recursion","_id":"ck3gx4n1i000utkbsy7r7oujf"},{"name":"pointer","_id":"ck3gx4n1m000ytkbsxxhaccb9"},{"name":"binary tree","_id":"ck3gx4n1z001btkbs25mrrhv2"},{"name":"dynamic programming","_id":"ck3gx4n25001jtkbsnfpj4381"},{"name":"dfs","_id":"ck3gx4n25001ktkbse8zl6lxi"},{"name":"backtracking","_id":"ck3gx4n42001ptkbskivfjblf"},{"name":"review","_id":"ck3gx4n46001ytkbs1awvn65g"},{"name":"HashMap","_id":"ck3gx4n4b002atkbs2e628dhd"},{"name":"https","_id":"ck3gx4n4c002gtkbsrxayynea"},{"name":"MySQL","_id":"ck3gx4n4e002mtkbsp7p71dep"},{"name":"ACID","_id":"ck3gx4n4f002stkbsdalx4oo7"},{"name":"Java","_id":"ck3gx4n4g002xtkbsza4kqlei"},{"name":"Java基础","_id":"ck3gx4n4h0032tkbsa40qdi3f"},{"name":"ReentrantLock","_id":"ck3gx4n4j0038tkbs119t0lyb"},{"name":"J.U.C","_id":"ck3gx4n4j003etkbsvovffym2"},{"name":"Concurrency","_id":"ck3gx4n4l003htkbsh6oag705"}]}}